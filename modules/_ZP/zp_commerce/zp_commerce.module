<?php

/**
 * @file
 * Defines ZP Commerce methods.
 */

/**
 * Implements hook_menu().
 */
function zp_commerce_menu() {
  
  $items['zp/add_objects'] = array(
    'title' => 'Add ZP Catalog Objects',
    'description' => 'Add new ZP Catalog objects: depts, subgroups, products, etc',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('zp_commerce_addZpCatalogObjects_form'),
    'access arguments' => array('administer taxonomy'),
  );
  
  
  $items['node/%node/product_entity'] = array(
    'title' => 'Product entity',
    'description' => t('Go to the product Entity, connected to this product Display.'),
    'page callback' => 'zp_commerce_goToProductEditPage',
    'page arguments' => array(1),
    'access callback' => 'zp_commerce_access_productEntity',
    'access arguments' => array(1), //array('administer taxonomy'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 50,
  );
  
  $items['admin/commerce/products/%/display'] = array(
    'title' => 'Product display',
    'description' => t('Go to the product Display, connected to this product Entity.'),
    'page callback' => 'zp_commerce_goToDisplayProductEditPage',
    'page arguments' => array(3),
    //'access callback' => 'zp_commerce_access_productEntity',
    'access arguments' => array('access content'), //array('administer taxonomy'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 50,
  );
  
  return $items;
}


/**
 * Implements hook_form_alter().
 *
 * @param array &$form
 *   Array with declared form.
 *
 * @param array &$form_state
 *   Array with current form state.
 *
 * @param string $form_id
 *   Form ID.
 *
 * @return void
 *   Return nothing.
 */
function zp_commerce_form_alter(&$form, &$form_state, $form_id) {
  
  dpm($form_id);  //dpm($form);
  // $conf['locale_custom_strings_en']['old string'] = 'new string'
  
  switch ($form_id) {
    case 'views_form_commerce_cart_form_default':
      
      
      $form['#validate'][] = 'zp_commerce_formCart_validate';
      //$form['#submit'][] = 'zp_commerce_formCart_submit';
      //$form['actions']['submit']['#submit'][] = 'zp_commerce_formCart_submit';
      $form['actions']['checkout']['#submit'][] = 'zp_commerce_formCart_submit';
      dpm($form);
      break;
  }
}


 
 
function zp_commerce_formCart_validate($form, &$form_state) {
  dpm('caaaaaaaaaaaaart validate');
  //drupal_set_message('---------This was run after the cart form was submitted, before the checkout page was rendered.');
  
  dpm($form_state);
  form_set_error('checkout', t('Sorry, you have to log in to finish the purchase.'));
}


function zp_commerce_formCart_submit($form, &$form_state) {
  //exit();
  dpm('caaaaaaaaaaaaart submit');
  drupal_set_message('++++++++++This was run after the cart form was submitted, before the checkout page was rendered.');
}

/**
 * Implements hook_commerce_entity_access().
 * 
 * Disable editing all orders except the cart to enable editing custom line item editable field for all users. 
 * Used while set enabled permission to edit any own orders.
 */
function zp_commerce_commerce_entity_access($op, $entity, $account, $entity_type) {
//   dpm($op);
//   dpm($entity_type);
//  dpm($entity);
//  dpm($account);
  //return TRUE;
  //if ($entity_type == 'commerce_order' && $op == 'update') {
  if ($entity_type == 'commerce_order' 
          && $account->uid != 1 && @$entity->status != 'cart') {
    // Require administer orders permission to delete orders
    if (!user_access('administer commerce_order entities', $account)) {
      return FALSE;
    }
  }
}


/**
 * Implements hook_entity_view_alter().
 * 
 * Using for hiding prices from users who don't have permission to see it, for example, anonimous or who don't have the product's shop in his favorites.
 * 
 */
function zp_commerce_entity_view_alter(&$build, $type) {
  dpm($build);
  dpm($type);
  $build['product:commerce_price']['#access']=FALSE;
}

/*
function zp_commerce_commerce_price_field_formatter_prepare_view($entity_type, $entities, $field, $instances, $langcode, $items, $displays) {
  //static $calculated_prices = array();

  dpm($entity_type);
  dpm($entities);
  dpm($field);
  dpm($instances);
  dpm($items);
  dpm($displays);
  $displays[6]['type'] == 'hidden';
  $instances[6]['display']['full']['type'] == 'hidden';
  $instances[6]['display']['default']['type'] == 'hidden';
  
  // If this is a single value purchase price field attached to a product...
  if ($entity_type == 'commerce_product' && $field['field_name'] == 'commerce_price' && $field['cardinality'] == 1) {
    // Prepare the items for each entity passed in.
    foreach ($entities as $product_id => $product) {
      // If this price should be calculated and hasn't been already...
      if (!empty($displays[$product_id]['settings']['calculation']) && 
        $displays[$product_id]['settings']['calculation'] == 'calculated_sell_price' && 
        empty($calculated_prices[$product_id][$field['field_name']])) {
        // Replace the data being displayed with data from a calculated price.
        $items[$product_id] = array(commerce_product_calculate_sell_price($product));

        // Keep track of which prices have already been calculated.
        $calculated_prices[$product_id][$field['field_name']] = TRUE;
      }
    }
  }
  
}
*/






// -----------------------------------------------------------------
// Corresponding links between product display and product entity

/**
 * Implements access function for products.
 */
function zp_commerce_access_productEntity($node) {
  global $user;
  return ($user->uid == 1 && $node->type == 'product_a') ? TRUE : FALSE;
}


//function zp_commerce_node_load($nid) {
//  dpm($nid);
//  //$node = node_load($nid);
//  return $nid;//$node;// ($node->type == 'product_a') ? $node : FALSE;
//}


/**
 * Goto product entity from display product page via local menu.
 */
function zp_commerce_goToProductEditPage($node) {
  drupal_goto('admin/commerce/products/' . $node->field_product[LANGUAGE_NONE][0]['product_id'], array('query' => array('destination' => ltrim(url('node/' . $node->nid), '/'))));
}


/**
 * Goto product display from entoty product page via local menu.
 */
function zp_commerce_goToDisplayProductEditPage($product_id) {
  
  //$nid = zp_commerce_get_referencing_node_id(commerce_product_load($product_id));
  $display_node_nid = zp_commerce_get_display_node_by_product_id($product_id); 
  
  //if (strpos($_SERVER['HTTP_REFERER'], 'destination=')) {
    drupal_goto('node/' . $display_node_nid);
//  }
//  else { 
//    drupal_goto('node/' . $display_node_nid, array('query' => array('destination' => ltrim(url('admin/commerce/products/' . $product_id), '/'))));
//  }
}


/**
 * Get display node id for a commerce product.
 * 
 * http://dropbucket.org/node/785
 * 
 * @param $product_id
 *  An integer value of the product id.
 * @param string $product_field_name
 *  Name of the commerce_product_reference field used to reference products from display node.
 * @return FALSE|node_id
 *  Returns FALSE if no results or display node id on success.
 */
function zp_commerce_get_display_node_by_product_id($product_id, $product_field_name = 'field_product') {
  $query = new EntityFieldQuery;
  $result = $query->entityCondition('entity_type', 'node', '=')
    ->propertyCondition('type', 'product_a')
    ->fieldCondition($product_field_name, 'product_id', $product_id, '=')
    ->range(0, 1)->execute();

  if (empty($result['node'])) {
    return FALSE;
  }
 
  return reset($result['node'])->nid;
}


/**
 * Get display node id for a commerce product. Another version.
 * 
 * http://www.drupalcommerce.org/questions/3176/how-get-node-id-product-display-using-product-id
 */
function zp_commerce_get_referencing_node_id($product) {
  // Itterate through all fields which refer to commerce products.
  foreach (commerce_info_fields('commerce_product_reference') as $field) {
    // Build query.
    $query = new EntityFieldQuery;
    $query->entityCondition('entity_type', 'node', '=')
      ->fieldCondition($field['field_name'], 'product_id', $product->product_id, '=')
      ->range(0, 1);

    if ($result = $query->execute()) {
      // Return node id.
      return array_shift(array_keys($result['node']));
    }
  }

  return false;
}

/**
 * Implements hook_menu_contextual_links_alter().
 * 
 * Add edit product entity for a product display node.
 */  
function zp_commerce_menu_contextual_links_alter(&$links, $router_item, $root_path) {
  // Add a link to all contextual links for nodes.
  /*
  if ($root_path == 'node/%') {
    $links['foo'] = array(
      'title' => t('Do fu'),
      'href' => 'foo/do',
      'localized_options' => array(
        'query' => array(
          'foo' => 'bar',
        ),
      ),
    );
  }
  */
  
  // Add a link to all contextual links for nodes of type product_display.
    if ($root_path == 'node/%' && $router_item['page_arguments'][0]->type == 'product_a' && !empty($router_item['page_arguments'][0]->field_product[LANGUAGE_NONE])) {

      // Loop through all products
      foreach ($router_item['page_arguments'][0]->field_product[LANGUAGE_NONE] as $element) {
        $product = commerce_product_load($element['product_id']);  

        // Add your contextual link
        $links['edit_prod_'.$element['product_id']] = array(
          'title' => t('Edit @sku', array('@sku' => $product->sku)),
          'href' => 'admin/commerce/products/'.$element['product_id'].'/edit',
          'localized_options' => array(
            'query' => array(
            'destination' => ltrim(request_uri(), '/'), //current_path(),
          ),
        ),
      );      
    }
  }  
}





// -----------------------------------------------------------------------
// Sidebar product filter by category block.

/**
 * Side bar product filter by category.
 */
function zp_commerce_buildSidebarFilter_form($form, &$form_state, $data) {
  
  
  $form['subgroups'] = array(
    '#type' => 'container',
    '#tree' => TRUE,
  );
  
  foreach ($data['subgroups_terms'] as $subgroup_term) {
    $form['subgroups'][$subgroup_term->tid] = array(
      '#type' => 'checkbox',
      '#title' => $subgroup_term->name,
      '#default_value' => !empty($data['tf'][$subgroup_term->tid]) ? TRUE : FALSE,
      //'#attributes' => array('id' => 'select_type',  'onChange' => "top.location.href='/node/add/" . "' + document.getElementById('select_type').options[document.getElementById('select_type').selectedIndex].value"),
        '#attributes' =>  array('class' =>array('filter_by_subgroup'), 'onClick' => array('javascript:this.form.submit();')),
    );
  }
    
    
//  $form['actions'] = array('#type' => 'actions');
//  $form['actions']['submit'] = array(
//    '#type' => 'submit',
//    '#value' => 'Submit',
//    //'#submit' => array('gv_misc_sendCapturedQuotesToProviders_form_submit'),
//    //'#base' => 'gv_misc_sendCapturedQuotesToProviders_form',
//    //'#disabled' => $class_submitted == 'all-submitted' ? TRUE : FALSE,
//  ); 
  
  return $form;
}


/**
 * Implements hook_form_validate().
 *
 * @return $form
 *   Return nothing.
 */
function zp_commerce_buildSidebarFilter_form_validate(&$form, &$form_state) {
  
  //drupal_set_message('In Validate!', 'warning');
  //dpm($form_state['values']);
  //dpm($form);
    
  //global $user;
  
  
//  if (!$form_state['values']['message']) {
//    form_set_error('message', 'You have to enter a Message, if don\'t want to just subscribe to newsletters');
//  }

  
  // a4s fix.
  // When a form doesn't have a submit button  (like autosubmitted form)
  // it won't get to the _submit function until i set this string below:
  $form_state['submitted'] = TRUE;
}


/**
 * Implements hook_form_submit().
 *
 * @return $form
 *   Return nothing.
 */
function zp_commerce_buildSidebarFilter_form_submit(&$form, &$form_state) {
 
  //dpm($form_state['values']);
  
  // Redirect back to the current page.
  // But befotr Put selected by user (in the sidebar) subgroups to the url params.
  $get = $_GET;
  unset($get['q'], $get['tf']);
  $tf = NULL;
  foreach ($form_state['values']['subgroups'] as $tid => $checked) {
    if ($checked) {
      $tf .= ($tf ? ';' : '') . $tid;
    }
  }
  if ($tf) {
    $get['tf'] = $tf;
  }

  drupal_goto($_GET['q'], array('query' => $get));
}





//- ----------------------------------------------------------------------
// IMPORT ZP OBJECTS: Depts, products, etc.


/**
 * Form builder function to start adding ZP Catalog Objects.
 */
function zp_commerce_addZpCatalogObjects_form() {
  
  $form['description'] = array(
    '#type' => 'markup',
    '#markup' => t('Go adding new ZP Catalog objects!'),
  );
  
  if (!empty($_SESSION['zp_current_batch_id'])) {
    dpm($_SESSION['zp_current_batch_' . $_SESSION['zp_current_batch_id'] . '_results']);
    $form['continue_interrupted'] = array(
      '#type' => 'markup',
      '#markup' => '<div>' . t('Continue the last interrupted ') . l(t('batch with id=') . $_SESSION['zp_current_batch_id'], 'batch', array('query' => array('op' => 'start', 'id' => $_SESSION['zp_current_batch_id']))) . '</div>',
    );
  }
  else {
    $objects = zp_commerce_prepareZpObjectsToAddToCatalog();
    dpm($objects);
    // reset counter for debug information.
    $_SESSION['http_request_count'] = NULL;
  }

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Go',
  );
  
  return $form;
}

/**
 * Builds an array with objects to add to ZP Catalog.
 */
function zp_commerce_prepareZpObjectsToAddToCatalog() {
  
  $objects = array();
  
  $objects[] = array(
    'type' => 'department',
    'title' => 'Напитки',
    'description' => 'Описание отдела Напитки', 
    'summary' => 'Краткое описание отдела Напитки',
    'zp_id' => 'z003',
    'parent_zp_id' => 'z001',
    'weight' => 5,
  );
  
  $objects[] = array(
    'type' => 'department',
    'title' => 'Алкогольные напитки',
    'description' => 'Описание отдела Алкогольные напитки', 
    'summary' => 'Краткое описание отдела Алкогольные напитки',
    'zp_id' => 'z004',
    'parent_zp_id' => 'z003',
    'weight' => 5,
  );
  
  $objects[] = array(
    'title' => 'Безалкогольные напитки',
    'description' => 'Описание отдела Безлкогольные напитки', 
    'summary' => 'Краткое описание отдела Безалкогольные напитки',
    'zp_id' => 'z005',
    'parent_zp_id' => 'z003',
    'weight' => 6,
  );
    
  $objects[] = array(
    'type' => 'subgroup',
    'title' => 'подгруппа Вино',
    'description' => 'Описание подгруппы Вино', 
    //'zp_id' => 'z007',
    'parent_zp_id' => 'z004',
    'weight' => 2,
  );  

  $objects[] = array(
    'type' => 'subgroup',
    'title' => 'подгруппа Бормотуха',
    'description' => 'Описание подгруппы Бормотуха', 
    //'zp_id' => 'z007',
    'parent_zp_id' => 'z004',
    'weight' => 1,
  );
  
  $objects[] = array(
    'product_display' => 'product_a',
    'product_type' => 'product',
    'status' => TRUE,
    'price' => 99.09,
    'currency' => 'UAH',
    'title' => 'Вино 1',
    'description' => 'Описание продукта Вино 1', 
    'summary' => 'Краткое описание продукта Вино 1',
    'zp_id' => 'z010',
    'parent_zp_id' => 'z007',
    'subgroup' => 'подгруппа Вино',
    'weight' => 1,
  );
  
  $objects[] = array(
    'product_display' => 'product_a',
    'product_type' => 'product',
    'status' => TRUE,
    'price' => 99.09,
    'currency' => 'UAH',
    'title' => 'Вино 2',
    'description' => 'Описание продукта Вино 2', 
    'summary' => 'Краткое описание продукта Вино 2',
    'zp_id' => 'z009',
    'parent_zp_id' => 'z007',
    'subgroup' => 'подгруппа Вино',
    'weight' => 3,
  );
  
  $objects[] = array(
    'product_display' => 'product_a',
    'product_type' => 'product',
    'status' => TRUE,
    'price' => 99.09,
    'currency' => 'UAH',
    'title' => 'Вино 3',
    'description' => 'Описание продукта Вино 3', 
    'summary' => 'Краткое описание продукта Вино 3',
    'zp_id' => 'z008',
    'parent_zp_id' => 'z004',
    'subgroup' => 'подгруппа Вино',
    'weight' => 2,
  );
  
  
  $objects[] = array(
    'product_display' => 'product_a',
    'product_type' => 'product',
    'status' => TRUE,
    'price' => 99.09,
    'currency' => 'UAH',
    'title' => 'Бормотуха 1',
    'description' => 'Описание продукта Бормотуха 1', 
    'summary' => 'Краткое описание продукта Бормотуха 1',
    'zp_id' => 'z011',
    'parent_zp_id' => 'z004',
    'subgroup' => 'подгруппа Бормотуха',
    'weight' => 2,
  );
  
//  for($i = 1; $i< 1000; $i++) {
//    $objects[] = array(
//      'product_display' => 'product_a',
//      'product_type' => 'product',
//      'status' => TRUE,
//      'price' => 99.09,
//      'currency' => 'UAH',
//      'title' => 'Бормотуха ' . ($i+3),
//      'description' => 'Описание продукта Бормотуха 1', 
//      'summary' => 'Краткое описание продукта Бормотуха 1',
//      'zp_id' => 'z011',
//      'parent_zp_id' => 'z004',
//      'subgroup' => 'подгруппа Бормотуха',
//      'weight' => 2,
//    );
//  }
  return $objects;
}



/**
 * Hook Form submit to start adding ZP Catalog Objects.
 */
function zp_commerce_addZpCatalogObjects_form_submit($form, &$form_state) {
  
  $objects = zp_commerce_prepareZpObjectsToAddToCatalog();

  $batch = array(
    'operations' => array(
      array('zp_commerce_addObjectsToCatalog_batch_process', array($objects)),
    ),
    'finished' => 'zp_commerce_addObjectsToCatalog_batch_finished',
    // Message displayed while processing the batch. Available placeholders are:
    // @current, @remaining, @total, @percentage, @estimate and @elapsed.
    // These placeholders are replaced with actual values in _batch_process(),
    // using strtr() instead of t(). The values are determined based on the
    // number of operations in the 'operations' array (above), NOT by the number
    // of nodes that will be processed. In this example, there are 20
    // operations, so @total will always be 20, even though there are multiple
    // nodes per operation.
    // Defaults to t('Completed @current of @total.').
    'title' => t('Add Objects to ZP Catalog'),
    'init_message' => t('Catalog objects are about to be added to ZP Catalog.'),
    'progress_message' => t('Adding objects to ZP Catalog Progress: Completed @current of @total objects adding.'),
    //'redirect' => 'admin/structure/taxonomy',
    'error_message' => t('ZP Catalog objects adding process has encountered an error.'),
  );
  batch_set($batch);
  
  
  // if need to set non-progressive execution here is a trick how to set it before batch_process().
  // from https://drupal.org/node/638712#comment-2289138
  // 
  // $batch =& batch_get();
  // $batch['progressive'] = FALSE;
  //
  //batch_process();
}


/**
 * Batch operation for batch 2 : load all nodes, 5 by five
 * After each group of 5 control is returned to the batch API for later
 * continuation.
 */
function zp_commerce_addObjectsToCatalog_batch_process($objects, &$context) {
  // Use the $context['sandbox'] at your convenience to store the
  // information needed to track progression between successive calls.
  if (empty($context['sandbox'])) {
    $context['sandbox'] = array();
    $context['sandbox']['progress'] = 0;
    $context['sandbox']['current_object_id'] = 0;
    $context['results']['objects_source'] = $objects;
    // Save object count for the termination message.
    $context['sandbox']['max'] = count($objects);
  }

  // Process object.
  $current_object_title = 'id: ' . $context['sandbox']['current_object_id'] . ', ' . $objects[$context['sandbox']['current_object_id']]['title'];
  if (!$error_message = zp_commerce_addNewZpObject($objects[$context['sandbox']['current_object_id']], TRUE)) {
    $current_object_result_message = 'Success: ' . $current_object_title;
    // Update progress information.
    $context['sandbox']['progress']++;
  }
  else {
    $current_object_result_message = 'Error: ' . $current_object_title . ' 
-> ' . $error_message;
    $context['results']['errors'][] = $current_object_result_message;
  }
  
  // Store some results for post-processing in the 'finished' callback.
  // The contents of 'results' will be available as $results in the 'finished' 
  $context['results']['objects_processed'][] = $current_object_result_message;
  
  // Dynamic message block (current processing object and the history in textarea) under the progress bar.
  $message = $current_object_result_message . '(' . $context['sandbox']['progress'] . ' out of ' . $context['sandbox']['max'] . ')';
  
  $text_field = array(
    '#type' => 'textarea',
    '#title' => 'History',
    '#value' => $context['results']['history'],
  );

  $context['message'] = $message . ' ' . render($text_field) . l('Stop', 'zp/add_objects');;

  $context['results']['history'] = $message . '
' . $context['results']['history']; 
  
  // We can stop batch and then contimue it using stored id of batch.
  $_SESSION['zp_current_batch_id'] = $_GET['id'];
  $_SESSION['zp_current_batch_' . $_GET['id'] . '_results'] = $context['results'];
  
  // If no error, Inform the batch engine that we are not finished,
  // and provide an estimation of the completion level we reached.
  if ($error_message) {
    // Stop processing because of the error!
    $context['finished'] = 1;
  }
  elseif ($context['sandbox']['progress'] != $context['sandbox']['max']) {
    $context['finished'] = ($context['sandbox']['progress'] / $context['sandbox']['max']);
  }
  
  if ($context['finished'] < 1) {
    $context['sandbox']['current_object_id'] += 1;
  }
  else{
    // We don't need to know it anymore.
    unset($_SESSION['zp_current_batch_id'], $_SESSION['zp_current_batch_' . $_GET['id'] . '_results']);
    
  }
  
  
  
  // Alert the next iteration.
  zp_misc_update_http_requests();
}


/**
 * Batch 'finished' callback.
 */
function zp_commerce_addObjectsToCatalog_batch_finished($success, $results, $operations) {
  dpm($results);
  if ($success) {
    drupal_set_message(t('@count objects processed in @requests HTTP requests.', array('@count' => count($results['objects_processed']), '@requests' => zp_misc_get_http_requests())));
    drupal_set_message(t('ZP Catalog has been updated with new/changed objects. The final object was "%final"', array('%final' => end($results['objects_processed']))));
  }
  else {
    // An error occurred.
    // $operations contains the operations that remained unprocessed.
    $error_operation = reset($operations);
    drupal_set_message(t('An error occurred while processing @operation with arguments : @args', array('@operation' => $error_operation[0], '@args' => print_r($error_operation[0], TRUE))));
  }
  
  // Clear caches, etc after adding new ZP Catalog objects.
  ////menu_cache_clear_all();
  //drupal_goto('<front>'); 
}


/**
 * Test page function for url /test.
 */
function zp_commerce_addNewDeptAndMenuItem($object) {
 
  // Creat a node for the department.
  // ---------------------------------------------------------------------------------------------------
  
  global $user;
  global $language;
  
  $node = new stdClass();
  $node->type = 'department';
  node_object_prepare($node);
  
  $current_time = time();
  $node->date = $current_time;
  $node->created = $current_time;
  $node->changed = $current_time;
  
  $node->title = $object['title'];
  $node->language = LANGUAGE_NONE; //$language->language; 
  $node->uid = $user->uid;
  $node->status = 1;
  $node->promote = 0;
  $node->sticky = 0;
  $node->comment = 0;
  
  $node->body[$node->language][0]['format'] = 'full_html';
  $node->body[$node->language][0]['value'] = $object['description'];
  $node->body[$node->language][0]['summary'] = $object['summary'];
  $node->body[$node->language][0]['safe_value'] = check_plain($object['description']);
  $node->body[$node->language][0]['safe_summary'] = check_plain($object['summary']);
  
  $node->field_zp_id[$node->language][0]['value'] = $object['zp_id'];
  $node->field_c_weight[$node->language][0]['value'] = $object['weight'];

  /*
  $node->field_zp_id[$node->language][0] = array(
    'value' => $object['zp_id'],
    'safe_value' => check_plain($object['zp_id']),
    'format' => 'full_html',
  );
  */
  
  /*
  $node->path = array(
    'alias' => $object['url_alias'],
    'language' => $node->language,
    'pathauto' => 0,
  );
  */
  
  if (!$node = node_submit($node)) {
    $error_message = '1.Error has occured while saving a Department ' . $object['title'];
    drupal_set_message($error_message, 'error');
    return $error_message;
  }

  node_save($node);
  if (empty($node->nid)) {
    $error_message = '2.Error has occured while saving a Department ' . $object['title'];
    drupal_set_message($error_message, 'error');
    return $error_message;
  }
  
  drupal_set_message('A new department "' . $object['title']. '" was created, Success!', 'warning');

  
  
  
  // Create a term in the menu Catalog and connect it to the just created department node.
  // ---------------------------------------------------------------------------------------------------
  zp_commerce_addNewCatalogTerm($object);
  
  // Taxonomy term itself will be assigned to this node automatically on taxonomy_menu item creation via hook zp_commerce_taxonomy_menu_save.
  
  // Success.
  return FALSE;
}


/**
 * Create a new Catalog term by zp_id.
 * If there is a dept with such a zp_id, it will be connected to that dept, 
 * or else no menu item will be created at all.
 */
function zp_commerce_addNewCatalogTerm($object) {
  
  static $catalog_voc;
  if (!$catalog_voc) {
    $catalog_voc = taxonomy_vocabulary_machine_name_load('catalog');
  }
  
  // Find parent term tid by parent_zp_id.
  $parent_tid = zp_commerce_fieldRead_idByValue_single('zp_id', $object['parent_zp_id'], 'taxonomy_term', 'catalog');
  
  $catalog_term = (object) array(
    'name' => !empty($object['menu_item_title']) ? $object['menu_item_title'] : $object['title'],
    'vid' => $catalog_voc->vid,
    'parent' => array($parent_tid),
    'weight' => $object['weight'],
    'field_zp_id' => !empty($object['zp_id']) ? array('und' => array(0 => array('value' => $object['zp_id']))) : NULL,
  );
  
  taxonomy_term_save($catalog_term);
  //dpm($menu_item_term);
  
  // If there is a dept/shop/etc connectd to this term by zp_id, this term will be assigned to that node automatically on taxonomy_menu item creation via hook zp_commerce_taxonomy_menu_save.
  // If this term doesn't have zp_id - this is subgroup and will not be assigned to anything.

}

/**
 * Create a new product and connect it to the Catalog term by zp_id.
 */
function zp_commerce_addNewProductAndConnectItToSubgroupCatalogTerm($object) {
 
  // Find parent term tid by parent_zp_id.
  if (!$parent_tid = zp_commerce_fieldRead_idByValue_single('zp_id', $object['parent_zp_id'], 'taxonomy_term', 'catalog')) {
    $error_message = 'There is no dept with zp_id ' . $object['parent_zp_id'];
    drupal_set_message($error_message, 'warning');
    return $error_message;
  }
  
  // Search for term which is a child of this product parent dept (and just found parent term) and has a name of subgroup which is set in object
  $query = db_select('taxonomy_term_data', 'td');
  $query->fields('td', array('tid'))
        ->condition('name', $object['subgroup']);
  $query->join('taxonomy_term_hierarchy', 'th', 'th.tid = td.tid AND th.parent = ' . $parent_tid);
  
  if (!$subgroup_term_tid = $query->execute()->fetchField()) {
    $error_message = 'No subgroup ' . $object['subgroup'] . ' in the dept with zp_id ' . $object['parent_zp_id'];
    drupal_set_message($error_message, 'warning');
    return $error_message;
  }
  
  //dpm($subgroup_term_tid);
  
  
  
  // Create a Product Type entity for the product.
  // ---------------------------------------------------------------------------------------------------
  
  // From product_example.module.
  
  $form_state = array();
  $form_state['values'] = array();
  $form = array();
  $form['#parents'] = array();
  
  $product_type = empty($object['product_type']) ? 'product' : $object['product_type']; 
  // Generate a new product object
  $new_product = commerce_product_new($object['product_type']);

  $new_product->status = isset($object['status']) ? $object['status'] : TRUE;
  $new_product->uid = $GLOBALS['user']->uid;

  $new_product->sku = $object['zp_id'];
  $new_product->title = $object['title'];
  $new_product->created = $new_product->changed = time();

  //commerce_price[und][0][amount]
  $price = array(LANGUAGE_NONE => array(0 => array(
    'amount' => $object['price'] * 100,
    'currency_code' => $object['currency'], //commerce_default_currency(),
  )));
  $form_state['values']['commerce_price'] = $price;

  // Notify field widgets to save their field data
  field_attach_submit('commerce_product', $new_product, $form, $form_state);

  commerce_product_save($new_product);
  
  if (empty($new_product->product_id)) {
    $error_message = '0.Error has occured while creating a Product type "' . $object['title'] . '" with zp_id ' . $object['zp_id'];
    drupal_set_message($error_message, 'error');
    return $error_message;
  }
  
  $product_id = $new_product->product_id;
  dpm('product_id = ' . $product_id);
  
  
  
  // Create a Product Display node for the product,
  // And connect to it just created Product Type entity.
  // ---------------------------------------------------------------------------------------------------
  
  $product_display = empty($object['product_display']) ? 'product_a' : $object['product_display']; 
  $node = new stdClass();
  $node->type = $product_display;
  node_object_prepare($node);
  
  $current_time = time();
  $node->date = $current_time;
  $node->created = $current_time;
  $node->changed = $current_time;
  
  $node->title = $object['title'];
  $node->language = LANGUAGE_NONE; //$language->language; 
  $node->uid = $GLOBALS['user']->uid;
  $node->status = 1;
  $node->promote = 0;
  $node->sticky = 0;
  $node->comment = 0;
  
  $node->body[$node->language][0]['format'] = 'full_html';
  $node->body[$node->language][0]['value'] = $object['description'];
  $node->body[$node->language][0]['summary'] = $object['summary'];
  $node->body[$node->language][0]['safe_value'] = check_plain($object['description']);
  $node->body[$node->language][0]['safe_summary'] = check_plain($object['summary']);
  
  $node->field_zp_id[$node->language][0]['value'] = $object['zp_id'];
  $node->field_parent_zp_id[$node->language][0]['value'] = $object['parent_zp_id'];
  
  $node->field_c_weight[$node->language][0]['value'] = $object['weight'];

  $node->{'field_' . $product_type}[$node->language][0]['product_id'] = $product_id;
  
  
  /*
  $node->field_zp_id[$node->language][0] = array(
    'value' => $object['zp_id'],
    'safe_value' => check_plain($object['zp_id']),
    'format' => 'full_html',
  );
 
  $node->path = array(
    'alias' => $object['url_alias'],
    'language' => $node->language,
    'pathauto' => 0,
  );
  */
  
  if (!$node = node_submit($node)) {
    $error_message = '1.Error has occured while saving a Product display "' . $object['title'] . '" with zp_id ' . $object['zp_id'];
    drupal_set_message($error_message, 'error');
    return $error_message;
  }

  node_save($node);
  if (empty($node->nid)) {
    $error_message = '2.Error has occured while saving a Product display "' . $object['title'] . '" with zp_id ' . $object['zp_id'];
    drupal_set_message($error_message, 'error');
    return $error_message;
  }
  
  drupal_set_message('A new Product display "' . $object['title'] . '" with zp_id ' . $object['zp_id'] . ' was created, Success!', 'warning');

  
  // Connect the subgroup term (found above) to this product node.
  zp_commerce_fieldTermReferenceSave('catalog', $node->nid, $subgroup_term_tid, 'node', $product_display);
  drupal_set_message('The Product display "' . $object['title'] . '" has been connected to a corresponding Product type and the subgroup term "' . $subgroup_term_tid . '".', 'warning');
  
  
  /*
  // Find this product Catalog term by parent_zp_id.
  $term_tid = zp_commerce_fieldRead_idByValue_single('zp_id', $object['parent_zp_id'], 'taxonomy_term', 'catalog');
  if ($term_tid) {
    // Connect or update the term to the node.
    zp_commerce_fieldTermReferenceSave('catalog', $node->nid, $term_tid, 'node', $object_type);
    drupal_set_message('The product "' . $object['title'] . '" has been connected to the term "' . $term_tid . '".', 'warning');
  }
  else {
    drupal_set_message('There is no correcponding Catalog term with parent_zp_id "' . $object['parent_zp_id'] . '" for this product "' . $object['title'] . '".', 'error');
  }
  */
  
  // Success.
  return NULL;
}


/**
 * Allows modules to perform operations after a menu link resulting from the
 * processing of a taxonomy term has been saved.
 *
 * @param $term
 *   The taxonomy term
 * @param $menu_link
 *   The menu link that has been saved.
 * @param $mlid
 *   The identifier of the newly created menu item.
 */
function zp_commerce_taxonomy_menu_save($term, $menu_link, $mlid) {
  // For example, we could process all the translated taxonomy terms of this
  // term here, in order to save their respective translated menu links.
  
    //dpm($term);
    //dpm($menu_link);
    
    
    // a4s rewrite menu item path, attribute title.
    
    // Calculate it again... just testing, no need for this.
    ////$menu_link = taxonomy_menu_menu_link_prepare($term, 'menu-catalog-menu');
            
    // Original from taxonomy_menu_menu_link_prepare($term, $menu_name).
    
    // HTML title attribute.
     /*
    if (taxonomy_menu_variable_get('display_title_attr', $term->vid, TRUE)) {
      $term_description = taxonomy_menu_variable_get('term_item_description', $term->vid, 0);
    }
    $menu_link['options']['attributes']['title'] = (isset($term_description) && $term_description == 1) ? trim($term->description) : '';
    // Path.
    $link_path = taxonomy_menu_path_get($term->vid, $term->tid);
    $menu_link['link_path'] = drupal_get_normal_path($link_path, $langcode);
    */
    
    // Allow manually change and delete the menu item by a user.
    unset($menu_link['module']);
      
    // If there is a dept/shop/etc connected to this term, show link to this dept instead the link to the term.
    if ($object_nid = zp_commerce_findDeptOrShopOrCityByZpIDofTerm_andConnectItToTerm($term)) {
      // dpm($term);
      // And save the renewed item again, as in taxonomy_menu_menu_link_prepare($term, $menu_name).
      $menu_link['link_path'] = 'node/' . $object_nid;
    }
    
    
    // Let's create a menu item only for existing dept/shop/etc node.
    // And completely remove already created menu item (originally connected to taxonomy/term/xxx) from the menu.
    else {
      static $catalog_voc;
      if (!$catalog_voc) {
        $catalog_voc = taxonomy_vocabulary_machine_name_load('catalog');
      }
      menu_link_delete($menu_link['mlid']);
      _taxonomy_menu_delete_item($catalog_voc->vid, $term->tid);
      return FALSE;
    }
    
    /*
    else {
      //dpm('not found dept');
      // Show a menu item without a link.
      // Depends on the module 'Special menu items'.
      $menu_link['link_path'] = '<nolink>';
    }
    */
    
    $mlid = menu_link_save($menu_link);
    
    //dpm($menu_link);

}


/**
 * Creates a menu item for a catalog term. For dept node/x or for product node/x?tf=term_id
 */
function zp_commerce_createMenuItemForTerm($term) {

    // Original functipn from taxonomy_menu module.
    $menu_link = taxonomy_menu_menu_link_prepare($term, 'menu-catalog-menu');
    
    // Then we can correct some values...
    
    // Original from taxonomy_menu_menu_link_prepare($term, $menu_name).
    
    // HTML title attribute.
     /*
    if (taxonomy_menu_variable_get('display_title_attr', $term->vid, TRUE)) {
      $term_description = taxonomy_menu_variable_get('term_item_description', $term->vid, 0);
    }
    $menu_link['options']['attributes']['title'] = (isset($term_description) && $term_description == 1) ? trim($term->description) : '';
    // Path.
    $link_path = taxonomy_menu_path_get($term->vid, $term->tid);
    $menu_link['link_path'] = drupal_get_normal_path($link_path, $langcode);
    */
    
    // Allow manually change and delete the menu item by a user.
    unset($menu_link['module']);
      
    // If there is a dept/shop/city connected to this term, show link to this dept instead the link to the term.
    if ($object_nid = zp_commerce_findDeptOrShopOrCityByZpIDofTerm_andConnectItToTerm($term)) {
      // And save the renewed item again, as in taxonomy_menu_menu_link_prepare($term, $menu_name).
      $menu_link['link_path'] = 'node/' . $object_nid;
    }
    
    // Let's create a menu item only for existing dept/shop/city node.
    else {
      return FALSE;
    }
    /*
    // If there is no dept connected to the term but there is a product with the same zp_id, 
    // find it's parent dept and create a menu link for this term node/parent_dept_nid?tf=term_id
    elseif ($parent_dept_nid = zp_commerce_findParentDeptByZPIDofTerm($term)) {
      // And save the renewed item again, as in taxonomy_menu_menu_link_prepare($term, $menu_name).
      $menu_link['link_path'] = 'node/' . $parent_dept_nid . '/' . $term->tid;
    }
    else {
      //dpm('not found dept/shop/city');
      // Show a menu item without a link.
      // Depends on the module 'Special menu items'.
      $menu_link['link_path'] = '<nolink>';
    }
    */
    
    $mlid = menu_link_save($menu_link);
}


/**
 * Find a parent term and dept connected to it.
 */
function zp_commerce_findParentDeptByZPIDofTerm($term) {

  // If term_id provided instead of a term object, load an object.
  if (is_object($term)) {
    $term_tid = $term->tid;
  }
  else {
    $term_tid = $term;
  }
  //dpm($term);
  
  // Find parent term.
  $taxonomy_reference_term_field_for_catalog = 'catalog';
  $query = db_select('taxonomy_term_hierarchy', 'th');
  $query->fields('th', array('parent'))
        ->condition('tid', $term_tid);
  $query->leftJoin('field_data_field_' . $taxonomy_reference_term_field_for_catalog, 'tc', 'tc.field_' . $taxonomy_reference_term_field_for_catalog . "_tid = th.parent AND tc.bundle = 'department'");
  $query->fields('tc', array('entity_id'));
  $result = $query->execute()->fetchObject();
  
  dpm($result);
  
  return $result->entity_id;
}


/**
 * Find a dept connected by zp_id to a catalog term and assign this dept to this term via reference term field catalog voc.
 */
function zp_commerce_findDeptOrShopOrCityByZpIDofTerm_andConnectItToTerm($term) {

  
  //dpm($term);
  
  // If the $term->field_zp_id field is not loaded to the term object, load it now.
  if (!isset($term->field_zp_id)) {
    $term_short = $term;
    $term = taxonomy_term_load($term->tid);
    $term->parents = @$term_short->parents;
    $term->depth = @$term_short->depth;
  }
  
  // Term with empty zp_id - subgroup.
  if (empty($term->field_zp_id['und'][0]['value'])) {
    return NULL;
  }
  
  
  // Connect not only depts but also shops to corresponding catalog term.
  $object_type = 'department';
  if(!$object_nid = zp_commerce_fieldRead_idByValue_single('zp_id', $term->field_zp_id['und'][0]['value'], 'node', $object_type)) {
    $object_type = 'shop';
    if(!$object_nid = zp_commerce_fieldRead_idByValue_single('zp_id', $term->field_zp_id['und'][0]['value'], 'node', $object_type)) {
      $object_type = 'city';
      if(!$object_nid = zp_commerce_fieldRead_idByValue_single('zp_id', $term->field_zp_id['und'][0]['value'], 'node', $object_type)) {
        return NULL;
      }
    }
  }


  // Connect or update the term to the node.
  zp_commerce_fieldTermReferenceSave('catalog', $object_nid, $term->tid, 'node', $object_type);

  
  //dpm('$object_nid = ' . $object_nid);
  return $object_nid;
}

/**
 * Implements hook_node_delete().
 *
 */
function zp_commerce_node_delete($node) {
  
  static $catalog_voc;
  
  if ($node->type == 'department') {
    if (!$catalog_voc) {
      $catalog_voc = taxonomy_vocabulary_machine_name_load('catalog');
    }
    
    // After deletion of ant node, module Menu will delete it's menu link as well.
    // But it doesn't affect/correct taxonomy menu table to delete this menu link from there.
    // So we have to delete such an orphaned tid/mlid from the taxonomy menu table.
    
    // Find the catalog menu tid by the deleted node zp_id which is the same in corresponding term from the catalog menu.
    $term_tid = zp_commerce_fieldRead_idByValue_single('zp_id', $node->field_zp_id['und'][0]['value'], 'taxonomy_term', 'catalog');
    // Delete the row with this tid from the taxonomy menu table.
    _taxonomy_menu_delete_item($catalog_voc->vid, $term_tid);
    
    // And now, as we, in fact, have a new term without a corresponding menu item, we create it, by calling taxonomy menu function...
    // It has to find any orphaned terms and create for them menu items.
    // 
    // But in our case, using our zp hook zp_commerce_taxonomy_menu_save we will set <nolink> for such menu items.
    // 
    //taxonomy_menu_rebuild($catalog_voc->vid);
    // Rebuild menu for only inserted items.
    taxonomy_menu_menu_links_insert($catalog_voc->vid);
    drupal_set_message('ZP. Taxonomy menu item for "' .  $node->title . '" has been updated to set empty item after the node ' . $node->nid . ' deletion!', 'warning');
  }
  
}


/**
 * Creates new ZP object: dept, subgroup, product, etc.
 */
function zp_commerce_addNewZpObject($object, $test = FALSE){
  
  if ($test) {
    sleep(1);
    //dpm($object['title']);
    if ($object['zp_id'] == 'z010') {
      return 'Error with z010';
    }
    else {
      return NULL;
    }
  }
  
  if (isset($object['type'])) {
    $type = $object['type'];
  }
  else {
    $type = isset($object['product_display']) ? $object['product_display'] : (isset($object['product_type']) ? $object['product_type'] : NULL);
  }
    
  switch ($type) {
    case 'department':
      return zp_commerce_addNewDeptAndMenuItem($object);
    case 'subgroup':
      return zp_commerce_addNewCatalogTerm($object);
    case 'product':
    case 'product_a':
      return zp_commerce_addNewProductAndConnectItToSubgroupCatalogTerm($object);
  }
}







// -----------------------------------------------------------------
// SHIPPING


/**
 * Implements hook_commerce_shipping_method_info().
 */
function zp_commerce_commerce_shipping_method_info() {
  $shipping_methods = array();

  //$shipping_methods['example_shipping_method'] = array(
  $shipping_methods['zp_shipping_method'] = array(
    //'title' => t('Example shipping method'),
    'title' => t('ZP shipping method'),
    //'description' => t('Defines a single flat rate service with a couple of service details.'),
    'description' => t('Defines ZP shipping services with a couple of service details.'),
  );

  return $shipping_methods;
}

/**
 * Implements hook_commerce_shipping_service_info().
 */
function zp_commerce_commerce_shipping_service_info() {
  $shipping_services = array();

  //$shipping_services['example_shipping_service'] = array(
  $shipping_services['courier_shipping_service'] = array(
    'title' => t('Доставка курьером по городу'),
    'description' => t('Доставка курьером в пределах города'),
    //'display_title' => t('Shipping'),
    'display_title' => t('Доставка курьером по городу'),
    //'shipping_method' => 'example_shipping_method',
    'shipping_method' => 'zp_shipping_method',
    'price_component' => 'shipping',
    //'rules_component' => FALSE,
    'weight' => -100,
    'callbacks' => array(
      'rate' => 'zp_commerce_service_rate',
      'details_form' => 'zp_commerce_service_details_form',
      'details_form_validate' => 'zp_commerce_service_details_form_validate',
      'details_form_submit' => 'zp_commerce_service_details_form_submit',
    ),
  );

  return $shipping_services;
}

/**
 * Shipping service callback: returns a base price array for a shipping service
 * calculated for the given order.
 */
function zp_commerce_service_rate($shipping_service, $order) {
  //dpm($shipping_service);
  //dpm($order); 
  
  if ($order->commerce_order_total['und'][0]['data']['components'][0]['price']['amount'] < 10000) {
    $shipping_cost = 2000;
  }
  else {
    $shipping_cost = $order->commerce_order_total['und'][0]['data']['components'][0]['price']['amount']/10; // 10%
  }
  
  return array(
    'amount' => $shipping_cost,
    'currency_code' => $order->commerce_order_total['und'][0]['currency_code'],
    'data' => array(),
  );
}

/**
 * Shipping service callback: returns the example shipping service details form.
 */
function zp_commerce_service_details_form($pane_form, $pane_values, $checkout_pane, $order, $shipping_service) {
  $form = array();

  if ($order->commerce_order_total['und'][0]['data']['components'][0]['price']['amount'] < 10000) {
    //$shipping_cost = 2000;
    $descr = 'The order sum is less than ' . commerce_currency_format(10000, $order->commerce_order_total['und'][0]['currency_code']) . '. Shipping cost is ' . commerce_currency_format(2000, $order->commerce_order_total['und'][0]['currency_code']);
  }
  else {
    $shipping_cost = $order->commerce_order_total['und'][0]['data']['components'][0]['price']['amount']/10; // 10%
    $descr = 'Shipping cost is ' . commerce_currency_format($shipping_cost, $order->commerce_order_total['und'][0]['currency_code']) . ' (10% from the total order sum of ' . commerce_currency_format($order->commerce_order_total['und'][0]['data']['components'][0]['price']['amount'], $order->commerce_order_total['und'][0]['currency_code']) . ')';
  }
  
  $pane_values['service_details'] += array(
    //'name' => 'xxx',
    'descr' => $descr,
    'express' => 1,
  );

  $form['descr'] = array(
    '#markup' => '<div class="description">' . $descr . '</div>',
  );
  
//  $form['name'] = array(
//    '#type' => 'textfield',
//    '#title' => t('Name'),
//    '#description' => t('This is a demonstration field coded to fail validation for single character values.'),
//    '#default_value' => $pane_values['service_details']['name'],
//    '#required' => TRUE,
//  );

  $form['express'] = array(
    '#type' => 'checkbox',
    '#title' => t('Экспресс доставка'),
    '#description' => t('Быстрая доставка (costs an additional ' . commerce_currency_format(1500, $order->commerce_order_total['und'][0]['currency_code']) .')'),
    '#default_value' => $pane_values['service_details']['express'],
  );

  return $form;
}

/**
 * Shipping service callback: validates the example shipping service details.
 */
function zp_commerce_service_details_form_validate($details_form, $details_values, $shipping_service, $order, $form_parents) {
//dpm($details_values);
//  if (strlen($details_values['name']) < 2) {
//    form_set_error(implode('][', array_merge($form_parents, array('name'))), t('You must enter a name two or more characters long.'));
//
//    // Even though the form error is enough to stop the submission of the form,
//    // it's not enough to stop it from a Commerce standpoint because of the
//    // combined validation / submission going on per-pane in the checkout form.
//    return FALSE;
//  }
}

/**
 * Shipping service callback: increases the shipping line item's unit price if
 * express delivery was selected.
 */
function zp_commerce_service_details_form_submit($details_form, $details_values, $line_item) {
  //dpm($line_item);
  if ($details_values['express']) {
    $line_item_wrapper = entity_metadata_wrapper('commerce_line_item', $line_item);

    // Build a price array for the express delivery fee.
    $express_price = array(
      'amount' => 1500,
      'currency_code' => $line_item_wrapper->commerce_unit_price->currency_code->value(), //'UAH',
      'data' => array(),
    );

    // Add the express upcharge to the line item unit price.
    $line_item_wrapper->commerce_unit_price->amount = $line_item_wrapper->commerce_unit_price->amount->value() + 1500;

    // Add the express delivery fee component to the unit price.
    $line_item_wrapper->commerce_unit_price->data = commerce_price_component_add(
      $line_item_wrapper->commerce_unit_price->value(),
      'example_shipping_service_express',
      $express_price,
      TRUE,
      FALSE
    );
  }
}

/**
 * Implements hook_commerce_price_component_type_info().
 */
function zp_commerce_commerce_price_component_type_info() {
  return array(
    'example_shipping_service_express' => array(
      //'title' => t('Express delivery'),
      'title' => t('Быстраяяяя доставка'),
      'weight' => 50,
    ),
  );
}

<?php
// Русский...

use Drupal\krumong as k;



/**
 * @file
 * Defines ZP Commerce methods.
 */

/**
 * Implements hook_menu().
 */
function zp_commerce_menu() {
  
  $items['node/%node/product_entity'] = array(
    'title' => 'Product entity',
    'description' => t('Go to the product Entity, connected to this product Display.'),
    'page callback' => 'zp_commerce_goToProductEditPage',
    'page arguments' => array(1),
    'access callback' => 'zp_commerce_access_productEntity',
    'access arguments' => array(1), //array('administer taxonomy'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 50,
  );
  
  $items['admin/commerce/products/%/display'] = array(
    'title' => 'Product display',
    'description' => t('Go to the product Display, connected to this product Entity.'),
    'page callback' => 'zp_commerce_goToDisplayProductEditPage',
    'page arguments' => array(3),
    //'access callback' => 'zp_commerce_access_productEntity',
    'access arguments' => array('access content'), //array('administer taxonomy'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 50,
  );
  
  return $items;
}


/**
 * Implements hook_form_alter().
 *
 * @param array &$form
 *   Array with declared form.
 *
 * @param array &$form_state
 *   Array with current form state.
 *
 * @param string $form_id
 *   Form ID.
 *
 * @return void
 *   Return nothing.
 */
function zp_commerce_form_alter(&$form, &$form_state, $form_id) {

  
//  dpm($form_id); dpm($form);
//  dpm($form_state);
  // $conf['locale_custom_strings_en']['old string'] = 'new string'
  
  //Hack quantity form in each view to accept fractional quantities
  // if the product type allows it.
  // Partly based on module commerce_decimal_quantities.
  // Other parts of this functionality are located in functions
  // zp_commerce_decimal_quantities_update_views_edit_quantity, zp_commerce_form_commerce_cart_add_to_cart_form_alter
  if (isset($form['edit_quantity'])) {
    zp_commerce_update_views_edit_quantity($form, $form_state);
  }
  
  
  
  
  switch ($form_id) {
    
    
    
    
    case 'search_api_ranges_block_slider_view_form_price':
      
      http://www.webwash.net/tutorials/using-search-api-ranges-module-drupal-7

      //dpm($form_id); dpm($form);
      //dpm($form_state);
      
      $form['submit']['#type'] = 'hidden';
      $form['text-range']['#markup'] = '<p class="text-range">Среди уже выбранных, показать только товары в диапазоне цен:</p>';
      $form['range-from']['#suffix'] = '<div>' . $form_state['build_info']['args'][0]['suffix'] . '</div>';
      $form['range-to']['#suffix'] = '<div>' . $form_state['build_info']['args'][0]['suffix'] . '</div><div class="descr">Сбросить этот фильтр можно ниже, в блоке "Сбросить фильтры"</div>';
      $form['range-from']['#title'] = 'От'; $form['range-to']['#title'] = 'До';
      
      break;
    
    
    
    
    
    
    case 'views_form_commerce_cart_form_default':
      
      //dpm($form);
      
      /*
      
        case 'views_form_commerce_cart_form_default':
    case 'commerce_checkout_form_checkout':
      global $user;
      $disabled = TRUE;
      // Load the order and loop through to differed products.
      $order = commerce_cart_order_load($user->uid);
      foreach($order->commerce_line_items['und'] as $line_item_id) {
        if($line_item = commerce_line_item_load($line_item_id['line_item_id'])) {
          if (!empty($line_item->commerce_product['und'][0]['product_id'])) {
            $product = commerce_product_load($line_item->commerce_product['und'][0]['product_id']);       
            // Actual check (Business Logic)
            if ($product->type == 'my_custom_product_type') {
              $disabled = FALSE;              
            }        
          }
        }
      }      
      if($disabled) {
        // Setting a message to make sure visitors understand what is going on.
        drupal_set_message(t('You need to add ... before continuing.'), 'warning');
        if ($form_id == 'views_form_commerce_cart_form_default') {
          $form['actions']['checkout']['#disabled'] = TRUE;
        }
        if ($form_id == 'commerce_checkout_form_checkout') {
          $form['buttons']['continue']['#disabled'] = TRUE;
        }       
      }
      
      */
      
      
      
      // Deny checkout for those who have no right for it!

      // Define current cart shop zp_id.
      global $user;
      //$current_cart_are_not_user_favorite = FALSE;
      $deny_checkout_message = FALSE;
      
      
      $order = commerce_cart_order_load($user->uid);
      
      //krumong()->jMessage($order);
      //dpmk('$order in cart');
      //dpmk($order);
      //k\dpm('$order in cart');
      //krumong('main')->kPrint('$order in cart');
      //k\dpm($order);
      
      //krumong('main')->kPrint($order);
      //dpmkj($order);
      
      
      
      dpm('1: ' . $order->field_u_order_shop_zp_id['und'][0]['value']);
      $current_cart_shop_data = zp_commerce_getShopData($order->field_u_order_shop_zp_id['und'][0]['value']);
      //dpm('$current_cart_shop_data');
      //dpm($current_cart_shop_data);
      //$deny_addtocart_message = 'There are already products of other shop ' .  $current_cart_shop_data['title'] . ' (' . $current_cart_shop_data['extra_data']['address'] . ') in the cart cart! You have to remove all products of that shop from the cart and after that add products of the current shop.';
      
      $form['current_shop'] = array(
        '#markup' => '<div class="current-shop-link">' . l($current_cart_shop_data['title'], 'node/' . $current_cart_shop_data['nid']) . ' (' . $current_cart_shop_data['extra_data']['address'] . ')</div>',
      );
      
      if ($order->uid) {
        $current_user_data = zp_commerce_getUserData($order->uid);
        //dpm('$current_user_data');
        //dpm($current_user_data);
        
        if (!in_array($order->field_u_order_shop_zp_id['und'][0]['value'], $current_user_data['favorite_shops'])) {
          // Just in case, find out if the user has access to all city's shops
          $current_cart_city_zp_id = drupal_substr($order->field_u_order_shop_zp_id['und'][0]['value'], 0, 1);
          if (!in_array($current_cart_city_zp_id, $current_user_data['favorite_shops'])) {
            $deny_checkout_message = 'Sorry, you cannot buy products from the shop ' .  $current_cart_shop_data['title'] . ' (' . $current_cart_shop_data['extra_data']['address'] . '), (perhapse because its not in your city, or for some other reason). Please contact administration if you are not agree.';
            //$current_cart_are_not_user_favorite = TRUE;
          }
        }
      }
      else {
        //dpm('Anonimous user');
        if (in_array('checkout_denied_for_anonimous', $current_cart_shop_data['zp_access'])) {
          $deny_checkout_message = 'Sorry, you cannot buy products from the shop ' .  $current_cart_shop_data['title'] . ' (' . $current_cart_shop_data['extra_data']['address'] 
                  . ') as anonimous. Please ' 
                  //. l(t('Login/Register'), 'ajax_register/login/nojs', array('html' => TRUE, 'attributes' => array('rel' => 'nofollow', 'class' => array('zp-login', 'ctools-use-modal', 'ctools-modal-ctools-ajax-register-style'), 'title' => t('Login')))) 
                  . '<a id="click-to-login" href="#">Login/Register</a>' 
                  . ' first.';
        }
      }
      //$form['actions']['checkout']['#disabled'] = TRUE;
      
      
      if ($deny_checkout_message) {
        
        $form['deny_popup_colorbox'] = array(
            '#markup' => '
            <div style="display: none;">
                <div id="deny-message-cb"> 
                  <div class="message">' . $deny_checkout_message . '</div>
                  <div id="no">Cancel</div>
                </div>
              </div>  
            ',
        );
        drupal_add_js('sites/all/libraries/jquery.plugins/colorbox/colorbox/jquery.colorbox.js');
        drupal_add_css('sites/all/libraries/jquery.plugins/colorbox/example1/colorbox.css', array('preprocess' => FALSE)); // array('group' => CSS_THEME, 'preprocess' => FALSE)

        // Popup window js.
        $path_to_custom_js = drupal_get_path('module', 'zp_commerce') . '/js/';
        drupal_add_js($path_to_custom_js . 'zp_deny_message_cb.js');
                  
                  
        $form['actions']['checkout'] = array(
          //'#markup' => '<div class="deny-checkout"><a href="#">' . t('Login to checkout') . '</a></div>',
          '#markup' => '<div class="deny-message"><a href="#">' . t('Login to checkout') . '</a></div>',
          
          //'#markup' => '<div class="deny-checkout">' . l(t('Login'), 'ajax_register/login/nojs', array('html' => TRUE, 'attributes' => array('rel' => 'nofollow', 'class' => array('zp-login', 'ctools-use-modal', 'ctools-modal-ctools-ajax-register-style'), 'title' => t('Login')))) . '</div>',
          ////'#markup' => l(t('Login'), 'ajax_register/login/nojs', array('html' => TRUE, 'attributes' => array('rel' => 'nofollow', 'class' => array('zp-login', 'ctools-use-modal', 'ctools-modal-ctools-ajax-register-style'), 'title' => t('Login')))),
            
            
          //'#weight' => 50,
        );
        
        dpm('Deny message: ' . $deny_checkout_message);
//        drupal_add_js( array ("zp_commerce" => array('deny_checkout_message' => $deny_checkout_message)), 'setting');
//        $path_to_custom_js = drupal_get_path('module', 'zp_commerce') . '/js/';
//        drupal_add_js($path_to_custom_js . 'zp_deny_checkout_message.js');
        
        //$form['actions']['checkout']['#disabled'] = TRUE;
        // Prevent submission. Just in case.
        // Unset all handlers.
        $form['actions']['checkout']['#validate'] = array();
        $form['actions']['checkout']['#submit'] = array();
        $form['#validate'] = array();
        $form['#submit'] = array();
      }
      else {
        //$form['actions']['checkout']['#submit'][] = 'zp_commerce_formCart_submit';
        //$form['#validate'][] = 'zp_commerce_formCart_validate';
      }

      break;
  }
}

 
/**
 * Validation function for the Cart form.
 *
 */
function zp_commerce_formCart_validate($form, &$form_state) {
  dpm('caaaaaaaaaaaaart validate');
  ////form_set_error('', t('Sorry, you have to log in to finish the purchase.'));
}


/**
 * Submit function for the Cart form.
 *
 */
function zp_commerce_formCart_submit($form, &$form_state) {
  dpm('in caaaaaaaaaaaaart submit');
//  drupal_set_message('++++++++++This was run after the cart form was submitted, before the checkout page was rendered.');
}


















// -----------------------------------------------------------------------------------------------------
// Hide prices or deny add to cart for users who doesn't have acces to it.
// Also add quantity measure to quantity
// and in some funtions allow decimal quantity for products with not empty and containing not шт/item 
//---------------------


/**
 * Get shops data like title, address, access settings, etc.
 */
function zp_commerce_getShopData($zp_id) {
  
  //dpm(debug_backtrace());
  
  $query = db_select('field_data_field_zp_id', 'zpid');
  $query->condition('zpid.field_zp_id_value', $zp_id);
  //$query->fields('zpid', array('entity_id'));
  $query->leftJoin('node', 'n', "n.nid = zpid.entity_id");
  $query->fields('n', array('title', 'nid'));
  $query->leftJoin('field_data_field_extra_data', 'd', 'd.entity_id = zpid.entity_id');
  //$query->fields('d', array('field_extra_data_value'));
  $query->addField('d', 'field_extra_data_value', 'extra_data');
  $shop = $query->execute()->fetchAssoc();

  
  $shop['extra_data'] = unserialize($shop['extra_data']);
  //dpm('$zp_id = ' . $zp_id);
  //dpm($shop);
  if ($zp_id == 'z0') {
    //dpm(debug_backtrace());
  }
    
  $query = db_select('field_data_field_zp_access', 'a');
  $query->condition('a.entity_id', $shop['nid']);
  $query->addField('a', 'field_zp_access_value', 'zp_access');
  $zp_access = $query->execute()->fetchAllAssoc('zp_access');
  
  $shop['zp_access'] = !empty($zp_access) ? array_keys($zp_access) : array();
  $shop['zp_id'] = $zp_id;
  
  return $shop;
}


/**
 * Get user data like favorite shoprs, etc.
 */
function zp_commerce_getUserData($uid) {
  
  $user = user_load($uid);
  $user_data = array();
  
  // Get user's favorite shops.
  foreach ($user->field_favorite_shops['und'] as $value) {
    $user_data['favorite_shops'][] = $value['value'];
  }
  
  return $user_data;
}


/**
 * Implementation of hook_form_FORMID_alter().
 * 
 * Deny add to cart for products if a user doesn't have acces to it.
 */
function zp_commerce_form_commerce_cart_add_to_cart_form_alter(&$form, &$form_state) {
  
  if (empty($form['product_id'])) {
    // Seems a product is disabled, so this Add to cart form is empty.
    // So we skip it.
    $form['submit'] = array(
      '#markup' => '<div class="deny-message">' . t('Товара нет в наличии') . '</div>',
      '#weight' => 50,
    );
    // Just in case, define own stubs instead of any other functions.
    $form['#validate'] = array(); //'zp_commerce_cart_add_to_cart_form_validate';
    $form['#submit'] = array(); //'zp_commerce_cart_add_to_cart_form_submit';
    
    return;
  }
  
  //dpm($form);
  //dpm($form_state);
  
  // Allow decimal only for non empty and non items/шт. qmeasure for each specified product.
  // 
  // Hack the Add to cart form to accept fractional quantities if the product type allows it.
  // Partly bAsed on module commerce_decimal_quantities.
  // Other parts of this functionality are located in functions:
  // zp_commerce_form_alter, zp_commerce_decimal_quantities_update_views_edit_quantity, 
  if (!empty($form_state['default_product']->field_qmeasure['und'][0]['value'])) {
    //dpm($form_state['default_product']);
    $field_qmeasure = $form_state['default_product']->field_qmeasure['und'][0]['value'];
  }
  else {
    $field_qmeasure = zp_misc_fieldRead_valueById_single('qmeasure', $form['product_id']['#value'], 'commerce_product', 'product');
  }
  
  if (!$field_qmeasure) {
    $field_qmeasure = 'items';
  }
  //dpm($form);
  //dpm($field_qmeasure);
  // Set quantity measure suffix mark (items, kg, g, etc).
  $form['quantity']['#suffix'] = '<div class="qmeasure">' . $field_qmeasure . '</div>';
  
  if ($field_qmeasure && strpos($field_qmeasure, 'шт') === FALSE && strpos($field_qmeasure, 'item') === FALSE) {
    $form['quantity']['#datatype'] = 'decimal';
  }
  
  
    
  
  //dpm('$form');
  //dpm($form);
  
  global $current_page_products_shop_zp_id, $current_cart_shop_zp_id, $addtocart_access_processed, $deny_addtocart_message,
          $current_cart_shop_data, $current_page_products_shop_data, $current_user_data, $current_page_products_are_not_user_favorite;
  
  //dpm('$addtocart_access_processed = '. $addtocart_access_processed);
  
  if (!$addtocart_access_processed) {
     //dpm('2---$addtocart_access_processed = '. $addtocart_access_processed);
    // Get access based on the first product on the page.
    $addtocart_access_processed = TRUE;
    
    // Define current products shop zp_id.
    $current_page_products_shop_zp_id = drupal_substr($form['line_item_fields']['#entity']->line_item_label, 0, 3);

  
    // Define current cart shop zp_id.
    global $user;
    if ($order = commerce_cart_order_load($user->uid)) {
      //dpm($order);
      if (!$current_cart_shop_zp_id = @$order->field_u_order_shop_zp_id['und'][0]['value']) {
        
        if (!empty($order->commerce_line_items['und'])) {
          $first_cart_product = commerce_line_item_load($order->commerce_line_items['und'][0]['line_item_id']);
          //dpm('$first_cart_product');
          //dpm($first_cart_product);
          $current_cart_shop_zp_id = $order->field_u_order_shop_zp_id['und'][0]['value'] = drupal_substr($first_cart_product->line_item_label, 0, 3);
          // Update the order (cart).
          commerce_order_save($order);
        }
        elseif (!isset($order->field_u_order_shop_zp_id['und'][0]['value']) || $order->field_u_order_shop_zp_id['und'][0]['value'] != NULL) {
          // Reset current shop zp_id for the cart to NULL if it's not set or is set not to NULL.
          $current_cart_shop_zp_id = NULL;
          $order->field_u_order_shop_zp_id['und'][0]['value'] = NULL;
          commerce_order_save($order);
        }
      }
    }
    
  
  
    // Check if a current user can add this product to cart.
    
    // Define this variable not inside of condition ELSE below, 
    // because it will be used later in hook  function zp_commerce_entity_view_alter(&$build, $type) for prices visibility for current user.
    //dpm('2: ' . $current_page_products_shop_zp_id);
    $current_page_products_shop_data = zp_commerce_getShopData($current_page_products_shop_zp_id);
    
    if ($current_cart_shop_zp_id && $current_page_products_shop_zp_id != $current_cart_shop_zp_id) {
      // If in cart the same shop that on the current page products.
      //dpm('3: ' . $current_cart_shop_zp_id);
      $current_cart_shop_data = zp_commerce_getShopData($current_cart_shop_zp_id);
      $deny_addtocart_message = 'There are already products of other shop ' .  $current_cart_shop_data['title'] . ' (' . $current_cart_shop_data['extra_data']['address'] . ') in the cart cart! You have to remove all products of that shop from the cart and after that add products of the current shop.';
    }
    else {
      
      if (!$user->uid) {
        // Anonimous user.
        if (in_array('add_to_cart_denied_for_anonimous', $current_page_products_shop_data['zp_access']) || in_array('prices_invisible_for_anonimous', $current_page_products_shop_data['zp_access'])) {
          // Anonimous user is denied to add to cart from this shop.
          $deny_addtocart_message = 'К сожалению, анонимные пользователи не могут добавлять в корзину товары из магазина ' .  $current_page_products_shop_data['title'] . ' (' . $current_page_products_shop_data['extra_data']['address'] 
                  . ')! Вам необходимо авторизоваться ' 
                  . '<a id="click-to-login" href="#">login/register</a>'
                  . ' сначала.';
        }
      }
      else {
        // Authorized user.
        $current_user_data = zp_commerce_getUserData($user->uid);
        dpm('$current_cart_shop_zp_id: ' . $current_page_products_shop_zp_id);
        
        //dpm('$current_user_data');
        ////dpm($current_user_data);
        
        if (!in_array($current_page_products_shop_zp_id, $current_user_data['favorite_shops'])) {
          // Just in case, find out if the user has access to all city's shops
          $current_page_products_city_zp_id = drupal_substr($form['line_item_fields']['#entity']->line_item_label, 0, 1);
          if (!in_array($current_page_products_city_zp_id, $current_user_data['favorite_shops'])) {
            $deny_addtocart_message = 'К сожалению, Вы не можете покупать товары в магазине  ' .  $current_page_products_shop_data['title'] . ' (' . $current_page_products_shop_data['extra_data']['address'] . '), (perhapse because its not in your city, or for some other reason). Please contact administration if you are not agree.';
            $current_page_products_are_not_user_favorite = TRUE;
          }
        }
      } // End of else of if (!$order->uid) {
    } // End of else of if ($current_cart_shop_zp_id && $current_page_products_shop_zp_id != $current_cart_shop_zp_id) {
    
     
    // Add js handler for the denial popup message.
    if ($deny_addtocart_message) {
      dpm('Deny message: ' . $deny_addtocart_message);
//      drupal_add_js( array ("zp_commerce" => array('deny_addtocart_message' => $deny_addtocart_message)), 'setting');
//      $path_to_custom_js = drupal_get_path('module', 'zp_commerce') . '/js/';
//      drupal_add_js($path_to_custom_js . 'zp_deny_addtocart_message.js');
      
      
      
        $form['deny_popup_colorbox'] = array(
            '#markup' => '
            <div style="display: none;">
                <div id="deny-message-cb"> 
                  <div class="message">' . $deny_addtocart_message . '</div>
                  <div id="no">Cancel</div>
                </div>
              </div>  
            ',
        );
        drupal_add_js('sites/all/libraries/jquery.plugins/colorbox/colorbox/jquery.colorbox.js');
        drupal_add_css('sites/all/libraries/jquery.plugins/colorbox/example1/colorbox.css', array('preprocess' => FALSE)); // array('group' => CSS_THEME, 'preprocess' => FALSE)

        // Popup window js.
        $path_to_custom_js = drupal_get_path('module', 'zp_commerce') . '/js/';
        drupal_add_js($path_to_custom_js . 'zp_deny_message_cb.js');

        
        
        
    }
  }
  
  
  if ($deny_addtocart_message) {
    $form['submit'] = array(
      '#markup' => '<div class="deny-message"><a href="#">' . t('Add to cart') . '</a></div>',
      '#weight' => 50,
    );
    // Unset any submit and validate functions.
    //$form['#submit'] = array();
    //$form['#validate'] = array();
    // Just in case, define own stubs instead of any other functions.
    $form['#validate'] = array(); //'zp_commerce_cart_add_to_cart_form_validate';
    $form['#submit'] = array(); //'zp_commerce_cart_add_to_cart_form_submit';
  }
  else {
    $form['#validate'][] = 'zp_commerce_cart_add_to_cart_form_validate';
    $form['#submit'][] = 'zp_commerce_cart_add_to_cart_form_submit';
  }
  
}


/**
  * Custom add_to_cart_form validation function.
  */
function zp_commerce_cart_add_to_cart_form_validate($form, &$form_state) {
  dpm('in add to cart vaidate');
  //dpm($form_state['values']);
  // Custom business logic here:
  //if (...) 
//  {
//    form_set_error('submit', t('This is the error that will be shown to the user.'));
//  }
}


/**
  * Custom add_to_cart_form validation function.
  */
function zp_commerce_cart_add_to_cart_form_submit($form, &$form_state) {
  //dpm('in add to cart submit');
  
  // Set the current shop zp_id for the current cart, if it's not yet set.
//  global $current_page_products_shop_zp_id, $current_cart_shop_zp_id;
//  if (!$current_cart_shop_zp_id) {
//    global $user;
//    $order = commerce_cart_order_load($user->uid);
//    dpm($order);
//    $order->field_u_order_shop_zp_id['und'][0]['value'] = $current_page_products_shop_zp_id;
//    commerce_order_save($order);
//  }
  // Custom business logic here:
  //if (...) 
//  {
//    form_set_error('submit', t('This is the error that will be shown to the user.'));
//  }
}


/**
 * Implements hook_entity_view_alter().
 * 
 * Using for hiding prices from users who don't have permission to see it, for example, anonimous or who don't have the product's shop in his favorites.
 * 
 */
function zp_commerce_entity_view_alter(&$build, $type) {
  //dpm($type);
  //dpm($build);
  
  if ($type == 'node' && $build['#bundle'] == 'product_a') {
    
      //$build['field_product'][0]['quantity']['#suffix'] = '<div>kg.</div>';
      
      // These global variables was defined a bit earlier in function zp_commerce_form_commerce_cart_add_to_cart_form_alter(&$form, &$form_state) {
      global $current_page_products_shop_data, $current_user_data, $current_page_products_are_not_user_favorite;

      if (is_array($current_page_products_shop_data['zp_access'])) {
          if (empty($current_user_data) && in_array('prices_invisible_for_anonimous', $current_page_products_shop_data['zp_access'])) {
            // Anonimous user.
            //dpm($build);
            //dpm('in product entity view alter, anonymous, type: ' . $type);
            $build['product:commerce_price']['#access']=FALSE;
          }
          elseif ($current_page_products_are_not_user_favorite && in_array('prices_invisible_for_authorized_not_favorite', $current_page_products_shop_data['zp_access'])) {
            // Authorized user.
            //dpm($build);
            //dpm('in product entity view alter, not favorite, type: ' . $type);
            $build['product:commerce_price']['#access']=FALSE;
          }
      } // End of if (!empty($current_page_products_shop_data['zp_access'])) {
  }
}


// Doesn't work hiding price...
/*
function zp_commerce_commerce_price_field_formatter_prepare_view($entity_type, $entities, $field, $instances, $langcode, $items, $displays) {
  //static $calculated_prices = array();

  dpm($entity_type);
  dpm($entities);
  dpm($field);
  dpm($instances);
  dpm($items);
  dpm($displays);
  $displays[6]['type'] == 'hidden';
  $instances[6]['display']['full']['type'] == 'hidden';
  $instances[6]['display']['default']['type'] == 'hidden';
  
  // If this is a single value purchase price field attached to a product...
  if ($entity_type == 'commerce_product' && $field['field_name'] == 'commerce_price' && $field['cardinality'] == 1) {
    // Prepare the items for each entity passed in.
    foreach ($entities as $product_id => $product) {
      // If this price should be calculated and hasn't been already...
      if (!empty($displays[$product_id]['settings']['calculation']) && 
        $displays[$product_id]['settings']['calculation'] == 'calculated_sell_price' && 
        empty($calculated_prices[$product_id][$field['field_name']])) {
        // Replace the data being displayed with data from a calculated price.
        $items[$product_id] = array(commerce_product_calculate_sell_price($product));

        // Keep track of which prices have already been calculated.
        $calculated_prices[$product_id][$field['field_name']] = TRUE;
      }
    }
  }
  
}
*/


/**
 * Implements hook_commerce_entity_access().
 * 
 * Disable editing all orders except the cart to enable editing custom line item editable field for all users. 
 * Used while set enabled permission to edit any own orders.
 */
function zp_commerce_commerce_entity_access($op, $entity, $account, $entity_type) {
//   dpm($op);
//   dpm($entity_type);
//  dpm($entity);
//  dpm($account);
  //return TRUE;
  //if ($entity_type == 'commerce_order' && $op == 'update') {
  if ($entity_type == 'commerce_order' 
          && $account->uid != 1 && @$entity->status != 'cart') {
    // Require administer orders permission to delete orders
    if (!user_access('administer commerce_order entities', $account)) {
      return FALSE;
    }
  }
}











// -----------------------------------------------------------------
// Corresponding links between product display and product entity

/**
 * Implements access function for products.
 */
function zp_commerce_access_productEntity($node) {
  global $user;
  return ($user->uid == 1 && $node->type == 'product_a') ? TRUE : FALSE;
}


//function zp_commerce_node_load($nid) {
//  dpm($nid);
//  //$node = node_load($nid);
//  return $nid;//$node;// ($node->type == 'product_a') ? $node : FALSE;
//}


/**
 * Goto product entity from display product page via local menu.
 */
function zp_commerce_goToProductEditPage($node) {
  drupal_goto('admin/commerce/products/' . $node->field_product[LANGUAGE_NONE][0]['product_id'], array('query' => array('destination' => ltrim(url('node/' . $node->nid), '/'))));
}


/**
 * Goto product display from entoty product page via local menu.
 */
function zp_commerce_goToDisplayProductEditPage($product_id) {
  
  //$nid = zp_commerce_get_referencing_node_id(commerce_product_load($product_id));
  $display_node_nid = zp_commerce_get_display_node_by_product_id($product_id); 
  
  //if (strpos($_SERVER['HTTP_REFERER'], 'destination=')) {
    drupal_goto('node/' . $display_node_nid);
//  }
//  else { 
//    drupal_goto('node/' . $display_node_nid, array('query' => array('destination' => ltrim(url('admin/commerce/products/' . $product_id), '/'))));
//  }
}


/**
 * Get display node id for a commerce product.
 * 
 * http://dropbucket.org/node/785
 * 
 * @param $product_id
 *  An integer value of the product id.
 * @param string $product_field_name
 *  Name of the commerce_product_reference field used to reference products from display node.
 * @return FALSE|node_id
 *  Returns FALSE if no results or display node id on success.
 */
function zp_commerce_get_display_node_by_product_id($product_id, $product_field_name = 'field_product') {
  $query = new EntityFieldQuery;
  $result = $query->entityCondition('entity_type', 'node', '=')
    ->propertyCondition('type', 'product_a')
    ->fieldCondition($product_field_name, 'product_id', $product_id, '=')
    ->range(0, 1)->execute();

  if (empty($result['node'])) {
    return FALSE;
  }
 
  return reset($result['node'])->nid;
}


/**
 * Get display node id for a commerce product. Another version.
 * 
 * http://www.drupalcommerce.org/questions/3176/how-get-node-id-product-display-using-product-id
 */
function zp_commerce_get_referencing_node_id($product) {
  // Itterate through all fields which refer to commerce products.
  foreach (commerce_info_fields('commerce_product_reference') as $field) {
    // Build query.
    $query = new EntityFieldQuery;
    $query->entityCondition('entity_type', 'node', '=')
      ->fieldCondition($field['field_name'], 'product_id', $product->product_id, '=')
      ->range(0, 1);

    if ($result = $query->execute()) {
      // Return node id.
      return array_shift(array_keys($result['node']));
    }
  }

  return false;
}

/**
 * Implements hook_menu_contextual_links_alter().
 * 
 * Add edit product entity for a product display node.
 */  
function zp_commerce_menu_contextual_links_alter(&$links, $router_item, $root_path) {
  // Add a link to all contextual links for nodes.
  /*
  if ($root_path == 'node/%') {
    $links['foo'] = array(
      'title' => t('Do fu'),
      'href' => 'foo/do',
      'localized_options' => array(
        'query' => array(
          'foo' => 'bar',
        ),
      ),
    );
  }
  */
  
  // Add a link to all contextual links for nodes of type product_display.
    if ($root_path == 'node/%' && $router_item['page_arguments'][0]->type == 'product_a' && !empty($router_item['page_arguments'][0]->field_product[LANGUAGE_NONE])) {

      // Loop through all products
      foreach ($router_item['page_arguments'][0]->field_product[LANGUAGE_NONE] as $element) {
        $product = commerce_product_load($element['product_id']);  

        // Add your contextual link
        $links['edit_prod_'.$element['product_id']] = array(
          'title' => t('Edit @sku', array('@sku' => $product->sku)),
          'href' => 'admin/commerce/products/'.$element['product_id'].'/edit',
          'localized_options' => array(
            'query' => array(
            'destination' => ltrim(request_uri(), '/'), //current_path(),
          ),
        ),
      );      
    }
  }  
}





// -----------------------------------------------------------------------
// Sidebar product filter by category block.

/**
 * Side bar product filter by category.
 */
function zp_commerce_buildSidebarFilter_form($form, &$form_state, $data) {
  
  
  $form['subgroups'] = array(
    '#type' => 'container',
    '#tree' => TRUE,
  );
  
  foreach ($data['subgroups_terms'] as $subgroup_term) {
    $form['subgroups'][$subgroup_term->tid] = array(
      '#type' => 'checkbox',
      '#title' => $subgroup_term->name,
      '#default_value' => !empty($data['tf'][$subgroup_term->tid]) ? TRUE : FALSE,
      //'#attributes' => array('id' => 'select_type',  'onChange' => "top.location.href='/node/add/" . "' + document.getElementById('select_type').options[document.getElementById('select_type').selectedIndex].value"),
        '#attributes' =>  array('class' =>array('filter_by_subgroup'), 'onClick' => array('javascript:this.form.submit();')),
    );
  }
    
    
//  $form['actions'] = array('#type' => 'actions');
//  $form['actions']['submit'] = array(
//    '#type' => 'submit',
//    '#value' => 'Submit',
//    //'#submit' => array('gv_misc_sendCapturedQuotesToProviders_form_submit'),
//    //'#base' => 'gv_misc_sendCapturedQuotesToProviders_form',
//    //'#disabled' => $class_submitted == 'all-submitted' ? TRUE : FALSE,
//  ); 
  
  return $form;
}


/**
 * Implements hook_form_validate().
 *
 * @return $form
 *   Return nothing.
 */
function zp_commerce_buildSidebarFilter_form_validate(&$form, &$form_state) {
  
  //drupal_set_message('In Validate!', 'warning');
  //dpm($form_state['values']);
  //dpm($form);
    
  //global $user;
  
  
//  if (!$form_state['values']['message']) {
//    form_set_error('message', 'You have to enter a Message, if don\'t want to just subscribe to newsletters');
//  }

  
  // a4s fix.
  // When a form doesn't have a submit button  (like autosubmitted form)
  // it won't get to the _submit function until i set this string below:
  $form_state['submitted'] = TRUE;
}


/**
 * Implements hook_form_submit().
 *
 * @return $form
 *   Return nothing.
 */
function zp_commerce_buildSidebarFilter_form_submit(&$form, &$form_state) {
 
  //dpm($form_state['values']);
  
  // Redirect back to the current page.
  // But befotr Put selected by user (in the sidebar) subgroups to the url params.
  $get = $_GET;
  unset($get['q'], $get['tf']);
  $tf = NULL;
  foreach ($form_state['values']['subgroups'] as $tid => $checked) {
    if ($checked) {
      $tf .= ($tf ? ';' : '') . $tid;
    }
  }
  if ($tf) {
    $get['tf'] = $tf;
  }

  drupal_goto($_GET['q'], array('query' => $get));
}







//- ----------------------------------------------------------------------
// IMPORT ZP OBJECTS: Depts, products, etc.



/**
 * Batch operation for batch 2 : load all nodes, 5 by five
 * After each group of 5 control is returned to the batch API for later
 * continuation.
 */
//function zp_commerce_importPriceList_batch_process($objects, &$context) {
function zp_commerce_importPriceList_batch_process($op, $priceRows, $file, $reverse_process, &$context) {  
  
  // Use the $context['sandbox'] at your convenience to store the
  // information needed to track progression between successive calls.
  if (empty($context['sandbox'])) {
    $context['sandbox'] = array();
    $context['sandbox']['progress'] = 0;
   
    // Save object count for the termination message.
    $context['sandbox']['max'] = count($priceRows);
   
    $file_path = zp_misc_getPathFromStreamUri($file->uri);
    $context['results']['reverse_process'] = $reverse_process;
    $context['results']['finished'] = FALSE;
    $context['results']['file_path'] = $file_path;
    $context['results']['fid'] = $file->fid;
    $context['results']['current_object_id'] = 0;
    $context['results']['last_not_empty_object_id'] = 0;
    $context['results']['op'] = $op;
    $context['results']['objects_source'] = $priceRows;
    $context['results']['processed'] = 0;
    $context['results']['processed_not_empty'] = 0;
    $context['results']['processed_by_action'] = array();
    $context['results']['processed_empty_row'] = 0;
    $context['results']['processed_empty_action'] = 0;
    
    $context['results']['processed_depts'] = 0;
    $context['results']['processed_products'] = 0;
    
    $context['results']['history'] = NULL;
            
    $context['results']['status'] = NULL;
    
    $context['results']['errors'] = NULL;
    
    $context['results']['zp_current_batch_id'] = $_GET['id'];
    $_SESSION['zp_current_batch_id'] = $context['results']['zp_current_batch_id'];
    
    // Set results row in the DB
    
    // If there is already results in the db, from either finished or unfinished batch, delete it before brand new processing.
    $query = db_select('zp_price_import_results', 'f');
    $query->fields('f', array('fid'))
          ->condition('fid', $file->fid);
    if ($result = $query->execute()->fetchField()) {
      db_delete('zp_price_import_results')
        ->condition('fid', $file->fid)
        ->execute();
    }


    db_insert('zp_price_import_results') 
      ->fields(array(
        'fid'=> $file->fid,
        'filename'=> $file_path,
        'op' => $op,  
        'timestamp'=> time(),                
        'uid' => $GLOBALS['user']->uid,
        'batch_id' => $context['results']['zp_current_batch_id'],  
        'batch_finished'=> 0,//FALSE,
        'status' => $op == 'test' ? 'Start checking...' : 'Start importing...',  
        'errors' => NULL,
        'rows_with_action' => NULL,
        'data' => serialize($context['results']),
      ))
      ->execute();
  }

  $current_object_id = $context['results']['current_object_id'];
  $row = $priceRows[$current_object_id];
  
  $result_messages = NULL;
  
  if (empty($row['Название']) || $row['Действие / результат'] == 'Action') {
          $current_object_result_message = $current_object_title = 'zp_id: ' . $row['zp_id'] . ', Empty row.';
          $context['results']['processed_empty_row']++;
  }
   elseif (empty($row['Действие / результат'])) {
          $current_object_result_message = $current_object_title = 'zp_id: ' . $row['zp_id'] . ($row['Тип записи'] == 'отдел' ? ' ----> ОТДЕЛ' : '') .', EMPTY ACTION for "' . $row['Название'] . '"';
          $context['results']['processed_empty_action']++;
          $context['results']['processed_not_empty']++;
  }
  else {
          // Process object.
          $context['results']['processed_not_empty']++;
          $context['results']['processed_by_action'][$row['Действие / результат']][$current_object_id] = $row['Название'];
          
          $current_object_title = 'zp_id: ' . $row['zp_id'] . ($row['Тип записи'] == 'отдел' ? ' ----> ОТДЕЛ' : '') . ', "' . $row['Название'] . '"';
          
          if (!$error_message = zp_commerce_processPriceList_row($op, $row, $result_messages)) {
            $current_object_result_message = 'Success: "' . $row['Действие / результат'] . '", ' . $current_object_title . ':';
          }
          else {
            $current_object_result_message = 'Error: ' . $current_object_title . ' 
        -> ' . $error_message;
            $context['results']['errors'][] = $current_object_result_message;
          }
  }
  
  if ($result_messages) {
    //dpm($result_messages);
    $result_messages = '---> ' . implode('
---> ', $result_messages) . '
';
  }
  
  if (!empty($row['Название'])) {
    $context['results']['last_not_empty_object_id'] = $current_object_id;
    $context['results']['last_not_empty_object_zp_id'] = $row['zp_id'];
    if ($row['Тип записи'] == 'отдел') {
      $context['results']['processed_depts']++;
    } 
    else {
      $context['results']['processed_products']++;
    }
  }
  
  // Store some results for post-processing in the 'finished' callback.
  // The contents of 'results' will be available as $results in the 'finished' 
  
  $context['results']['processed']++;
  //$context['results']['objects_processed'][] = $current_object_result_message;
  
  // Dynamic message block (current processing object and the history in textarea) under the progress bar.
  $message = '(' . $context['sandbox']['progress'] . ' out of ' . $context['sandbox']['max'] . ') ' . $current_object_result_message;
  
  $text_field = array(
    '#type' => 'textarea',
    '#title' => 'History',
    '#value' => $context['results']['history'],
  );

  $errors_count = count($context['results']['errors']);
  
  $context['message'] = $message . ' ' 
                      . render($text_field)
                      . '
Processed: ' . $context['results']['processed'] . '
<br><br>Empty rows: ' . $context['results']['processed_empty_row'] . '  
  
<br><br>Not empty: ' . $context['results']['processed_not_empty'] . '   
<br>Empty action rows: ' . $context['results']['processed_empty_action'] . '    
  
<br><br>Total depts: ' . $context['results']['processed_depts'] . '   
<br>Total products: ' . $context['results']['processed_products'] . '    
  
<br><br>New: ' . count(@$context['results']['processed_by_action']['new']) . '
<br>Delete: ' . count(@$context['results']['processed_by_action']['delete']) . '
<br>Change: ' . count(@$context['results']['processed_by_action']['change']) . '  
<br>Hide: ' . count(@$context['results']['processed_by_action']['hide']) . '

<br><br>Errors: ' . $errors_count . '<br><br>'
                      . l('Stop the batch', /*'zp/add_objects'*/ 'admin/content/import-price');

  $context['results']['history'] = $message . '
' . $result_messages . $context['results']['history']; 
  
  // We can stop batch and then continue it using stored id of batch.
  $_SESSION['zp_current_batch_' . $context['results']['zp_current_batch_id'] . '_results'] = $context['results'];
  
  // If no error, Inform the batch engine that we are not finished,
  // and provide an estimation of the completion level we reached.
  
//  if ($context['sandbox']['progress'] >= 2) {
//    // Stop processing because of the TEST!
//    $context['finished'] = 1;
//  }
//  else
    if ($error_message && $op != 'test') {
    // If $op == 'test' we don't stop processing and just collect all errors.

    // Stop processing because of the error!
    $context['finished'] = 1;
  }
  elseif ( ($context['sandbox']['progress'] + 1) != $context['sandbox']['max']) {
    if ( ($context['sandbox']['progress'] + 1) >= $context['sandbox']['max']) {
      $context['finished'] = 1;
    }
    else {
      $context['finished'] = ($context['sandbox']['progress'] + 1) / $context['sandbox']['max'];
    }
  }
  
  if ($context['finished'] < 1) {
    $context['results']['current_object_id']++;
  }
  else{
    // We don't need to know it anymore.
    unset($_SESSION['zp_current_batch_id'], $_SESSION['zp_current_batch_' . $context['results']['zp_current_batch_id'] . '_results']);
    $context['results']['finished'] = TRUE;
  }
  
  // Update progress information.
  $context['sandbox']['progress']++;
            
  if ($context['finished'] == 1 || $error_message) {
    
    
  
    if ($context['finished'] == 1 && !$error_message) {
      $status = ($op == 'test' ? 'Checked.' : 'Imported.');
      $context['results']['history'] = '
--->> Обработка УСПЕШНО завершена.
' . $context['results']['history'];
    }
    else {
      $status = ($op == 'test' ? 'Checking...' : 'Importing...');
      $context['results']['history'] = '
--->> Завершено С ОШИБКАМИ.
' . $context['results']['history'];
    }
    
    $errors_message = $errors_count ? ' Errors: ' .  $errors_count .  ' on ' . ($context['sandbox']['progress'] - 1) . ' out of ' . $context['sandbox']['max'] . '.' : '';
    
    $status = $status . $errors_message . ' Processed: ' . $context['results']['processed'] . '. Empty rows: ' . $context['results']['processed_empty_row'] . '. Not empty: ' . $context['results']['processed_not_empty'] . '. Empty action rows: ' . $context['results']['processed_empty_action'] . '. Total depts: ' . $context['results']['processed_depts'] . '. Total products: ' . $context['results']['processed_products'] . '. New: ' . count(@$context['results']['processed_by_action']['new']) . '. Delete: ' . count(@$context['results']['processed_by_action']['delete']) . '. Change: ' . count(@$context['results']['processed_by_action']['change']) . '. Hide: ' . count(@$context['results']['processed_by_action']['hide']);
    $context['results']['status'] = $status;
            
    // Set results row in the DB
    db_update('zp_price_import_results') 
      ->fields(array(
        'timestamp'=> time(),                
        'batch_id' => $context['results']['zp_current_batch_id'],
        'batch_finished'=> $context['finished'], // == 1 ? TRUE :  FALSE,
        'status' => $status,
        'errors' => $errors_count,
        'rows_with_action' => $context['results']['processed'] - ($context['results']['processed_empty_row'] + $context['results']['processed_empty_action']),
        'data' => serialize($context['results']),
      ))
      ->condition('fid', $file->fid)
      ->condition('batch_id', $context['results']['zp_current_batch_id'])      
      ->execute();
  }
  
  
  // Alert the next iteration.
  zp_misc_update_http_requests();
}


/**
 * Batch 'finished' callback.
 */
function zp_commerce_importPriceList_batch_finished($success, $results, $operations) {
  
  // Clear fields cache becasue many fields could have been changed.
  field_cache_clear();
  
  $title_result_message = 'Результаты операции "' . @$results['op'] . '", файл "' . @$results['file_path'] . '" ( fid: ' . @$results['fid'] . ')';
  krumong('devel')->dpm($title_result_message);
  
  $errors = $results['errors'] ? 'Done with ' . count(@$results['errors']) . ' error(s). ' : NULL;
  krumong('devel')->dpm('Статус выполненной операции: ' . $errors . @$results['status']);
  
  //dpm($results);
  
  if ($success) {
    drupal_set_message(t('---> @count объектов обработано за @requests HTTP запросов.', array('@count' => $results['processed'], '@requests' => zp_misc_get_http_requests())));

    if (!$errors) {
      drupal_set_message(t('------> OK! Прайс-лист успешно обработан. Последний обработанный объект "%final"', array('%final' => $results['objects_source'][$results['last_not_empty_object_id']]['Название'])));
    }
    else {
      drupal_set_message(t('-> Завершено С ОШИБКАМИ! Последний обработанный объект "%final"', array('%final' => $results['objects_source'][$results['last_not_empty_object_id']]['Название'])));  
    }
    
  }
  else {
    // An error occurred.
    // $operations contains the operations that remained unprocessed.
    $error_operation = reset($operations);
    //drupal_set_message(t('An error occurred while processing @operation with arguments : @args', array('@operation' => $error_operation[0], '@args' => print_r($error_operation[0], TRUE))));
    drupal_set_message(t('Возникли ошибки время выполнения операции "@operation" с аргументами "@args".', array('@operation' => $error_operation[0], '@args' => print_r($error_operation[0], TRUE))));
  }
  
  krumong('devel')->dpm($results);
  
  $history_text = array(
    '#type' => 'textarea',
    '#value' => $results['history'],
  );
  drupal_set_message('История операций, выполненных во время обработки прайс-листа:');
  drupal_set_message(render($history_text));
  
  if (@$results['errors']) {
    krumong('devel')->dpm('Ошибки, возникшие при обработке прайс-листа:');
    krumong('devel')->dpm($results['errors']);
  }
  
  //krumong()->kPrint($results);
  //die;  // optionally, you can stop the request right here.
  
  // Clear caches, etc after adding new ZP Catalog objects.
  ////menu_cache_clear_all();
  //drupal_goto('<front>'); 
}





/**
 * Builds an array with objects to add to ZP Catalog.
 */
function zp_commerce_processPriceList_mapPriceRowToCatalogObject($row, &$error) {
  
  $error = NULL;
  
  $must_be_filled = array('Название', 'Тип записи', 'Магазин', 'Отдел', 'Товар / родительский отдел');
  
  
  $product_fields_only = array(
      'Кол-во', 'Производитель/Поставщик/Бренд', 
      'Категория 1', 'Категория 2',
      'Вес/объём, мера', 'Вес/объём, значение', 
      'Продажная единица (шт, кг и т.д.)', 
      'Цена (за продажную единицу)', 
      'Штрихкод', 'Артикул магазина', 'Артикул производителя', 'Артикул поставщика', 
      'Срок хранения', 
      'Другие атрибуты товара');
  
  $not_filled_fields = NULL;
  
  foreach ($must_be_filled as $field) {
    if (empty($row[$field])) {
      $not_filled_fields[] = $field;
    }
  }
  if (!empty($not_filled_fields)) {
    $error = 'z' . $row['Магазин'] . $row['Отдел'] . $row['Товар / родительский отдел'] . ' -->' . $row['Название'] . ': Не задано одно или несколько из обязательных полей -> ' . implode(', ', $not_filled_fields);
    return NULL;
  }
  
  //dpm($row);
  
  
  if ($row['Действие / результат'] == 'hide') {
    //$row['Действие / результат'] = 'change';
    $row['Статус элемента'] = '###0';
    $show_hide_action = TRUE;
  }
  elseif ($row['Действие / результат'] == 'show' || $row['Действие / результат'] == 'unhide') {
    //$row['Действие / результат'] = 'change';
    // kind of empty field, mut means not hidden, normal state
    $row['Статус элемента'] = '###1';
    $show_hide_action = TRUE;
  }
  else {
    $show_hide_action = FALSE;
  }
  
  // By default, aall elements are visible, if not set any different...
  if (!array_key_exists('Статус элемента', $row) || $row['Статус элемента'] === '') {
    $row['Статус элемента'] = 1;
  }
  elseif ($row['Статус элемента'] === 'hidden') {
    $row['Статус элемента'] = 0;
  }
  
  // Correct the decimal point, just in case.
  $row['Цена (за продажную единицу)'] = str_replace(',', '.', $row['Цена (за продажную единицу)']);
  
  
  $catalogObject = array();
  
  $map = array(
      'Маркеры группы и примечания' => NULL,
      'Ряд и примечания' => NULL,
      'Магазин' => NULL,
      'Отдел' => NULL,
      'Товар / родительский отдел' => NULL,
      'Finish' => NULL,
      //'Тип записи' => NULL,
  );
  
  foreach ($row as $key => $value) {
    
    // Remove empty fields.
    if (!$value) {
      continue;
    }
    
    if (array_key_exists($key, $map)) {
      if (!$map[$key]) {
        // Remove a field that is NULL in the map array.
        continue;
      }
      else {
        // Change a name of a field (map it)
        $catalogObject[$map[$key]] = $value;
      }
    }
    else {
      $catalogObject[$key] = $value;
    }
  } // End of foreach ($row as $key => $value) {
  
  if ($row['Тип записи'] == 'отдел') {
    $catalogObject['type'] = 'department';
    
    $catalogObject['parent_zp_id'] = 'z' . $row['Магазин'] . $row['Товар / родительский отдел'];
    $catalogObject['zp_id'] = 'z' . $row['Магазин'] . $row['Отдел'];
  }
  elseif (strpos($row['Тип записи'], 'товар') !== FALSE) {
    $catalogObject['product_display'] = 'product_a';
    $catalogObject['product_type'] = 'product';
    $catalogObject['Валюта'] = (int) $row['Магазин'] > 2 ? 'RUB' : 'UAH';
    
    $catalogObject['parent_zp_id'] = 'z' . $row['Магазин'] . $row['Отдел'];
    $catalogObject['zp_id'] = 'z' . $row['Магазин'] . $row['Отдел'] . $row['Товар / родительский отдел'];
  }
  else {
    $error = 'Неправильный тип объекта';
    return NULL;
  }
  
  
          
  $catalogObject['Описание'] = $row['Описание внешнее'] ? $row['Описание внешнее'] : $row['Описание локальное'];
  $catalogObject['Описание краткое'] = !empty($row['Описание краткое']) ? $row['Описание краткое'] : $catalogObject['Описание'];
  
  
  // Strip history and cnahge ### markers and leave only the last value (###123###543 -> 123, ###123 -> 123)
  $fields_to_change = array();
  foreach ($catalogObject as $key => $value) {
    
    if ($value && in_array($key, $product_fields_only) && $row['Тип записи'] == 'отдел') {
      // Dept can not have filled/changed fields that only products have.
      $error = 'Для отдела задано поле "' . $key . '", которое может содержать только товар';
      return NULL;
    }
    
    if ($value == '###') {
      // A field should be changed and set to empty.
      $catalogObject[$key] = '';
      $fields_to_change[] = $key;
    }
    elseif (strpos($value, '###') !== FALSE) {
      $history = explode('###', $value);
      if (!$history[0]) {
        // ###123###543, so it's a field to be changed (though with a history)...
        $catalogObject[$key] = $history[1];
        $fields_to_change[] = $key;
      }
      else {
        // 123###543, so it's a field just with a history, not to be changed...
        $catalogObject[$key] = $history[0];
      }
    }
    
    
  }
  
  $catalogObject['fields_to_change'] = $fields_to_change;
  
  // Create shorten summary if it's not defined.
  if (empty($row['Описание краткое']) && !empty($catalogObject['Описание'])) {
    $summary_length = 150;
    $summary = drupal_substr($catalogObject['Описание'], 0, $summary_length);
    $last_pos = strrpos($summary, ' ');
    $catalogObject['Описание краткое'] = substr_replace($summary, '...', $last_pos);
  }
  
  if (!$catalogObject['Описание']) {
    unset($catalogObject['Описание']);
  }
  if (!$catalogObject['Описание краткое']) {
    unset($catalogObject['Описание краткое']);
  }
  
  if (empty($catalogObject['Вес элемента в группе'])) {
    $catalogObject['Вес элемента в группе'] = 0;
  }
  
  // We need to update all three category fields if at least one of them has to be updated.
  $categories_fields = array('Категория 1', 'Категория 2', 'Род.Отдел/Категория 3');
  $intersected = array_intersect($catalogObject['fields_to_change'], $categories_fields);
  if (!empty($intersected)) {
    foreach ($categories_fields as $categories_field) {
      if (!in_array($categories_field,  $catalogObject['fields_to_change'])) {
        $catalogObject['fields_to_change'][] = $categories_field;
      }
    }
  }
  
  
  // If 'Действие / результат' was to hide/unhide, let's remain only this one change, and remove other (even marked with ###) fields changing.
  if ($show_hide_action) {
    $catalogObject['fields_to_change'] = array('Статус элемента');
  }
  
  return $catalogObject;
  
  
 /*
   
  $objects[] = array(
    'product_display' => 'product_a',
    'product_type' => 'product',
    'status' => TRUE,
    'price' => 99.09,
    'currency' => 'UAH',
    'title' => 'Вино 1',
    'description' => 'Описание продукта Вино 1', 
    'summary' => 'Краткое описание продукта Вино 1',
    'zp_id' => 'z010',
    'parent_zp_id' => 'z007',
    'subgroup' => 'подгруппа Вино',
    'weight' => 1,
  );
  
  
  
  
  
  $objects[] = array(
    'type' => 'department',
    'title' => 'Напитки',
    'description' => 'Описание отдела Напитки', 
    'summary' => 'Краткое описание отдела Напитки',
    'zp_id' => 'z003',
    'parent_zp_id' => 'z001',
    'weight' => 5,
  );
  
  $objects[] = array(
    'type' => 'department',
    'title' => 'Алкогольные напитки',
    'description' => 'Описание отдела Алкогольные напитки', 
    'summary' => 'Краткое описание отдела Алкогольные напитки',
    'zp_id' => 'z004',
    'parent_zp_id' => 'z003',
    'weight' => 5,
  );
  
  $objects[] = array(
    'type' => 'department',
    'title' => 'Безалкогольные напитки',
    'description' => 'Описание отдела Безлкогольные напитки', 
    'summary' => 'Краткое описание отдела Безалкогольные напитки',
    'zp_id' => 'z005',
    'parent_zp_id' => 'z003',
    'weight' => 6,
  );
    
  $objects[] = array(
    'type' => 'subgroup',
    'title' => 'подгруппа Вино',
    'description' => 'Описание подгруппы Вино', 
    //'zp_id' => 'z007',
    'parent_zp_id' => 'z004',
    'weight' => 2,
  );  

  $objects[] = array(
    'type' => 'subgroup',
    'title' => 'подгруппа Бормотуха',
    'description' => 'Описание подгруппы Бормотуха', 
    //'zp_id' => 'z007',
    'parent_zp_id' => 'z004',
    'weight' => 1,
  );
  
  $objects[] = array(
    'product_display' => 'product_a',
    'product_type' => 'product',
    'status' => TRUE,
    'price' => 99.09,
    'currency' => 'UAH',
    'title' => 'Вино 1',
    'description' => 'Описание продукта Вино 1', 
    'summary' => 'Краткое описание продукта Вино 1',
    'zp_id' => 'z010',
    'parent_zp_id' => 'z007',
    'subgroup' => 'подгруппа Вино',
    'weight' => 1,
  );
  
  $objects[] = array(
    'product_display' => 'product_a',
    'product_type' => 'product',
    'status' => TRUE,
    'price' => 99.09,
    'currency' => 'UAH',
    'title' => 'Вино 2',
    'description' => 'Описание продукта Вино 2', 
    'summary' => 'Краткое описание продукта Вино 2',
    'zp_id' => 'z009',
    'parent_zp_id' => 'z007',
    'subgroup' => 'подгруппа Вино',
    'weight' => 3,
  );
  
  $objects[] = array(
    'product_display' => 'product_a',
    'product_type' => 'product',
    'status' => TRUE,
    'price' => 99.09,
    'currency' => 'UAH',
    'title' => 'Вино 3',
    'description' => 'Описание продукта Вино 3', 
    'summary' => 'Краткое описание продукта Вино 3',
    'zp_id' => 'z008',
    'parent_zp_id' => 'z004',
    'subgroup' => 'подгруппа Вино',
    'weight' => 2,
  );
  
  
  $objects[] = array(
    'product_display' => 'product_a',
    'product_type' => 'product',
    'status' => TRUE,
    'price' => 99.09,
    'currency' => 'UAH',
    'title' => 'Бормотуха 1',
    'description' => 'Описание продукта Бормотуха 1', 
    'summary' => 'Краткое описание продукта Бормотуха 1',
    'zp_id' => 'z011',
    'parent_zp_id' => 'z004',
    'subgroup' => 'подгруппа Бормотуха',
    'weight' => 2,
  );
  
//  for($i = 1; $i< 1000; $i++) {
//    $objects[] = array(
//      'product_display' => 'product_a',
//      'product_type' => 'product',
//      'status' => TRUE,
//      'price' => 99.09,
//      'currency' => 'UAH',
//      'title' => 'Бормотуха ' . ($i+3),
//      'description' => 'Описание продукта Бормотуха 1', 
//      'summary' => 'Краткое описание продукта Бормотуха 1',
//      'zp_id' => 'z011',
//      'parent_zp_id' => 'z004',
//      'subgroup' => 'подгруппа Бормотуха',
//      'weight' => 2,
//    );
//  }
  
  
  return $objects;
  
  */
}


/**
 * Creates new ZP object: dept, subgroup, product, etc.
 */
function zp_commerce_processPriceList_row($op, $object, &$result_messages){
  
  if ($op == 'test') {
    //sleep(1);
    //dpm($object['Название']);
    if ($object['zp_id'] == 'z010') {
      return 'Error with z010';
    }
    else {
      return NULL;
    }
  }
  
  if (isset($object['type'])) {
    $type = $object['type'];
  }
  else {
    $type = isset($object['product_display']) ? $object['product_display'] : (isset($object['product_type']) ? $object['product_type'] : NULL);
  }
  
  switch ($object['Действие / результат']) {
    case 'new':
        return zp_commerce_processPriceList_row_add($op, $object, $result_messages, $type);
      break;
    
    case 'delete':
        return zp_commerce_processPriceList_row_delete($op, $object, $result_messages, $type);
      break;
    
    case 'hide':
    case 'unhide':  
    case 'show':  
    case 'change':
        return zp_commerce_processPriceList_row_change($op, $object, $result_messages, $type);
      break;
  }
  
}


/*
 *  Add a new dept or product.
 * 
**/
function zp_commerce_processPriceList_row_add($op, $object, &$result_messages, $type) {
    
  switch ($type) {
    case 'department':
      return zp_commerce_addNewDeptAndMenuItem($op, $object, $result_messages);
    //case 'subgroup':
    //  return zp_commerce_addNewCatalogTerm($op, $object, $result_messages);
    case 'product':
    case 'product_a':
      return zp_commerce_addNewProduct($op, $object, $result_messages);
      //return 'test add product....';
  }
}


function zp_commerce_processPriceList_row_change($op, $object, &$result_messages) {
  
  $fields_to_change = $object['fields_to_change'];
  
  // If it's a product
  if (@$object['product_display']) {
    $bundle = $object['product_display'];
    $type = 'product';
  }
  else {
    $bundle = $object['type'];
    $type = $object['type'];
  }
  
  if (!$entity_id = zp_misc_fieldRead_idByValue_single('zp_id', $object['zp_id'], /*$entity_type*/'node', $bundle)) {
    return 'Не найден объект с zp_id = ' . $object['zp_id'];
  }
  
  if (@$object['product_display']) {
    if (!$product_id = zp_misc_fieldRead_valueById_single(/*$field_name*/'product', $entity_id, /*$entity_type = */'node', /*$bundle = */$bundle/*'product_a'*/, 'field_product_product_id')) {
      return 'Не найден товар (product) с zp_id = ' . $object['zp_id'];
    }        
  }
  
  $bulk_change_fields_map = array(
      'Производитель/Поставщик/Бренд' => 'brand',
      'Вес элемента в группе' => 'c_weight',
  );
  
  $bulk_change_fields_map_product = array(
      'Продажная единица (шт, кг и т.д.)' => 'qmeasure',
      'Штрихкод' => 'bar',
      'Артикул магазина' => 'artikul_shop',
      'Артикул производителя' => 'artikul_producer',
  );
  
  
  if (in_array('Артикул производителя', $fields_to_change) && in_array('Артикул поставщика', $fields_to_change)) {
    zp_commerce_clarifyArtikulProducer($object, $result_messages);
    unset($fields_to_change[array_search('Артикул поставщика', $fields_to_change)]);
  }
  elseif (in_array('Артикул поставщика', $fields_to_change)) {
    $object['Артикул производителя'] = $object['Артикул поставщика'];
    unset($object['Артикул поставщика'], $fields_to_change[array_search('Артикул поставщика', $fields_to_change)]);
    $result_messages[] = 'Внимание!!!!!!! Как Артикул производителя будет задан Артикул поставщика (так как для Артикула производителя и Артикула поставщика предусмотрено только одно общее поле)';
  }
   
  $all_categories_removed = FALSE;
  
  foreach ($fields_to_change as $field_to_change) {
    
    if (isset($bulk_change_fields_map[$field_to_change])) {
      if (!zp_misc_fieldSave(/*$field_name*/$bulk_change_fields_map[$field_to_change], /*$entity_id*/$entity_id, /*$data*/$object[$field_to_change], /*$entity_type*/'node', /*$bundle*/$bundle, /*$clear_cache*/ FALSE)) {
        return 'Ошибка при создании или изменении поля отдела или дисплея товара "' . $field_to_change . '" на "' . $object[$field_to_change] . '"';
      }
      $result_messages[] = 'Успешно изменено поле отдела или дисплея товара "' . $field_to_change . '"';
      continue;
    }
    if (isset($bulk_change_fields_map_product[$field_to_change])) {
      if (!zp_misc_fieldSave(/*$field_name*/$bulk_change_fields_map_product[$field_to_change], /*$entity_id*/$product_id, /*$data*/$object[$field_to_change], /*$entity_type*/'commerce_product', /*$bundle*/'product', /*$clear_cache*/ FALSE)) {
        return 'Ошибка при создании или изменении поля товара "' . $field_to_change . '" на "' . $object[$field_to_change] . '"';
      }
      $result_messages[] = 'Успешно изменено поле товара "' . $field_to_change . '" на "' . $object[$field_to_change] . '"';
      continue;
    }
    
            
    switch($field_to_change) {

      // Product only fields -----------------------------------------------------------------------------------------------
      
      case 'Цена (за продажную единицу)':
        
        // https://drupalcommerce.org/discussions/3971/how-alter-lineitem-price-programmatically
        // http://stackoverflow.com/questions/13491983/drupal-commerce-line-items-alter-the-price
        
        // http://drupal.stackexchange.com/questions/23168/commerce-product-programatically-with-price
        // http://drupal.stackexchange.com/questions/46254/alter-cart-unit-price-and-total-amount
        // http://drupal.stackexchange.com/questions/101119/drupal-commerce-order-total-amount-not-update-after-i-programmatically-changed-l
        
        $product = commerce_product_load($product_id);
        $old_price = $product->commerce_price['und'][0]['amount']/100;
        if ($old_price == $object[$field_to_change]) {
          $result_messages[] = 'Цена товара не изменилась (' . $old_price . $object['Валюта'] . ').';
        }
        else {
          $product->commerce_price['und'][0]['amount'] = $object[$field_to_change] * 100;
          if (commerce_product_save( $product )) {
            $result_messages[] = 'Изменена цена товара с ' . $old_price . $object['Валюта'] . ' на ' . $object[$field_to_change] . $object['Валюта'];
          }
          else {
            return 'Ошибка при изменении цены товара на ' . $object[$field_to_change] . $object['Валюта'];
          }
        }
        break;

      
      
      case 'Кол-во':
        
        break;      
      

      
      case 'Категория 1':
      case 'Категория 2':
      case 'Род.Отдел/Категория 3':
        
          if (!$all_categories_removed && (in_array('Категория 1', $fields_to_change) || in_array('Категория 2', $fields_to_change) || in_array('Род.Отдел/Категория 3', $fields_to_change)) ) {
            // If we have to change categorues (main or others) thet we need to update everything. So we'll need update data from all three these fields.
            // So we remove all categories and will add again all cats from scratch (see below).
            if($error = zp_commerce_removeCategoriesFromProduct($entity_id, $bundle, $result_messages)) {
              return $error;
            }
            $result_messages[] = 'Удалены все категории товара, для дальнейшего обновления...';
            $all_categories_removed = TRUE;
          }


        if($object[$field_to_change] && $error = zp_commerce_addCategoriesToProduct($entity_id, $field_to_change, $object[$field_to_change], $result_messages)) {
          return $error;
        }
        
        break;      

        
        
      
      
      case 'Вес/объём, мера':
        
        break;      

      case 'Вес/объём, значение':
        
        break;      
      
      case 'Срок хранения':
        
        break;      
      
      case 'Другие атрибуты товара':
        
        break;      
      
      
      
            
      // Products and departments fields -----------------------------------------------------------------------------------------------
      	
      case 'Статус элемента':

        if ($type == 'product') {
          
                      $query = db_select('commerce_product', 'p');
                      $query->fields('p', array('revision_id', 'status'))
                        ->condition('product_id', $product_id);
                      if (!$result = $query->execute()->fetchObject()) {
                        return 'Изменение статуса: Не удалось определить номер ревизии для товара';
                      }
                      
                      if ($result->status == $object[$field_to_change]) {
                        $result_messages[] = 'Статус товара не изменился.';
                        continue;
                      }

                      $success = db_update('commerce_product')
                        ->fields(array(
                          'status' => $object[$field_to_change],
                        ))
                        ->condition('product_id', $product_id)
                        ->execute();

                      if (!$success) {
                        return 'Не удалось обновить статус для товара';
                      }

                      $success = db_update('commerce_product_revision')
                        ->fields(array(
                          'status' => $object[$field_to_change],
                        ))
                        ->condition('revision_id', $result->revision_id)
                        ->execute();

                      if (!$success) {
                        return 'Не удалось обновить статус для ревизии товара';
                      }

                      $result_messages[] = 'Статус товара обновлён на ' . $object[$field_to_change];
                      
        } // End of if ($type == 'product') {
        elseif ($type == 'department') {
          // Status 0 for department means that connected products, subdepartments and Catalog menu item for it will be hidden, and 
          if ($object[$field_to_change]) {

            if (!zp_misc_fieldSave(/*$field_name*/'visibility_status', /*$entity_id*/$entity_id, /*$data*/$object[$field_to_change], /*$entity_type*/'node', /*$bundle*/$bundle, /*$clear_cache*/ FALSE)) {
              return 'Ошибка при изменении статуса видимости отдела';
            }

            // Update visibility for the connected menu item
            $tid = zp_misc_fieldRead_idByValue_single('zp_id', $object['zp_id'], 'taxonomy_term', 'catalog');
            $term = taxonomy_term_load($tid);
            $term->field_visibility_status['und'][0]['value'] = $object[$field_to_change];
            if(!taxonomy_term_save($term)) {
              return 'Ошибка при изменении статуса видимости привязанного пункта меню каталога';
            }
            
          } // End of if ($object[$field_to_change]) {
          
          $result_messages[] = 'Статус отдела (и привязанного пункта меню) обновлён.';
          
        } // End of elseif ($type == 'department') {
        
        break; 
      
        
        
        
        
      case 'Название':
        
        if (!zp_commerce_changeTitle('node', $entity_id, $object[$field_to_change], FALSE)) {
          return 'Ошибка при изменении названия отдела или дисплея товара на "' . $object[$field_to_change] . '"';
        }
        if ($type == 'product') {
          if (!zp_commerce_changeTitle('commerce_product', $product_id, $object[$field_to_change], FALSE)) {
            return 'Ошибка при изменении названия товара на "' . $object[$field_to_change] . '"';
          }
        }
        $result_messages[] = 'Название обновлёно успешно на "' . $object[$field_to_change] . '"';
        
        break;
      
        
        
        
      case 'Описание':
        
        if (!zp_commerce_changeBodyAndSummary('node', $entity_id, array('body' => $object[$field_to_change]), FALSE)) {
          return 'Ошибка при изменении описания отдела или дисплея товара';
        }
        
        break;
      
      
      case 'Описание краткое':
        
        if (!zp_commerce_changeBodyAndSummary('node', $entity_id, array('summary' => $object[$field_to_change]), FALSE)) {
          return 'Ошибка при изменении краткого описания отдела или дисплея товара';
        }
        
        break;
        
        
      
      case 'Ключевые слова':
        
        break; 
      
      
      
      
      case 'Логотип':
        
        break;      

      case 'Каталог с картинками':
        
        break;      
      
      case 'Ссылка на первый файл':
        
        break;      
      
      case 'Кол-во картинок':
        
        break;      
      
      case 'На основе чего формируется название картинок':
        
        break;      
      
      case 'Ориентация картинок':
        
        break;      
      
      
      
      
      
      case 'Коэффициент доставки':
        
        break;      
      
      case 'Коэффициент минимальной суммы покупки (корзины)':
        
        break;      
      
      
    } // End of switch($object[$field]) {
  } // End of foreach (fields_to_change as $field) {
}


/**
 * 
 * @param type $entity_id
 * @param type $entity_type
 * @param type $bundle
 * @param type $result_messages
 * 
 */
function zp_commerce_removeCategoriesFromProduct($entity_id, $bundle, &$result_messages) {
  $taxonomy_field_names = array('Category main' => 'category_main', 'Categories other' => 'categories_other');

  foreach ($taxonomy_field_names as $key => $field_name) {
    zp_misc_fieldTermReferenceDelete($field_name, $entity_id, $bundle);
  }
  
  //Success.
  return FALSE;
}


/**
 * 
 * @global type $vocs
 * @param type $entity_id
 * @param type $field_to_change
 * @param type $field_data
 * @param type $result_messages
 * @return boolean
 * 
  */
function zp_commerce_addCategoriesToProduct($entity_id, $field_to_change, $field_data, &$result_messages) {
  
  //$field_data = 'Вид блюда: Мясо и птица***Жульен###Прочие категории: Диетическое питание***Холодные блюда';
  //$field_data = 'Вид блюда: Мясо и птица***Жульен';
  //dpm($field_data);


  //$field_to_change = 'Категория 1';
  //$entity_id = 138;
  
  $vocs_names = array('Category main' => 'category_main', 'Categories other' => 'categories_other');

  // Define vocabularies.
  global $vocs;
  if (!$vocs) {

    foreach ($vocs_names as $vocs_name => $voc_machine_name) {
      $query = db_select('taxonomy_vocabulary', 'v')  
            ->fields('v', array('vid'));
      $query->condition('v.name', $vocs_name);
      if($vid = $query->execute()->fetchField()) {
        $vocs[$vocs_name] = $vid;
      }
      else {

              // The vocabulary name is not recognized.
              taxonomy_vocabulary_save((object) array(
                'name' => $vocs_name,
                'machine_name' => $voc_machine_name,
              ));
              $query = db_select('taxonomy_vocabulary', 'v')  
                    ->fields('v', array('vid'));
              $query->condition('v.name', $vocs_name);
              if($vid = $query->execute()->fetchField()) {
                $vocs[$vocs_name] = $vid;
                $result_messages[] = 'Создан новый словарь "' . $vocs_name . '"';
              }
              else {
                dpm('Словарь "' . $vocs_name . '" не существовал в базе, а при попытке его создании возникла ошибка.');
                return 'Словарь "' . $vocs_name . '" не существовал в базе, а при попытке его создании возникла ошибка.';
              }

      } // End of else of if($vid = $query->execute()->fetchField()) {
    } // End of foreach ($vocs_names as $vocs_name => $voc_machine_name) {
  } // End of if (!$vocs) {



  // The product can have several categories, delimited by ###.
  $cats = explode('###', $field_data);

  foreach ($cats as $key => $cat) {
    //dpm($key . ': ' . $cat);
    $cat = explode(':', $cat);

    // Category group term name.
    $cat_name = trim($cat[0]);

    if (empty($cat[1])) {
      return 'Не заданы значения для категории "' . $cat_name . '". После двоеточия должна быть строка со значением для данной категории';
    }

    //dpm('cat_name: ' . $cat_name);
    
    // If it's Cat 1 field, add the first cat value(s) to the Category main voc.
    // In all other cases add all values to Categories other voc.
    if ($field_to_change == 'Категория 1' && $key == 0) {
      // Category main vocabulary.
      $voc_name = 'Category main';
      $vid = $vocs[$voc_name];
    }
    else {
      $voc_name = 'Categories other';
      $vid = $vocs[$voc_name];
    }

    // Check if there is a Category group term name is in the voc.
    // And create it if not exists.
    if (!$category_tid = zp_misc_createTerm_ifNotExists($vid, $cat_name, 0, $result_messages)) {
      //dpm('Ошибка при создании нового терма для названия категории (группы) "' . $cat_name . '".');
      return 'Ошибка при создании нового терма для названия категории (группы) "' . $cat_name . '".';
    }

    // The product can have several values in each category.
    $terms = explode('***', $cat[1]);
    foreach ($terms as $term_key => $term_name) {
      $term_name = trim($term_name);
      //dpm('---> term ' . $term_key . ' name: ' . $term_name);
      if (!$term_tid = zp_misc_createTerm_ifNotExists($vid, $term_name, $category_tid, $result_messages)) {
        //dpm('Ошибка при создании нового терма для названия конечного терма "' . $term_name . '".');
        return 'Ошибка при создании нового терма для названия конечного терма "' . $term_name . '" (категория "' . $cat_name . '")';
      }
      //Connect a term to the node.
      //zp_misc_fieldTermReferenceSave_insertMultiply(/*'category_main'*/$vocs_names[$voc_name], 138, /*74*/$term_tid, 'node', NULL, TRUE);
      zp_misc_fieldTermReferenceSave_insertMultiply(/*$field_name = */$vocs_names[$voc_name], $entity_id, /*$data = */$term_tid, /*$entity_type = */'node', /*$bundle = */NULL, /*$clear_cache = */FALSE);
      $result_messages[] = 'К товару добавлен (или обновлён) терм "' . $term_name . '" (категория "' . $cat_name . '")';
    } // foreach ($terms as $term_key => $term_name) {

  }
  //dpm($result_messages);

  // Success.
  return FALSE;
}


/**
 * 
 * @param type $entity_type
 * @param type $entity_id
 * @param type $body
 * @param type $summary
 * @param type $clear_cache
 * @return boolean
 * 
 * 
 */
function zp_commerce_changeBodyAndSummary($entity_type, $entity_id, $data = array(), $clear_cache = TRUE) {
  
  // Get revision_id and bundle 
  if ($entity_type == 'node') {
    $entity_id_field = 'nid';
    $bundle_field = 'type';
    $revision_id_field = 'vid';
  }
  else {
    return FALSE;
  }
  
  $query = db_select($entity_type, 'e');
  $query->addField('e', $bundle_field, 'bundle');
  $query->addField('e', $revision_id_field, 'revision_id');
  $query->condition($entity_id_field, $entity_id);
  $entity = $query->execute()->fetchObject();
  
  //dpm($entity);
  
  $fields = array();
  $body_set = $summary_set = FALSE;
  if (array_key_exists('body', $data)) {
    //dpm('1. isset body');
    $fields['body_value'] = $data['body'];
    $body_set = TRUE;
  }
  if (array_key_exists('summary', $data)) {
    //dpm('2. isset summary');
    $fields['body_summary'] = $data['summary'];
    $summary_set = TRUE;
  }
  
  $query = db_select('field_data_body', 'f');
  $query->fields('f', array('body_value', 'revision_id', 'body_value', 'body_summary'))
        ->condition('f.entity_id', $entity_id)
        ->condition('f.entity_type', $entity_type);
  $result = $query->execute()->fetchObject(); //->fetchField();
  //dpm($result);
  //if ($result->rowCount()) {
  if ($result) { 
    
    //dpm('3. update');
    
        // Skip updating not changed values.
        if ($body_set && $result->body_value == $data['body']) {
          if (!$summary_set) {
            return TRUE;
          }
          elseif ($result->body_summary == $data['summary']) { 
            return TRUE;
          }
        }
        if ($summary_set && $result->body_summary == $data['summary']) {
          if (!$body_set) {
            return TRUE;
          }
        }
    
        // Update a value.
        $success = db_update('field_data_body')
          ->fields($fields)
          ->condition('entity_id', $entity_id)
          ->execute();

        if (!$success) {
          return FALSE;
        }

        $success = db_update('field_revision_body')
          ->fields($fields)
          ->condition('entity_id', $entity_id)
          ->condition('revision_id', $entity->revision_id)
          ->execute();

        if (!$success) {
          return FALSE;
        }
  }
  else {
    
    //dpm('3. insert');
       // Need create a new field.
    $success = db_insert('field_data_body') 
      ->fields(array(
        'entity_type'=> $entity_type,
        'bundle'=> $entity->bundle,
        'deleted'=> 0,                
        'entity_id' => $entity_id,
        'delta' => 0,  
        'revision_id'=> $entity->revision_id,
        'language'=> 'und',  
        'body_value' => $body,
        'body_summary' => $summary,  
        'body_format' => 'full_html',
      ))
      ->execute();

//    if (!$success) {
//      return FALSE;
//    }
    
    $success = db_insert('field_revision_body')
      ->fields(array(
        'entity_type'=> $entity_type,
        'bundle'=> $entity->bundle,
        'deleted'=> 0,                
        'entity_id' => $entity_id,
        'delta' => 0,  
        'revision_id'=> $entity->revision_id,
        'language'=> 'und',  
        'body_value' => $body,
        'body_summary' => $summary,  
        'body_format' => 'full_html',  
      ))
      ->execute();
    
//    if (!$success) {
//      return FALSE;
//    }
       
  }
  
   if ($clear_cache) {
    field_cache_clear();
  }
  
  return TRUE;
}


/**
 * 
 * @param type $entity_type
 * @param type $entity_id
 * @param type $title
 * @param type $clear_cache
 * @return boolean
 * 
 * 
 */
function zp_commerce_changeTitle($entity_type, $entity_id, $title, $clear_cache = TRUE) {
  
  // Get revision_id and bundle 
  if ($entity_type == 'node') {
    $entity_id_field = 'nid';
    //$bundle_field = 'type';
    $revision_id_field = 'vid';
  }
  elseif ($entity_type == 'commerce_product') {
    $entity_id_field = 'product_id';
    //$bundle_field = 'type';
    $revision_id_field = 'revision_id';
  }
  
  $query = db_select($entity_type, 'e');
  $query->addField('e', 'title');
  $query->addField('e', $revision_id_field, 'revision_id');
  $query->condition($entity_id_field, $entity_id);
  $entity = $query->execute()->fetchObject();
  
  //dpm($entity);
  if ($entity->title == $title) {
    // Nothing to change.
    return TRUE;
  }
  
  $success = db_update($entity_type)
    ->fields(array(
      'title' => $title,
    ))
    ->condition($entity_id_field, $entity_id)
    ->execute();

  if (!$success) {
    //dpm('---1');
    return FALSE;
  }

  $success = db_update($entity_type . '_revision')
    ->fields(array(
      'title' => $title,
    ))
    ->condition($entity_id_field, $entity_id)
    ->condition($revision_id_field, $entity->revision_id)
    ->execute();

  if (!$success) {
    //dpm('---2');
    return FALSE;
  }
  
  
  if ($clear_cache) {
    field_cache_clear();
  }
  
  return TRUE;
}


/**
 * 
 * @param type $op
 * @param type $object
 * @param type $result_messages
 * @param type $type
 * @return type
 * 
 * 
 */
function zp_commerce_processPriceList_row_delete($op, $object, &$result_messages, $type) {
  
  switch ($type) {
    case 'department':
      return zp_commerce_deleteDeptAndMenuItem($op, $object, $result_messages);
    //case 'subgroup':
    //  return zp_commerce_deleteCatalogTerm($op, $object);
    case 'product':
    case 'product_a':
      return zp_commerce_deleteProductAndDisplay($op, $object, $result_messages);
      //return 'delete product....';
  }
}



function zp_commerce_deleteProductAndDisplay($op, $object, &$result_messages) {
  
  $error = NULL;

  $query = db_select('field_revision_field_zp_id', 'z')
    ->fields('z', array('entity_id'));
  $query->condition('z.field_zp_id_value', $object['zp_id']);
  $query->condition('z.bundle', $object['product_display']);
  
  if ($nid = $query->execute()->fetchField()) {
    //dpm('Display nid ' . $nid);
    node_delete($nid);
    
    $result_message = 'Succcessfully deleted product display with zp_id ' . $object['zp_id'];
    //dpm($result_message);
    $result_messages[] = $result_message;
  }
  else {
    $error = 'No display with zp_id ' . $object['zp_id'];
    //dpm($error);
  }

  // Remove this product from orders/carts if there are any...
  $query = db_select('commerce_line_item', 'l')
    ->fields('l', array('order_id', 'line_item_id'));
  $query->condition('l.line_item_label', $object['zp_id']);
  if ($orders_line_items = $query->execute()->fetchAllAssoc('order_id')) {
    $result_message = 'Product is added to one or several orders/carts (#' . (implode(', ', array_keys($orders_line_items))) . ') and will be deleted from there:';
    //dpm($result_message);
    $result_messages[] = $result_message;
    //dpm($orders_line_items);
    foreach($orders_line_items as $order_id => $data) {
       commerce_line_item_delete($data->line_item_id);
    }
  }



  $query = db_select('commerce_product', 'p')
    ->fields('p', array('product_id'));
  $query->condition('p.sku', $object['zp_id']);
  if ($product_id = $query->execute()->fetchField()) {
    //dpm('Product id ' . $product_id);
    if (commerce_product_delete($product_id)) {
      $result_message = 'Succcessfully deleted product with zp_id ' . $object['zp_id'];
      //dpm($result_message);
      $result_messages[] = $result_message;
    }
    else {
      $error = 'Продукт с zp_id ' . $object['zp_id'] . ' не был удалён. Возможно, он где-то ещё используется';
      //dpm($error);
    }
  }
  else {
    $error = 'No product with zp_id ' . $object['zp_id'];
    //dpm($error);
  }

  return $error;
}



function zp_commerce_deleteDeptAndMenuItem($op, $object, &$result_messages) {

  $error = NULL;
  
  // If there any children object of this department... like subdepartments, products...
  $query = db_select('field_revision_field_parent_zp_id', 'p')
    ->fields('p', array('entity_id'));
  $query->condition('p.field_parent_zp_id_value', $object['zp_id']);
  if ($nids = $query->execute()->fetchAll()) {
    $error = 'Данный Отдел с zp_id ' . $object['zp_id'] . ' содержит ' . count($nids) . ' подотделов и/или товаров и не может быть удалён. Сначала удалите отделы/товары, которые в нём содержатся.';
    return $error;
  }

  $query = db_select('field_revision_field_zp_id', 'z')
    ->fields('z', array('entity_id'));
  $query->condition('z.field_zp_id_value', $object['zp_id']);
  $query->condition('z.bundle', 'department');
  if (!$nid = $query->execute()->fetchField()) {
    $error = 'Отдела с zp_id ' . $object['zp_id'] . ' не существует. Проверьте zp_id.';
    return $error;
  }
  
  //dpm('Display nid ' . $nid);
  node_delete($nid);

  $result_message = 'Успешно удалён Отдел с zp_id ' . $object['zp_id'];
  //dpm($result_message);
  $result_messages[] = $result_message;
    
  $query = db_select('field_data_field_zp_id', 'z');
  $query->fields('z', array('entity_id'))
        ->condition('field_zp_id_value', $object['zp_id'])
        ->condition('entity_type', 'taxonomy_term');
  if ($tid = $query->execute()->fetchField()) {
    $result_message = 'Найдёт терм словаря меню Каталог, привязанный к данному отделу.';
    //dpm('tid = '. $tid);
    if (taxonomy_term_delete($tid)) {
      $result_message .= ' Успешно удалён (т.е. удалён пункт меню с таким же названием, как каталог).';
    }
    $result_messages[] = $result_message;
  }
  
  return $error;
}


/**
 * 
 */
function zp_commerce_addNewDeptAndMenuItem($op, $object, &$result_messages) {
 
  // Creat a node for the department.
  // ---------------------------------------------------------------------------------------------------
  
  global $user;
  global $language;
  
  $node = new stdClass();
  $node->type = 'department';
  node_object_prepare($node);
  
  $current_time = time();
  $node->date = $current_time;
  $node->created = $current_time;
  $node->changed = $current_time;
  
  $node->title = $object['Название'];
  $node->language = LANGUAGE_NONE; //$language->language; 
  $node->uid = $user->uid;
  $node->status = 1;
  $node->promote = 0;
  $node->sticky = 0;
  $node->comment = 0;
  
  
  $node->field_visibility_status[$node->language][0]['value'] = @$object['Статус элемента'];
  
  $node->body[$node->language][0]['format'] = 'full_html';
  $node->body[$node->language][0]['value'] = @$object['Описание'];
  $node->body[$node->language][0]['summary'] = @$object['Описание краткое'];
  $node->body[$node->language][0]['safe_value'] = check_plain(@$object['Описание']);
  $node->body[$node->language][0]['safe_summary'] = check_plain(@$object['Описание краткое']);
  
  $node->field_zp_id[$node->language][0]['value'] = $object['zp_id'];
  $node->field_parent_zp_id[$node->language][0]['value'] = $object['parent_zp_id'];
  $node->field_c_weight[$node->language][0]['value'] = $object['Вес элемента в группе'];

  /*
  $node->field_zp_id[$node->language][0] = array(
    'value' => $object['zp_id'],
    'safe_value' => check_plain($object['zp_id']),
    'format' => 'full_html',
  );
  */
  
  /*
  $node->path = array(
    'alias' => $object['url_alias'],
    'language' => $node->language,
    'pathauto' => 0,
  );
  */
  
  if (!$node = node_submit($node)) {
    $error_message = '1. Ошибка при сохранении отдела "' . $object['Название'] . '"';
    //drupal_set_message($error_message, 'error');
    return $error_message;
  }

  node_save($node);
  if (empty($node->nid)) {
    $error_message = '2. Ошибка при сохранении отдела "' . $object['Название'] . '"';
    //drupal_set_message($error_message, 'error');
    return $error_message;
  }
  
  $result_message = 'Новый отдел "' . $object['Название'] . '" был создан Успешно!';
  //drupal_set_message($result_message);
  $result_messages[] = $result_message;
  
  
  
  // Create a term in the menu Catalog and connect it to the just created department node.
  // ---------------------------------------------------------------------------------------------------
  if ($error = zp_commerce_addNewCatalogTerm($op, $object, $result_messages)) {
    return $error;
  }
  
  // Taxonomy term itself will be assigned to this node automatically on taxonomy_menu item creation via hook zp_commerce_taxonomy_menu_save.
  
  // Success.
  return FALSE;
}


/**
 * Create a new Catalog term by zp_id.
 * If there is a dept with such a zp_id, it will be connected to that dept, 
 * or else no menu item will be created at all.
 */
function zp_commerce_addNewCatalogTerm($op, $object, &$result_messages) {
  
  $error = NULL;
  
  static $catalog_voc;
  if (!$catalog_voc) {
    $catalog_voc = taxonomy_vocabulary_machine_name_load('catalog');
  }
  
  // Find parent term tid by parent_zp_id.
  if (!$parent_tid = zp_misc_fieldRead_idByValue_single('zp_id', $object['parent_zp_id'], 'taxonomy_term', 'catalog')) {
    $error = 'Элемент с указанным родительским parent_zp_id не найден.';
    return $error;
  }
  
  $catalog_term = (object) array(
    'name' => !empty($object['menu_item_title']) ? $object['menu_item_title'] : $object['Название'],
    'vid' => $catalog_voc->vid,
    'parent' => array($parent_tid),
    'weight' => $object['Вес элемента в группе'],
    'field_zp_id' => !empty($object['zp_id']) ? array('und' => array(0 => array('value' => $object['zp_id']))) : NULL,
    // Possibility to hide a menu item.
    'field_visibility_status' => array('und' => array(0 => array('value' => $object['Статус элемента']))),
  );
  
  //dpm($object);
  //dpm($catalog_term);
  
  if (taxonomy_term_save($catalog_term)) {
    $result_message = 'Новый терм словаря меню Каталог "' . $object['Название'] . '" был создан Успешно!';
    $result_messages[] = $result_message;
  }
  else {
    $error = 'Новый терм словаря меню Каталог "' . $object['Название'] . '" НЕ БЫЛ создан по какой-то причине!';
    return $error;
  }
  //dpm($menu_item_term);
  
  // If there is a dept/shop/etc connectd to this term by zp_id, this term will be assigned to that node automatically on taxonomy_menu item creation via hook zp_commerce_taxonomy_menu_save.
  // If this term doesn't have zp_id - this is subgroup and will not be assigned to anything.
  
  // Success.
  return NULL;
}


/**
 * 
 * @param type $object
 * @param type $result_messages
 * 
 */
function zp_commerce_clarifyArtikulProducer(&$object, &$result_messages) {
  
  if (@$object['Артикул производителя'] && @$object['Артикул поставщика']) {
    $result_messages[] = 'Внимание!!!!!!! Заданы одновременно Артикул производителя и Артикул поставщика, но использован будет только Артикул производителя (так как для Артикула производителя и Артикула поставщика предусмотрено только одно общее поле)';
  }
  else {
    $object['Артикул производителя'] = @$object['Артикул производителя'] ? $object['Артикул производителя'] : @$object['Артикул поставщика'];
    if (@$object['Артикул поставщика']) {
      $result_messages[] = 'Внимание!!!!!!! Как Артикул производителя будет задан Артикул поставщика (так как для Артикула производителя и Артикула поставщика предусмотрено только одно общее поле)';
    }
  }
  unset($object['Артикул поставщика']); 
}


/**
 * Create a new product and connect it to the Catalog term by zp_id.
 */
function zp_commerce_addNewProduct($op, $object, &$result_messages) {
  
  if (zp_misc_fieldRead_idByValue_single('zp_id', $object['zp_id'], 'node', $object['product_display'])) {
    $error_message = 'Нельзя создать дисплей товара, так как Уже существует дисплей товара с zp_id ' . $object['zp_id'];
    return $error_message;
  }
  
  $query = db_select('commerce_product', 'e');
  $query->addField('e', 'product_id');
  $query->condition('sku', $object['zp_id']);
  if ($product_id = $query->execute()->fetchField()) {
    $error_message = 'Нельзя создать товар, так как Уже существует товар с zp_id ' . $object['zp_id'];
    return $error_message;
  }
  
  // Find parent term tid by parent_zp_id.
  if (!$parent_tid = zp_misc_fieldRead_idByValue_single('zp_id', $object['parent_zp_id'], 'taxonomy_term', 'catalog')) {
    $error_message = 'Нет отдела с zp_id ' . $object['parent_zp_id'] . ', заданного как родительский для данного товара';
    //drupal_set_message($error_message, 'warning');
    return $error_message;
  }
  
  // Search for term which is a child of this product parent dept (and just found parent term) and has a name of subgroup which is set in object
  /*
  $query = db_select('taxonomy_term_data', 'td');
  $query->fields('td', array('tid'))
        ->condition('name', $object['subgroup']);
  $query->join('taxonomy_term_hierarchy', 'th', 'th.tid = td.tid AND th.parent = ' . $parent_tid);
  
  if (!$subgroup_term_tid = $query->execute()->fetchField()) {
    $error_message = 'No subgroup ' . $object['subgroup'] . ' in the dept with zp_id ' . $object['parent_zp_id'];
    drupal_set_message($error_message, 'warning');
    return $error_message;
  }
  */
  
  //dpm($subgroup_term_tid);
  
  
  
  // Create a Product Type entity for the product.
  // ---------------------------------------------------------------------------------------------------
  
  // From product_example.module.
  
  $form_state = array();
  $form_state['values'] = array();
  $form = array();
  $form['#parents'] = array();
  
  $product_type = empty($object['product_type']) ? 'product' : $object['product_type']; 
  // Generate a new product object
  $new_product = commerce_product_new($object['product_type']);

  $new_product->language = LANGUAGE_NONE; //$language->language; 
  
  $new_product->status = @$object['Статус элемента'];
  
  $new_product->uid = $GLOBALS['user']->uid;

  $new_product->sku = $object['zp_id'];
  $new_product->title = $object['Название'];
  $time = time();
  $new_product->created = $time;
  $new_product->changed = $time;

  $new_product->field_qmeasure['und'][0]['value'] = @$object['Продажная единица (шт, кг и т.д.)'];
  $new_product->field_bar['und'][0]['value'] = @$object['Штрихкод'];
  $new_product->field_artikul_shop['und'][0]['value'] = @$object['Артикул магазина'];
  
  zp_commerce_clarifyArtikulProducer($object, $result_messages);
  $new_product->field_artikul_producer['und'][0]['value'] = @$object['Артикул производителя'];
  
  //dpm($object);
  //dpm($new_product); 
  
  //commerce_price[und][0][amount]
  $price = array(LANGUAGE_NONE => array(0 => array(
    'amount' => @$object['Цена (за продажную единицу)'] * 100,
    'currency_code' => @$object['Валюта'], //commerce_default_currency(),
  )));
  $form_state['values']['commerce_price'] = $price;

  // Notify field widgets to save their field data
  field_attach_submit('commerce_product', $new_product, $form, $form_state);

  commerce_product_save($new_product);
  
  if (empty($new_product->product_id)) {
    $error_message = '0.Error has occured while creating a Product type "' . $object['Название'] . '" with zp_id ' . $object['zp_id'];
    //drupal_set_message($error_message, 'error');
    return $error_message;
  }
  else {
    $product_id = $new_product->product_id;
    $result_message = 'Создан новый Commerce продукт с product_id = ' . $product_id . ' для zp_id ' . $object['zp_id'];
    //drupal_set_message($result_message);
    $result_messages[] = $result_message;
  }
  
  dpm($new_product);
  
  // Create a Product Display node for the product,
  // And connect to it just created Product Type entity.
  // ---------------------------------------------------------------------------------------------------
  
  $product_display = empty($object['product_display']) ? 'product_a' : $object['product_display']; 
  $node = new stdClass();
  $node->type = $product_display;
  node_object_prepare($node);
  
  $current_time = time();
  //$node->date = $current_time;
  $node->created = $current_time;
  $node->changed = $current_time;
  
  $node->title = $object['Название'];
  $node->language = LANGUAGE_NONE; //$language->language; 
  $node->uid = $GLOBALS['user']->uid;
  $node->status = 1;
  $node->promote = 0;
  $node->sticky = 0;
  $node->comment = 0;
  
  $node->body[$node->language][0]['format'] = 'full_html';
  $node->body[$node->language][0]['value'] = $object['Описание'];
  $node->body[$node->language][0]['summary'] = $object['Описание краткое'];
  $node->body[$node->language][0]['safe_value'] = check_plain(@$object['Описание']);
  $node->body[$node->language][0]['safe_summary'] = check_plain(@$object['Описание краткое']);
  
  $node->field_zp_id[$node->language][0]['value'] = $object['zp_id'];
  $node->field_parent_zp_id[$node->language][0]['value'] = $object['parent_zp_id'];
  
  $node->field_c_weight[$node->language][0]['value'] = $object['Вес элемента в группе'];
  $node->field_brand[$node->language][0]['value'] = $object['Производитель/Поставщик/Бренд'];

  $node->{'field_' . $product_type}[$node->language][0]['product_id'] = $product_id;
  
  //dpm($node);
  /*
  $node->field_zp_id[$node->language][0] = array(
    'value' => $object['zp_id'],
    'safe_value' => check_plain($object['zp_id']),
    'format' => 'full_html',
  );
 
  $node->path = array(
    'alias' => $object['url_alias'],
    'language' => $node->language,
    'pathauto' => 0,
  );
  */
  
  if (!$node = node_submit($node)) {
    $error_message = '1. Ошибка при создании Дисплея продукта "' . $object['Название'] . '" с zp_id ' . $object['zp_id'];
    //drupal_set_message($error_message, 'error');
    return $error_message;
  }

  dpm($node);
  
  node_save($node);
  if (empty($node->nid)) {
    $error_message = '2. Ошибка при сохранении Дисплея продукта "' . $object['Название'] . '" с zp_id ' . $object['zp_id'];
    //drupal_set_message($error_message, 'error');
    return $error_message;
  }
  
  $result_message = 'Успешно создан новый Дисплей продукта "' . $object['Название'] . '" с zp_id ' . $object['zp_id'];
  //drupal_set_message($result_message);
  $result_messages[] = $result_message;
  
  // Connect the subgroup term (found above) to this product node.
//  zp_misc_fieldTermReferenceSave('catalog', $node->nid, $subgroup_term_tid, 'node', $product_display);
//  drupal_set_message('The Product display "' . $object['Название'] . '" has been connected to a corresponding Product type and the subgroup term "' . $subgroup_term_tid . '".', 'warning');
  
  
  /*
  // Find this product Catalog term by parent_zp_id.
  $term_tid = zp_misc_fieldRead_idByValue_single('zp_id', $object['parent_zp_id'], 'taxonomy_term', 'catalog');
  if ($term_tid) {
    // Connect or update the term to the node.
    zp_misc_fieldTermReferenceSave('catalog', $node->nid, $term_tid, 'node', $object_type);
    drupal_set_message('The product "' . $object['title'] . '" has been connected to the term "' . $term_tid . '".', 'warning');
  }
  else {
    drupal_set_message('There is no correcponding Catalog term with parent_zp_id "' . $object['parent_zp_id'] . '" for this product "' . $object['title'] . '".', 'error');
  }
  */
  
  // Success.
  return NULL;
}


/**
 * Allows modules to perform operations after a menu link resulting from the
 * processing of a taxonomy term has been saved.
 *
 * @param $term
 *   The taxonomy term
 * @param $menu_link
 *   The menu link that has been saved.
 * @param $mlid
 *   The identifier of the newly created menu item.
 */
function zp_commerce_taxonomy_menu_save($term, $menu_link, $mlid) {
  // For example, we could process all the translated taxonomy terms of this
  // term here, in order to save their respective translated menu links.
  
    dpm($term);
    dpm($menu_link);
    
    
    // a4s rewrite menu item path, attribute title.
    
    // Calculate it again... just testing, no need for this.
    ////$menu_link = taxonomy_menu_menu_link_prepare($term, 'menu-catalog-menu');
            
    // Original from taxonomy_menu_menu_link_prepare($term, $menu_name).
    
    // HTML title attribute.
     /*
    if (taxonomy_menu_variable_get('display_title_attr', $term->vid, TRUE)) {
      $term_description = taxonomy_menu_variable_get('term_item_description', $term->vid, 0);
    }
    $menu_link['options']['attributes']['title'] = (isset($term_description) && $term_description == 1) ? trim($term->description) : '';
    // Path.
    $link_path = taxonomy_menu_path_get($term->vid, $term->tid);
    $menu_link['link_path'] = drupal_get_normal_path($link_path, $langcode);
    */
    
    // Allow manually change and delete the menu item by a user.
    unset($menu_link['module']);
      
    
    // Connect dept node to this menu item
    /*
    // If there is a dept/shop/etc connected to this term, show link to this dept instead the link to the term.
    if ($object_nid = zp_commerce_findDeptOrShopOrCityByZpIDofTerm_andConnectItToTerm($term)) {
       //dpm($term);
      // And save the renewed item again, as in taxonomy_menu_menu_link_prepare($term, $menu_name).
      $menu_link['link_path'] = 'node/' . $object_nid;
    }
    */
    
    // Connect views page like d/z011121 or dp/z0193983
    if (@$term->field_has_prods_or_depts['und'][0]['value'] == 1) {
      $menu_link['link_path'] = 'd/' . $term->field_zp_id['und'][0]['value'];
    }
    elseif (@$term->field_has_prods_or_depts['und'][0]['value'] == 2) {
      $menu_link['link_path'] = 'dp/' . $term->field_zp_id['und'][0]['value'];
    }
    else {
      // Hide menu item if it's not yet filled with depts or products
      // But connect to it some kind of temporary menu url.
      
      if (zp_misc_termHasChildren($term->tid)) {
        $menu_link['link_path'] = 'd/' . $term->field_zp_id['und'][0]['value'];
      }
      else {
        $menu_link['link_path'] = 'dp/' . $term->field_zp_id['und'][0]['value'];
      }
      $term->field_visibility_status['und'][0]['value'] = 0;
    }
    
    
    // Let's create a menu item only for existing dept/shop/etc node.
    // And completely remove already created menu item (originally connected to taxonomy/term/xxx) from the menu.
    /*
    else {
      static $catalog_voc;
      if (!$catalog_voc) {
        $catalog_voc = taxonomy_vocabulary_machine_name_load('catalog');
      }
      menu_link_delete($menu_link['mlid']);
      _taxonomy_menu_delete_item($catalog_voc->vid, $term->tid);
      //dpm('Completely remove already created menu item (originally connected to taxonomy/term/xxx) from the menu');
      return FALSE;
    }
    */
    
    /*
    else {
      //dpm('not found dept');
      // Show a menu item without a link.
      // Depends on the module 'Special menu items'.
      $menu_link['link_path'] = '<nolink>';
    }
    */
    
    
    // Hide (aka disable) menu item, if a corresponding term is hidden by setting its $visibility_status to 0;
    if (array_key_exists('und', $term->field_visibility_status) && array_key_exists('0', $term->field_visibility_status['und'])) {
      $menu_link['hidden'] = empty($term->field_visibility_status['und'][0]['value']) ? 1 : 0;
      dpm('exists');
    }
    else {
      $menu_link['hidden'] = 0;
      dpm('NOT exists');
    }
    
    $mlid = menu_link_save($menu_link);
    
    dpm($menu_link);

}


/**
 * Creates a menu item for a catalog term. For dept node/x or for product node/x?tf=term_id
 */
function zp_commerce_createMenuItemForTerm($term) {

    // Original functipn from taxonomy_menu module.
    $menu_link = taxonomy_menu_menu_link_prepare($term, 'menu-catalog-menu');
    
    // Then we can correct some values...
    
    // Original from taxonomy_menu_menu_link_prepare($term, $menu_name).
    
    // HTML title attribute.
     /*
    if (taxonomy_menu_variable_get('display_title_attr', $term->vid, TRUE)) {
      $term_description = taxonomy_menu_variable_get('term_item_description', $term->vid, 0);
    }
    $menu_link['options']['attributes']['title'] = (isset($term_description) && $term_description == 1) ? trim($term->description) : '';
    // Path.
    $link_path = taxonomy_menu_path_get($term->vid, $term->tid);
    $menu_link['link_path'] = drupal_get_normal_path($link_path, $langcode);
    */
    
    // Allow manually change and delete the menu item by a user.
    unset($menu_link['module']);
      
    // If there is a dept/shop/city connected to this term, show link to this dept instead the link to the term.
    if ($object_nid = zp_commerce_findDeptOrShopOrCityByZpIDofTerm_andConnectItToTerm($term)) {
      // And save the renewed item again, as in taxonomy_menu_menu_link_prepare($term, $menu_name).
      $menu_link['link_path'] = 'node/' . $object_nid;
    }
    
    // Let's create a menu item only for existing dept/shop/city node.
    else {
      return FALSE;
    }
    /*
    // If there is no dept connected to the term but there is a product with the same zp_id, 
    // find it's parent dept and create a menu link for this term node/parent_dept_nid?tf=term_id
    elseif ($parent_dept_nid = zp_commerce_findParentDeptByZPIDofTerm($term)) {
      // And save the renewed item again, as in taxonomy_menu_menu_link_prepare($term, $menu_name).
      $menu_link['link_path'] = 'node/' . $parent_dept_nid . '/' . $term->tid;
    }
    else {
      //dpm('not found dept/shop/city');
      // Show a menu item without a link.
      // Depends on the module 'Special menu items'.
      $menu_link['link_path'] = '<nolink>';
    }
    */
    
    $mlid = menu_link_save($menu_link);
}


/**
 * Find a parent term and dept connected to it.
 */
function zp_commerce_findParentDeptByZPIDofTerm($term) {

  // If term_id provided instead of a term object, load an object.
  if (is_object($term)) {
    $term_tid = $term->tid;
  }
  else {
    $term_tid = $term;
  }
  //dpm($term);
  
  // Find parent term.
  $taxonomy_reference_term_field_for_catalog = 'catalog';
  $query = db_select('taxonomy_term_hierarchy', 'th');
  $query->fields('th', array('parent'))
        ->condition('tid', $term_tid);
  $query->leftJoin('field_data_field_' . $taxonomy_reference_term_field_for_catalog, 'tc', 'tc.field_' . $taxonomy_reference_term_field_for_catalog . "_tid = th.parent AND tc.bundle = 'department'");
  $query->fields('tc', array('entity_id'));
  $result = $query->execute()->fetchObject();
  
  dpm($result);
  
  return $result->entity_id;
}


/**
 * Find a dept connected by zp_id to a catalog term and assign this dept to this term via reference term field catalog voc.
 */
function zp_commerce_findDeptOrShopOrCityByZpIDofTerm_andConnectItToTerm($term) {

  
  //dpm($term);
  
  // If the $term->field_zp_id field is not loaded to the term object, load it now.
  if (!isset($term->field_zp_id)) {
    $term_short = $term;
    $term = taxonomy_term_load($term->tid);
    $term->parents = @$term_short->parents;
    $term->depth = @$term_short->depth;
  }
  
  // Term with empty zp_id - subgroup.
  if (empty($term->field_zp_id['und'][0]['value'])) {
    return NULL;
  }
  
  
  // Connect not only depts but also shops to corresponding catalog term.
  $object_type = 'department';
  if(!$object_nid = zp_misc_fieldRead_idByValue_single('zp_id', $term->field_zp_id['und'][0]['value'], 'node', $object_type)) {
    $object_type = 'shop';
    if(!$object_nid = zp_misc_fieldRead_idByValue_single('zp_id', $term->field_zp_id['und'][0]['value'], 'node', $object_type)) {
      $object_type = 'city';
      if(!$object_nid = zp_misc_fieldRead_idByValue_single('zp_id', $term->field_zp_id['und'][0]['value'], 'node', $object_type)) {
        return NULL;
      }
    }
  }

  // Connect or update the term to the node.
  zp_misc_fieldTermReferenceSave('catalog', $object_nid, $term->tid, 'node', $object_type);
  
  //dpm('$object_nid = ' . $object_nid);
  return $object_nid;
}


/**
 * Implements hook_node_delete().
 *
 */
function zp_commerce_node_delete($node) {
  
  static $catalog_voc;
  
  if ($node->type == 'department') {
    if (!$catalog_voc) {
      $catalog_voc = taxonomy_vocabulary_machine_name_load('catalog');
    }
    
    // After deletion of ant node, module Menu will delete it's menu link as well.
    // But it doesn't affect/correct taxonomy menu table to delete this menu link from there.
    // So we have to delete such an orphaned tid/mlid from the taxonomy menu table.
    
    // Find the catalog menu tid by the deleted node zp_id which is the same in corresponding term from the catalog menu.
    $term_tid = zp_misc_fieldRead_idByValue_single('zp_id', $node->field_zp_id['und'][0]['value'], 'taxonomy_term', 'catalog');
    // Delete the row with this tid from the taxonomy menu table.
    _taxonomy_menu_delete_item($catalog_voc->vid, $term_tid);
    
    // And now, as we, in fact, have a new term without a corresponding menu item, we create it, by calling taxonomy menu function...
    // It has to find any orphaned terms and create for them menu items.
    // 
    // But in our case, using our zp hook zp_commerce_taxonomy_menu_save we will set <nolink> for such menu items.
    // 
    //taxonomy_menu_rebuild($catalog_voc->vid);
    // Rebuild menu for only inserted items.
    taxonomy_menu_menu_links_insert($catalog_voc->vid);
    drupal_set_message('ZP. Taxonomy menu item for "' .  $node->title . '" has been updated to set empty item after the node ' . $node->nid . ' deletion!', 'warning');
  }
  
}







// -----------------------------------------------------------------
// SHIPPING


/**
 * Implements hook_commerce_shipping_method_info().
 */
function zp_commerce_commerce_shipping_method_info() {
  $shipping_methods = array();

  //$shipping_methods['example_shipping_method'] = array(
  $shipping_methods['zp_shipping_method'] = array(
    //'title' => t('Example shipping method'),
    'title' => t('ZP shipping method'),
    //'description' => t('Defines a single flat rate service with a couple of service details.'),
    'description' => t('Defines ZP shipping services with a couple of service details.'),
  );

  return $shipping_methods;
}

/**
 * Implements hook_commerce_shipping_service_info().
 */
function zp_commerce_commerce_shipping_service_info() {
  $shipping_services = array();

  //$shipping_services['example_shipping_service'] = array(
  $shipping_services['courier_shipping_service'] = array(
    'title' => t('Доставка курьером по городу'),
    'description' => t('Доставка курьером в пределах города'),
    //'display_title' => t('Shipping'),
    'display_title' => t('Доставка курьером по городу'),
    //'shipping_method' => 'example_shipping_method',
    'shipping_method' => 'zp_shipping_method',
    'price_component' => 'shipping',
    //'rules_component' => FALSE,
    'weight' => -100,
    'callbacks' => array(
      'rate' => 'zp_commerce_service_rate',
      'details_form' => 'zp_commerce_service_details_form',
      'details_form_validate' => 'zp_commerce_service_details_form_validate',
      'details_form_submit' => 'zp_commerce_service_details_form_submit',
    ),
  );

  return $shipping_services;
}

/**
 * Shipping service callback: returns a base price array for a shipping service
 * calculated for the given order.
 */
function zp_commerce_service_rate($shipping_service, $order) {
  //dpm($shipping_service);
  //dpm($order); 
  
  if ($order->commerce_order_total['und'][0]['data']['components'][0]['price']['amount'] < 10000) {
    $shipping_cost = 2000;
  }
  else {
    $shipping_cost = $order->commerce_order_total['und'][0]['data']['components'][0]['price']['amount']/10; // 10%
  }
  
  return array(
    'amount' => $shipping_cost,
    'currency_code' => $order->commerce_order_total['und'][0]['currency_code'],
    'data' => array(),
  );
}

/**
 * Shipping service callback: returns the example shipping service details form.
 */
function zp_commerce_service_details_form($pane_form, $pane_values, $checkout_pane, $order, $shipping_service) {
  $form = array();

  if ($order->commerce_order_total['und'][0]['data']['components'][0]['price']['amount'] < 10000) {
    //$shipping_cost = 2000;
    $descr = 'The order sum is less than ' . commerce_currency_format(10000, $order->commerce_order_total['und'][0]['currency_code']) . '. Shipping cost is ' . commerce_currency_format(2000, $order->commerce_order_total['und'][0]['currency_code']);
  }
  else {
    $shipping_cost = $order->commerce_order_total['und'][0]['data']['components'][0]['price']['amount']/10; // 10%
    $descr = 'Shipping cost is ' . commerce_currency_format($shipping_cost, $order->commerce_order_total['und'][0]['currency_code']) . ' (10% from the total order sum of ' . commerce_currency_format($order->commerce_order_total['und'][0]['data']['components'][0]['price']['amount'], $order->commerce_order_total['und'][0]['currency_code']) . ')';
  }
  
  $pane_values['service_details'] += array(
    //'name' => 'xxx',
    'descr' => $descr,
    'express' => 1,
  );

  $form['descr'] = array(
    '#markup' => '<div class="description">' . $descr . '</div>',
  );
  
//  $form['name'] = array(
//    '#type' => 'textfield',
//    '#title' => t('Name'),
//    '#description' => t('This is a demonstration field coded to fail validation for single character values.'),
//    '#default_value' => $pane_values['service_details']['name'],
//    '#required' => TRUE,
//  );

  $form['express'] = array(
    '#type' => 'checkbox',
    '#title' => t('Экспресс доставка'),
    '#description' => t('Быстрая доставка (costs an additional ' . commerce_currency_format(1500, $order->commerce_order_total['und'][0]['currency_code']) .')'),
    '#default_value' => $pane_values['service_details']['express'],
  );

  return $form;
}

/**
 * Shipping service callback: validates the example shipping service details.
 */
function zp_commerce_service_details_form_validate($details_form, $details_values, $shipping_service, $order, $form_parents) {
//dpm($details_values);
//  if (strlen($details_values['name']) < 2) {
//    form_set_error(implode('][', array_merge($form_parents, array('name'))), t('You must enter a name two or more characters long.'));
//
//    // Even though the form error is enough to stop the submission of the form,
//    // it's not enough to stop it from a Commerce standpoint because of the
//    // combined validation / submission going on per-pane in the checkout form.
//    return FALSE;
//  }
}

/**
 * Shipping service callback: increases the shipping line item's unit price if
 * express delivery was selected.
 */
function zp_commerce_service_details_form_submit($details_form, $details_values, $line_item) {
  //dpm($line_item);
  if ($details_values['express']) {
    $line_item_wrapper = entity_metadata_wrapper('commerce_line_item', $line_item);

    // Build a price array for the express delivery fee.
    $express_price = array(
      'amount' => 1500,
      'currency_code' => $line_item_wrapper->commerce_unit_price->currency_code->value(), //'UAH',
      'data' => array(),
    );

    // Add the express upcharge to the line item unit price.
    $line_item_wrapper->commerce_unit_price->amount = $line_item_wrapper->commerce_unit_price->amount->value() + 1500;

    // Add the express delivery fee component to the unit price.
    $line_item_wrapper->commerce_unit_price->data = commerce_price_component_add(
      $line_item_wrapper->commerce_unit_price->value(),
      'example_shipping_service_express',
      $express_price,
      TRUE,
      FALSE
    );
  }
}

/**
 * Implements hook_commerce_price_component_type_info().
 */
function zp_commerce_commerce_price_component_type_info() {
  return array(
    'example_shipping_service_express' => array(
      //'title' => t('Express delivery'),
      'title' => t('Быстраяяяя доставка'),
      'weight' => 50,
    ),
  );
}














// --------------------------------------------------------------------
/**
 * Module to allow for decimal quantities of products.
 * 
 * Based mainly on the module commerce_decimal_quantities
 * 
 * Difference - allow decimal to any product with custom ZP field_qmeasure to be not empty and not contain 'item' or 'шт'.
 * Redundant code is commented out.
 * 
 * Also add quantity measure to line item manager (it's where orders can be edited manually by admins) quaintity fields.
 * 
 */
// ---------------------------


/**
 * Implements hook_form_ID_alter().
 * 
 * isn't needed for zp_commerce module.
 * 
 * Provides a checkbox on the Product type edit form to allow decimal quantities.
 */
//function zp_commerce_decimal_quantities_form_commerce_product_ui_product_type_form_alter(&$form, &$form_state) {
//  ctools_include('export');
//  $preset = ctools_export_crud_load('zp_commerce_decimal_quantities', $form_state['product_type']['type']);
//  if (is_object($preset) && isset($preset->allow_decimal)) {
//    $default = $preset->allow_decimal;
//  }
//  else {
//    $default = FALSE;
//  }
//  $form['product_type']['decimal'] = array(
//    '#type' => 'checkbox',
//    '#title' => t('Allow decimal quantities'),
//    '#default_value' => $default,
//    '#description' => t('Check this box if you want to allow the user to buy non-integer quantities from this product.'),
//    '#element_validate' => array('zp_commerce_decimal_quantities_checkbox_validate'),
//  );
//}


/**
 * Element validation callback for the decimal checkbox.
 * 
 * isn't needed for zp_commerce module.
 */
//function  zp_commerce_decimal_quantities_checkbox_validate($element, &$form_state, $form) {
//  ctools_include('export');
//  $preset = ctools_export_crud_load('zp_commerce_decimal_quantities', $form_state['product_type']['type']);
//  $decimal_setting = empty($preset) ? ctools_export_crud_new('zp_commerce_decimal_quantities') : $preset;
//  $decimal_setting->allow_decimal = $element['#value'];
//  // Product creation or update
//  $decimal_setting->product_type = empty($form_state['product_type']['type']) ? $form_state['values']['product_type']['type'] : $form_state['product_type']['type'];
//
//  ctools_export_crud_save('zp_commerce_decimal_quantities', $decimal_setting);
//}


/**
 * Implements hook_ctooks_plugin_api().
 * 
 * isn't needed for zp_commerce module.
 */
//function zp_commerce_decimal_quantities_ctools_plugin_api($owner, $api) {
//  if ($owner == 'zp_commerce_decimal_quantities' && $api == 'default_zp_commerce_decimal_quantities_presets') {
//    return array('version' => 1);
//  }
//}


/**
 * Implements hook_commerce_product_type_delete().
 * 
 * isn't needed for zp_commerce module.
 */
//function zp_commerce_decimal_quantities_commerce_product_type_delete($product_type, $skip_reset) {
//  ctools_include('export');
//  ctools_export_crud_delete('zp_commerce_decimal_quantities', $product_type['type']);
//}


/**
 * Implements hook_form_FORM_ID_alter().
 * 
 * implemented earlier.
 * 
 * Hack the Add to cart form to accept fractional quantities if the product type allows it.
 */
//function zp_commerce_form_commerce_cart_add_to_cart_form_alter(&$form, &$form_state) {
//  //ctools_include('export');
//  if (isset($form_state['default_product'])) {
//    
//    //dpm('$form_state');
//    //dpm($form_state);
//    // a4s fix 1. Allow decimal anly for non empty and non items/шт. qmeasure for each specified product.
//    $field_qmeasure = $form_state['default_product']->field_qmeasure['und'][0]['value'];
//    if (!$field_qmeasure || strpos($field_qmeasure, 'шт') !== FALSE || strpos($field_qmeasure, 'item') !== FALSE) {
//      return;
//    }
//    
////    $preset = ctools_export_crud_load('zp_commerce_decimal_quantities', $form_state['default_product']->type);
////    if (is_object($preset) && $preset->allow_decimal) 
//    {
//      $form['quantity']['#datatype'] = 'decimal';
//    }
//  }
//}


/**
 * Implements hook_form_alter().
 * 
 * implemented earlier.
 *
 * Hack quantity form in each view to accept fractional quantities
 * if the product type allows it.
 */
//function zp_commerce_form_alter(&$form, &$form_state, $form_id) {
//  if (isset($form['edit_quantity'])) {
//    zp_commerce_decimal_quantities_update_views_edit_quantity($form, $form_state);
//  }
//}


/**
 * Helper function for calling from the function zp_commerce_form_alter(&$form, &$form_state, $form_id).
 */
function zp_commerce_update_views_edit_quantity(&$form, &$form_state) {
  foreach (element_children($form['edit_quantity']) as $child) {
    if (isset($form['edit_quantity'][$child]['#line_item_id'])) {
      $line_item = commerce_line_item_load($form['edit_quantity'][$child]['#line_item_id']);
      $product = commerce_product_load($line_item->commerce_product[LANGUAGE_NONE][0]['product_id']);

      //dpm('$product');
      //dpm($product);
      // a4s fix 2. Allow decimal only for non empty and non items/шт. qmeasure for each specified product.
      $field_qmeasure = $product->field_qmeasure['und'][0]['value'];
      if (!$field_qmeasure || strpos($field_qmeasure, 'шт') !== FALSE || strpos($field_qmeasure, 'item') !== FALSE) {
        return;
      }
      
//      ctools_include('export');
//      // Get the decimal quantities setting for this product type
//      $preset = ctools_export_crud_load('zp_commerce_decimal_quantities', $product->type);
//      if (is_object($preset) && $preset->allow_decimal) 
        {
        $form['edit_quantity'][$child]['#datatype'] = 'decimal';
        $form['edit_quantity'][$child]['#default_value'] = $line_item->quantity;
      }
    }
  }
}


/**
 * Implements hook_field_widget_form_alter().
 */
function zp_commerce_field_widget_form_alter(&$element, &$form_state, $context) {
  // Only proceed if this widget form is a commerce line item manager and there
  // are line items to modify.
  if ($context['instance']['widget']['type'] === 'commerce_line_item_manager' and isset($element['line_items'])) {
    // Loop through each item in the array.
    foreach ($element['line_items'] as $delta => $line_item) {
      $line_item_wrapper = entity_metadata_wrapper('commerce_line_item', $line_item['line_item']['#value']);
      if (isset($line_item_wrapper->commerce_product)) {

        //dpm('$line_item_wrapper->commerce_product->field_qmeasure->value()');
        //dpm($line_item_wrapper->commerce_product->field_qmeasure->value());
        // a4s fix 3. Allow decimal anly for non empty and non items/шт. qmeasure for each specified product.
        //dpm($line_item);
        $field_qmeasure = $line_item_wrapper->commerce_product->field_qmeasure->value();
        $element['line_items'][$delta]['quantity']['#suffix'] = '<div class="qmeasure">' . $field_qmeasure . '</div>';
        if (!$field_qmeasure || strpos($field_qmeasure, 'шт') !== FALSE || strpos($field_qmeasure, 'item') !== FALSE) {
          continue;
        }

        
//        // If the product referenced in the line item accepts decimals...
//        ctools_include('export');
//        $preset = ctools_export_crud_load('zp_commerce_decimal_quantities', $line_item_wrapper->commerce_product->type->value());
//        if (is_object($preset) && isset($preset->allow_decimal)) 
        {
          // Set that line item quantity datatype to decimal.
          $element['line_items'][$delta]['quantity']['#datatype'] = 'decimal';
          $element['line_items'][$delta]['quantity']['#default_value'] = $line_item_wrapper->quantity->value();
          $element['line_items'][$delta]['quantity']['#size'] = 7;
          $element['line_items'][$delta]['quantity']['#maxlength'] = 7;
        }
      }
    }
  }
}



/**
 * Allows for alterations to the searcher definitions.
 *
 * @param array &$searcher_info
 *   The return values of hook_facetapi_searcher_info() implementations.
 *
 * @see hook_facetapi_searcher_info()
 */
function zp_commerce_facetapi_searcher_info_alter(array &$searcher_info) {
  //$searcher_info['search']['label'] = t('Core search module');
  //dpm($searcher_info);
}



/**
 * Allows for alterations to the realm definitions.
 *
 * @param array &$realm_info
 *   The return values of hook_facetapi_realm_info() implementations.
 *
 * @see hook_facetapi_realm_info()
 */
function zp_commerce_facetapi_realm_info_alter(array &$realm_info) {
  //$realm_info['block']['weight'] = 5;
  
  
  //dpm($realm_info);
  /*
  ... (Array, 1 element)
      block (Array, 8 elements)
          label (String, 6 characters ) Blocks
          weight (Integer) -10
          sortable (Boolean) FALSE
          default widget (String, 14 characters ) facetapi_links
          element type (String, 5 characters ) links
          description (String, 185 characters ) The <em>Blocks</em> realm displays each facet i...
              The <em>Blocks</em> realm displays each facet in a separate <a href="/admin/structure/block?destination=node">block</a>. Users are able to refine their searches in a drill-down fashion.
          name (String, 5 characters ) block
          settings callback (Boolean) FALSE
  
  */
  
// Doesnt work?  
//  $realm_info['block']['default widget'] = 'facetapi_checkbox_links';
}



/**
 * Allows for alterations to the facet definitions.
 *
 * @param array &$facet_info
 *   The return values of hook_facetapi_facet_info() implementations.
 * @param array $searcher_info
 *   The definition of the searcher that facets are being collected for.
 *
 * @see hook_facetapi_facet_info()
 */
function zp_commerce_facetapi_facet_info_alter(array &$facet_info, array $searcher_info) {
  
  // Change the author index field for Apache Solr searchers indexing node data.
//  if ('apachesolr' == $searcher_info['adapter'] && isset($searcher_info['types']['node'])) {
//    $facet_info['author']['field'] = 'is_uid';
//  }
  
  
  //dpm($facet_info); 
  
  /*
  type (Array, 24 elements)
title (Array, 24 elements)
status (Array, 24 elements)
changed (Array, 24 elements)
field_zp_id (Array, 24 elements)
field_parent_zp_id (Array, 24 elements)
field_visibility_status (Array, 24 elements)
field_display_type (Array, 24 elements)
field_brand (Array, 24 elements)
        label (String, 5 characters ) Brand
        description (String, 16 characters ) Filter by Brand.
        allowed operators (Array, 2 elements)
        dependency plugins (Array, 3 elements)
        facet missing allowed (Boolean) TRUE
        facet mincount allowed (Boolean) TRUE
        map callback (String, 38 characters ) search_api_facetapi_facet_map_callback | (Callback) search_api_facetapi_facet_map_callback();
        map options (Array, 4 elements)
        field type (String, 6 characters ) string
        field api name (String, 11 characters ) field_brand
        name (String, 11 characters ) field_brand
        field (String, 11 characters ) field_brand
        field alias (String, 11 characters ) field_brand
        field api bundles (Array, 0 elements)
        query types (Array, 1 element)
        alter callbacks (Array, 0 elements)
        default widget (String, 5 characters ) links
        weight (Integer) 0
        hierarchy callback (Boolean) FALSE
        values callback (Boolean) FALSE
        min callback (Boolean) FALSE
        max callback (Boolean) FALSE
        default sorts (Array, 3 elements)
        type (Integer) 0
search_api_language (Array, 24 elements)
field_product_commerce_price_amount_decimal_asc (Array, 25 elements)
field_product_commerce_price_amount_decimal_desc (Array, 25 elements)
body:value (Array, 24 elements)
body:summary (Array, 24 elements)
field_product:status (Array, 24 elements)
field_product:changed (Array, 24 elements)
field_product:field_artikul_shop (Array, 24 elements)
field_product:field_bar (Array, 24 elements)
field_category_main:name (Array, 24 elements)
field_category_main:parent (Array, 25 elements)
field_categories_other:name (Array, 24 elements)
field_categories_other:parent (Array, 25 elements)
field_product:commerce_price:amount (Array, 24 elements)
field_product:commerce_price:amount_decimal (Array, 24 elements)
  
  
  */
  
  
  
  
  
  // Title of items that dont fall up to the shown
  // Works
  foreach ($facet_info as $key => $value) {
    if (isset($value['map options'])) {
      $facet_info[$key]['map options']['missing label'] = 'Прочее';
    }
  }
//  $facet_info['field_brand']['map options']['missing label'] = 'Прочее';
//  $facet_info['field_category_main']['map options']['missing label'] = 'Прочее';
//  $facet_info['field_categories_other']['map options']['missing label'] = 'Прочее';
    
  // Work, but we don't use it here.
  //$facet_info['field_brand']['map callback'] = 'zp_commerce_search_api_facetapi_facet_map_callback';
  
  // Doesnt work
  //$facet_info['field_brand']['default widget'] = 'links';
  //$facet_info['field_brand']['default widget'] = 'facetapi_links'; // 'facetapi_checkbox_links'
  
}


/**
 * NOT USED NOW
 * 
 * a4s
 * 
 * may be set in hook function zp_commerce_facetapi_facet_info_alter(), see above
 * 
 * altered function search_api_facetapi_facet_map_callback(array $values, array $options = array()) {
 * 
 * Map callback for all search_api facet fields.
 *
 * @param array $values
 *   The values to map.
 * @param array $options
 *   An associative array containing:
 *   - field: Field information, as stored in the index, but with an additional
 *     "key" property set to the field's internal name.
 *   - index id: The machine name of the index for this facet.
 *   - map callback: (optional) A callback that will be called at the beginning,
 *     which allows initial mapping of filters. Only values not mapped by that
 *     callback will be processed by this method.
 *   - value callback: A callback used to map single values and the limits of
 *     ranges. The signature is the same as for this function, but all values
 *     will be single values.
 *   - missing label: (optional) The label used for the "missing" facet.
 *
 * @return array
 *   An array mapping raw filter values to their labels.
 */
/*
function zp_commerce_search_api_facetapi_facet_map_callback(array $values, array $options = array()) {
  //dpm($values);
  $map = array();
  // See if we have an additional map callback.
  if (isset($options['map callback']) && is_callable($options['map callback'])) {
    $map = call_user_func($options['map callback'], $values, $options);
  }

  // Then look at all unmapped values and save information for them.
  $mappable_values = array();
  $ranges = array();
  foreach ($values as $value) {
    $value = (string) $value;
    if (isset($map[$value])) {
      continue;
    }
    if ($value == '!') {
      // The "missing" filter is usually always the same, but we allow an easy
      // override via the "missing label" map option.
      $map['!'] = isset($options['missing label']) ? $options['missing label'] : '(' . t('none+++') . ')';
      continue;
    }
    $length = strlen($value);
    if ($length > 5 && $value[0] == '[' && $value[$length - 1] == ']' && ($pos = strpos($value, ' TO '))) {
      // This is a range filter.
      $lower = trim(substr($value, 1, $pos));
      $upper = trim(substr($value, $pos + 4, -1));
      if ($lower != '*') {
        $mappable_values[$lower] = TRUE;
      }
      if ($upper != '*') {
        $mappable_values[$upper] = TRUE;
      }
      $ranges[$value] = array(
        'lower' => $lower,
        'upper' => $upper,
      );
    }
    else {
      // A normal, single-value filter.
      $mappable_values[$value] = TRUE;
    }
  }

  if ($mappable_values) {
    $map += call_user_func($options['value callback'], array_keys($mappable_values), $options);
  }

  foreach ($ranges as $value => $range) {
    $lower = isset($map[$range['lower']]) ? $map[$range['lower']] : $range['lower'];
    $upper = isset($map[$range['upper']]) ? $map[$range['upper']] : $range['upper'];
    if ($lower == '*' && $upper == '*') {
      $map[$value] =  t('any');
    }
    elseif ($lower == '*') {
      $map[$value] = "< $upper";
    }
    elseif ($upper == '*') {
      $map[$value] = "> $lower";
    }
    else {
      $map[$value] = "$lower – $upper";
    }
  }

  //dpm($map);
  
  return $map;
  
}
*/


/**
 * Allows for alterations of the facets on the fly, without caching.
 *
 * @param array &$enabled_facets
 *   The return facets, which enabled for current search.
 * @param $searcher
 *   The machine readable name of the searcher.
 * @param $realm_name
 *   The machine readable name of the realm.
 */
function zp_commerce_facetapi_enabled_facets_alter(array &$enabled_facets, $searcher, $realm_name) {
//  if ($searcher == 'something') {
//    // Put facet1 to the end.
//    if (!empty($enabled_facets['facet1'])) {
//      $facet1 = $enabled_facets['facet1'];
//      unset($enabled_facets['facet1']);
//      $enabled_facets['facet1'] = $facet1;
//    }
//  }
  
  
  
  
  
  
  //dpm($enabled_facets);
  /*
  
  ... (Array, 4 elements)
field_brand (Array, 24 elements)
    label (String, 5 characters ) Brand
    description (String, 16 characters ) Filter by Brand.
    allowed operators (Array, 2 elements)
    dependency plugins (Array, 3 elements)
    facet missing allowed (Boolean) TRUE
    facet mincount allowed (Boolean) TRUE
    map callback (String, 38 characters ) search_api_facetapi_facet_map_callback | (Callback) search_api_facetapi_facet_map_callback();
    map options (Array, 3 elements)
    field type (String, 6 characters ) string
    field api name (String, 11 characters ) field_brand
    name (String, 11 characters ) field_brand
    field (String, 11 characters ) field_brand
    field alias (String, 11 characters ) field_brand
    field api bundles (Array, 0 elements)
    query types (Array, 1 element)
    alter callbacks (Array, 0 elements)
    default widget (Boolean) FALSE
    weight (Integer) 0
    hierarchy callback (Boolean) FALSE
    values callback (Boolean) FALSE
    min callback (Boolean) FALSE
    max callback (Boolean) FALSE
    default sorts (Array, 3 elements)
    type (Integer) 0
field_category_main:name (Array, 24 elements)
field_categories_other:name (Array, 24 elements)
field_product:commerce_price:amount_decimal (Array, 24 elements)
   * 
  */
}



/**
 * 
 * 1. Move 'Other' to the end of an options list.
 * 2. Set titles for categories facets subgroups.
 * 
 * Should be installed the module Facet API Bonus
 * 
 * 
 * Filter "Rewrite Items": Filter plugin to rewrite labels or other data of the facet items by implementing a new dedicated hook_facet_items_alter (in a structured array, before rendering). Very handy to rewrite list field values or totally custom encoded facet values for user friendly output.
 * 
 * @param type $build
 * @param type $settings
 * 
 * 
 */
function zp_commerce_facet_items_alter(&$build, &$settings) {
//  if ($settings->facet == "YOUR_FACET_NAME") {
    foreach($build as $key => $item) {
      $build[$key]["#markup"] = drupal_strtoupper($item["#markup"]);
    }
//  }
  
//  if (!empty($build['!']['#markup'])) {
//    $build['!']['#markup'] = 'Other';
//  }
  //$settings->settings['widget'] = 'facetapi_links';
  //dpm($build);
  //dpm($settings);
  
  if ($settings->facet == 'field_brand') {
    
    /*
    $item = $build['spar'];
    unset($build['spar']);
    $build['spar'] = $item;
    $build['spar']['#markup'] = '<div class="tag-title" style="display: none;">Tag title 1</div>' . $build['spar']['#markup'];
    $build['spar']['#html'] = TRUE;

//    $build['spar--xxx'] = $item;
//    $build['spar--xxx']['#markup'] = 'spar--xxx';
    
//    $build['tag_1'] = array(
//        '#markup' => 'Tag 1',
//        '#path' => NULL,
//        '#html' => FALSE,
//        '#indexed_value' => '',
//        '#count' => 0,
//        '#active' => 0,
//        '#item_parents' => NULL,
//        '#item_children' => NULL,
//        '#query' => NULL,
//    );
    */
    
    // Move 'Other' to the end of an options list.
    if ($other = @$build['!']) {
      unset($build['!']);
      $build['!'] = $other;
      $build['!']['#html'] = TRUE;
      $build['!']['#markup'] = '<div class="cat-other" style="color: red;">' . $build['!']['#markup'] . '</div>';
    }

  } // End of if ($settings->facet == 'field_brand') {
  elseif ($settings->facet == 'field_category_main' || $settings->facet == 'field_categories_other') {
    
    // 1. Move 'Other' to the end of an options list.
    // 2. Set titles for categories facets subgroups.
    
    if(!$tids = array_keys($build)) {
      return;
    }
    
    if ($tid_other = array_search ( '!', $tids)) {
      unset($tids[$tid_other]);
    }
    
    $query = db_select('taxonomy_term_hierarchy', 'th');
    $query->condition('th.tid', $tids, 'IN');
    $query->leftJoin('taxonomy_term_data', 'td', "td.tid = th.parent");
    $query->fields('th', array('tid'));
    $query->addField('td', 'name', 'category');
    
    $categories = $query->execute()->fetchAllKeyed();
    //dpm($categories);
    
    natcasesort($categories);
            
    $new_build = array();
    foreach ($categories as $tid => $category) {
      $new_build[$category][$tid] = $build[$tid];
    }
    
    //dpm($new_build);
    
    foreach ($new_build as $category => $category_array) {
      uasort($new_build[$category], 'zp_commerce_sortArrayBuildByCatName');
      
      $count = 0;
      foreach ($new_build[$category] as $tid => $data) {
        $data['#markup'] = ($count++ == 0 ? '<div class="cat-name" style="display: none">' . $category . '</div>' : '') . $data['#markup'];
        $data['#html'] = TRUE;
        $result_build[$tid] = $data;
      }
    } // End of foreach ($new_build as $category => $category_array) {
    
    if (@$result_build) {
      if ($tid_other) {
        // Put back the "Other" item.
        $result_build['!'] = $build['!'];
        $result_build['!']['#html'] = TRUE;
        $result_build['!']['#markup'] = '<div class="cat-other" style="color: red;">' . $result_build['!']['#markup'] . '</div>';
      }
      $build = $result_build;

      static $cat_name_js_is_loaded;
      if (!$cat_name_js_is_loaded) {
        $path_to_js = drupal_get_path('module', 'zp_commerce') . '/js/zp_commerce_setFacetCategories.js';
        drupal_add_js($path_to_js);
        $cat_name_js_is_loaded = TRUE;
      }

    } // End of if (@$result_build) {
    
  } // End of elseif ($settings->facet == 'field_category_main' || $settings->facet == 'field_categories_other') {
    
} // End of function zp_commerce_facet_items_alter(&$build, &$settings) {



/**
 * Helper function for sorting providers by erating with uasort function.
 * 
 * Example of using:
 * 
 * uasort($array_with_elements_contained_key_name, 'gv_misc_sortArrayBlockedIPsByCountyAmount');
 */
function zp_commerce_sortArrayBuildByCatName($a, $b) {
  
  if ($a['#count'] == $b['#count']) {
      return 0;
  }
  return ($a['#count'] > $b['#count']) ? -1 : 1;
}


function zp_commerce_block_view_alter(&$data, $block) {
  
  if (!empty($block->info) && (strpos($block->info, 'zp_hidden_facet_block') !== FALSE) )
  {            
    //dpm($data);
    //dpm($block);
    //dpm('Unsetted ' . $block->info);
    unset($data['content']);
  }
  
}


/** 
 * Implements hook_theme_registry_alter 
 */ 
function zp_commerce_theme_registry_alter(&$theme_registry) { 
  
//  $theme_registry['theme_name']['theme path'] = 'path/to/your/module'; 
//  $theme_registry['theme_name']['function'] = 'mymodule_function_name'; 
  
  $theme_registry['facetapi_title']['theme path'] = 'sites/all/modules/_ZP/zp_commerce'; 
  $theme_registry['facetapi_title']['function'] = 'zp_commerce_facetapi_title'; 
  //dpm($theme_registry);
}


/**
 *
 * Works!
 * 
 * Overrides
 * 
 * function hook_facetapi_title($variables)
 * 
 * From facetapi.theme.inc
 * 
 * @param type $variables
 * @return type
 * 
 * 
 */
function zp_commerce_facetapi_title($variables) {
  return t('---> Filter by @title:', array('@title' => drupal_strtolower($variables['title'])));
  
  //dpm($variables);
}

/**
 * Returns HTML for the active facet item's count.
 *
 * @param $variables
 *   An associative array containing:
 *   - count: The item's facet count.
 *
 * @ingroup themeable
 */
//function theme_facetapi_count($variables) {
//  return '(' . (int) $variables['count'] . ')';
//}
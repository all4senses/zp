<?php

/**
 * @file
 * Module for building and managing site's pages.
 */

/**
 * Constants for ratins titles, etc.
 */
module_load_include('inc', 'zp_misc', 'inc/constants');

/**
 * Implements hook_menu().
 */
function zp_pages_menu() {
  

  $items['admin/content/import-price'] = array(
    'title' => 'Import a price',
    'description' => 'Импорт прайс-листа',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('zp_pages_importPrices_form'),
    'access callback' => 'zp_misc_userIsAdmin',
    'type' => MENU_NORMAL_ITEM,
  );
  
  return $items;
}


/**
 * Implements hook_custom_theme().
 * 
 * http://drupal.stackexchange.com/questions/812/how-do-i-change-a-theme-based-on-the-url
 */  
function zp_pages_custom_theme() {
  $args = arg();
  //dpm($args);
  if ($args[0] == 'admin' && @$args[2] == 'products' && !empty($args[3]) && empty($args[4])) {
    return 'zp';
  }
}


/**
 * Implements hook_form_alter().
 *
 * @param array &$form
 *   Array with declared form.
 *
 * @param array &$form_state
 *   Array with current form state.
 *
 * @param string $form_id
 *   Form ID.
 *
 * @return void
 *   Return nothing.
 */
function zp_pages_form_alter(&$form, &$form_state, $form_id) {
  
  //dpm($form_id);  dpm($form);
  // $conf['locale_custom_strings_en']['old string'] = 'new string'
  
  switch ($form_id) {
    /*
    case 'taxonomy_form_term':
      //dpm($form);

      // Restore the Metatag fields data.
      $query = db_select('metatag', 'm');
      $query->fields('m', array('data'))
            ->condition('entity_type', 'taxonomy_term')
            ->condition('entity_id', $form['#term']['tid']); 
      $metatags = $query->execute()->fetchField(); 
      if ($metatags) {
        $metatags = unserialize($metatags);
        foreach ($metatags as $key => $value) {
          $form['metatags'][$key]['value']['#default_value'] = $value['value'];
        }
      }
      break;
      */
    
    
    
    case 'shop_node_form':
      
      $extra_data = unserialize($form['field_extra_data']['und'][0]['value']['#default_value']);
      $form['field_extra_data']['#access'] = FALSE;
      
      $form['extra_data'] = array(
        '#type' => 'fieldset',
        '#title' => 'ZP Extra data',
        '#collapsible' => TRUE,
        '#collapsed' => FALSE,
        '#tree' => TRUE,
      );
      $form['extra_data']['address'] = array(
        '#type' => 'textfield',
        '#title' => t('Address'),
        '#default_value' => @$extra_data['address'],
      );
      
      $form['#validate'][] = 'zp_pages_validateForm_shop';
      
      break;
    
    
    
    case 'product_a_node_form':
      //dpm($form);
      
      break;
    
    
    case 'user_login_block':
    case 'user_login':
      
      // Disable login for disabled users
      $form['#validate'][] = 'zp_pages_validateForm_disableUserLoginForDisabled';
                
      break;
    
    
    
    
    
    case 'news_post_node_form':
    case 'blog_post_node_form':
    case 'article_node_form':
           
      
        
        $form['#validate'][] = 'zp_pages_validateForm_article';
                
      break;
    
    
    
    
    
    
    case 'user_profile_form':
      dpm('user');
      // Disallow edit own profile for a Guest user.
      global $user;
      if($user->name == 'guest') {
        drupal_goto('');
      }
      
      $form['field_u_bio']['und'][0]['#format'] = 'full_html';
      
      break;
      
      
      
    
    
  
       
    case 'preface_node_form':
      
      // Hide some options for all.
      ////$form['comment_settings']['#access'] = FALSE;
      $form['revision_information']['#access'] = FALSE;
      
      // And leave some options for the root.
      global $user;
      if ($user->uid != 1) {
        $form['field_preface_key']['#access'] = FALSE;
      }
      if (!in_array('administrator', $user->roles)) {
        // Deny to change the status of the node (it should always be unpublished).
        $form['options']['#access'] = FALSE;
        // Hide url aliasing options.
        $form['path']['#access'] = FALSE;
      }
      
      
      // Connect Ckeditor for additional fields.
      
      //$form['body']['und'][0]['#format'] = 'zp_full_html'; // link
      //$form['body']['und'][0]['#format'] = 'filtered_html'; // unlink
      $keys = element_children($form['field_preface_bottom']['und']);
      foreach ($keys as $key) {
        $form['field_preface_bottom']['und'][$key]['field_preface_b_body']['und'][0]['#format'] = 'full_html'; // link Ckeditor
      }
      
    break; // End of case 'preface_node_form':

  
    
  } // End of switch ($form_id) {
  
  
  // Add a Save Draft button.
  switch ($form_id) {
    
    case 'news_post_node_form':
    case 'blog_post_node_form':
    case 'article_node_form':
      
        $form['actions']['save_draft'] = array(
          '#type' => 'submit',
          '#value' => 'Save Draft',
          '#submit' => array('node_form_submit'),
          '#weight' => 6,
        );
      
        $form['#submit'][] = 'zp_pages_submitForm_saveDraft';
        
        break;
      
  } // End of switch ($form_id) { // Save Draft button
  
}


/**
 * Disable user login for disabled users.
 *
 * @param array &$form
 *   Array with declared form.
 *
 * @param array &$form_state
 *   Array with current form state.

 * @return void
 *   Return nothing.
 */
function zp_pages_validateForm_disableUserLoginForDisabled(&$form, &$form_state) {
    
  if (!empty($form_state['uid']) && $u = user_load($form_state['uid'])) {
    if (in_array('disabled', $u->roles)) {
      form_set_error('name',t('Sorry, but Your account is blocked. Please contact administrator to unblock it.'));
    }
  }
}


/**
 * Custom validate of shop type form.
 *
 * @param array &$form
 *   Array with declared form.
 *
 * @param array &$form_state
 *   Array with current form state.

 * @return void
 *   Return nothing.
 */
function zp_pages_validateForm_shop(&$form, &$form_state) {
  dpm($form_state['values']);
  form_set_value($form['field_extra_data'], array('und' => array(0 => array('value' => serialize($form_state['values']['extra_data']), 'format' => 'full_html') )), $form_state);
}


/**
 * Custom validate of article type form.
 *
 * @param array &$form
 *   Array with declared form.
 *
 * @param array &$form_state
 *   Array with current form state.

 * @return void
 *   Return nothing.
 */
function zp_pages_validateForm_article(&$form, &$form_state) {
}


/**
 * Custom validate of article type form.
 *
 * @param array &$form
 *   Array with declared form.
 *
 * @param array &$form_state
 *   Array with current form state.

 * @return void
 *   Return nothing.
 */
function zp_pages_submitForm_saveDraft(&$form, &$form_state) {
      
  if ($form_state['values']['op'] == 'Save' && @$form_state['build_info']['args'][0]->status == 0) {
    // NOT publish ---> Publish
    //drupal_set_message('NOT publish ---> Publish', 'warning');

    $form_state['values']['status'] = 1;
    drupal_set_message(t('This article is now published!'), 'warning');
    $status_changed = TRUE;
  }
  elseif (($form_state['values']['op'] == 'Save Draft' ||  $form_state['values']['status'] == 0) && @$form_state['build_info']['args'][0]->status == 1) {
    // Publish ---> NOT publish
    //drupal_set_message('Publish ---> NOT publish', 'warning');

    $form_state['values']['status'] = 0;
    drupal_set_message(t('Attention! This article is saved as draft and is not published now!'), 'warning');
    $status_changed = TRUE;
  }
  elseif (!$form_state['values']['nid'] || @$form_state['build_info']['args'][0]->field_show_in_block['und'][0]['value'] != @$form_state['values']['field_show_in_block']['und'][0]['value'] || $form_state['values']['op'] == 'Delete') {
    $status_changed = TRUE;
  }
  else {
    $status_changed = FALSE;
  }
  
  /*
  //if ($status_changed) 
  {
    // Clear the views cache.
    //drupal_flush_all_caches(); // This would clear a Boost cache as well, but we have a Boost Expire module that do it itself.
    // So we clear here only a views caches.
    cache_clear_all('*', 'cache_views', TRUE);
    cache_clear_all('*', 'cache_views_data', TRUE);
    drupal_set_message(t('A cache has been flushed.'), 'warning');
  }
  */
}


/**
 * Implements hook_node_view().
 *
 * @return void
 *   Return nothing.
 */
function zp_pages_node_view($node, $view_mode) {

  switch ($node->type) {
    
    
    case 'product_a':
      
      if ($view_mode != 'full') {
        return;
      }

      
      // Doesn't work to hide a price, because this is inside of processed add_to_cart form which doesn't have a price.
      //$node->content['field_product']['line_item_fields']['commerce_unit_price']['#processes'] = TRUE;
      // So on this stage there is no price field
      // But we can hide the dproduct (add_to_cart) field with the button. The price will remain in place as it, seems, will be rendered later.
      // unset($node->content['field_product']);
      // For hiding a price we'll be using hook_commerce_entity_view_alter  => zp_commerce_entity_view_alter(&$build, $type)
      // 
      //dpm($node);
      zp_pages_setZpBreadcrumb($node);

      
      break;
    
      
      
      
    case 'department':
      
      if ($view_mode == 'full') {
        $node->zp_template_data = zp_pages_buildDeptPage($node);
      }
      
      break;
    
    
    case 'preface':
      
      $preface_key = @$node->field_preface_key['und'][0]['value'];
      
      // Disable ?page* links for /sitemap.
      if (@$_SERVER['REDIRECT_URL'] == '/sitemap' && $_SERVER['REQUEST_URI'] != '/sitemap') {
        zp_misc_drupal_not_found();
        drupal_exit();
      }
      
      
      // Set metatags from the preface to a page where the preface is placed
      // Except of the front page, where it can be set via admin interface of the Metatags.
      // AND except of published prefaces, because thier metatags will be pulled automatically!

      if (isset($node->metatags) && count($node->metatags) && !$node->status) {
        foreach($node->metatags as $metatag_title => $metatag_data) {

          zp_misc_addMetatag($metatag_title, $metatag_data['value']);

        }
    
      }
        
      
    break; // End of Preface
    
  } // End of switch ($node->type) {
  
  if ($view_mode == 'full') {
    zp_misc_addSocialShareData_toPage($node);
  }
}



function zp_pages_setZpBreadcrumb($node) {

  if ($node->type == 'product_a') {
    
    $shop_zp_id = drupal_substr($node->field_parent_zp_id['und'][0]['value'], 0, 2);

    $node->field_parent_zp_id['und'][0]['value'];

    $query = db_select('field_data_field_zp_id', 'dept');
    $query->condition('dept.field_zp_id_value', $node->field_parent_zp_id['und'][0]['value']);
    $query->condition('dept.bundle', 'department');
    $query->leftJoin('node', 'n_dept', "n_dept.nid = dept.entity_id");
    $query->fields('n_dept', array('nid', 'title'));
    $query->leftJoin('field_data_field_zp_id', 'shop', "shop.field_zp_id_value = '$shop_zp_id' AND shop.bundle = 'shop'");
    $query->leftJoin('node', 'n_shop', 'n_shop.nid = shop.entity_id');
    $query->fields('n_shop', array('nid', 'title'));
    if (!empty($node->field_catalog['und'][0]['tid'])) {
      $query->leftJoin('taxonomy_term_data', 'term', 'term.tid = ' . $node->field_catalog['und'][0]['tid']);
      $query->addField('term', 'name', 'subgroup_name');
    }
    $parents = $query->execute()->fetchObject();

    //dpm($parents);

    $breadcrumb = array(
      0 => '<a href="/">Home</a>',
      1 => l($parents->n_shop_title, 'node/' . $parents->n_shop_nid), // Shop
      2 => '<span id="bc-middle-parents">...</span>',
      3 => l($parents->title, 'node/' . $parents->nid), // Dept
    );
    if (!empty($node->field_catalog['und'][0]['tid'])) {
      $breadcrumb[] = l($parents->subgroup_name, 'node/' . $parents->nid, array('query' => array('tf' => $node->field_catalog['und'][0]['tid']))); // Subgroup
    }

    drupal_set_breadcrumb($breadcrumb);
  }
}


function zp_pages_buildDeptPage($node) {
  
  global $zp_global_data;

  // We have a list of subdepts or products in this dept?
  $query = db_select('field_data_field_parent_zp_id', 'pzp');
  $query->fields('pzp', array('entity_id'));
  $query->condition('field_parent_zp_id_value', $node->field_zp_id['und'][0]['value'])
        ->condition('bundle', 'product_a'); 
  $query->range(0, 1);
  $product_nid = $query->execute()->fetchField(); 
  /*
  $query = db_select('field_data_field_catalog', 'c');
  $query->fields('c', array('entity_id'));
  $query->join('node', 'n', "n.nid = c.entity_id"); 
  $query->condition('field_catalog_tid', $node->field_catalog['und'][0]['tid'])
        ->condition('n.type', 'product_a'); 
  $query->range(0, 1);
  $product_nid = $query->execute()->fetchField(); 
  */

  if ($product_nid) {
    // We have a dept with products here.



    // Search for all terms which are children of the term with parent_zp_id
    // In this case it's term with the same zp_id as parent (for this product) dept.
    // And so we search for all subgroups terms for this dept.

    // Find current catalog term tid by zp_id
    $current_catalog_tid = zp_misc_fieldRead_idByValue_single('zp_id', $node->field_zp_id['und'][0]['value'], 'taxonomy_term', 'catalog');


    $query = db_select('taxonomy_term_hierarchy', 'th');
    $query->condition('th.parent', $current_catalog_tid);
    $query->leftJoin('taxonomy_term_data', 'td', 'td.tid = th.tid');
    $query->fields('td', array('tid', 'name'));
    $subgroups_terms = $query->execute()->fetchAllAssoc('tid');

    $tf = array();
    if (!empty($subgroups_terms)) {
      //dpm($subgroups_terms);
      //dpm($_GET);
      if (!empty($_GET['tf'])) {
        if (strpos($_GET['tf'], ';') !== FALSE) {
          $tfs = explode(';', $_GET['tf']);
        }
        else {
          $tfs = array($_GET['tf']);
        }
        foreach ($tfs as $key => $value) {
          if (isset($subgroups_terms[$value])) {
            $tf[$value] = $value;
          }
        }
        //dpm($tf);
      }

      $zp_global_data['current_dept_subgroups'] = render(drupal_get_form('zp_commerce_buildSidebarFilter_form', array('subgroups_terms' => $subgroups_terms, 'tf' => $tf)));
    }



    $views_title = 'Товары';
    $display = 'bl_prods_of_dpt';

    $view = views_get_view('zp_catalog');
    //dpm($view);

    // Show products with parent_zp_id equal to this dept zp_id.
    $options = array('id' => 'field_parent_zp_id_value', 'value' => $node->field_zp_id['und'][0]['value']);
    $view->add_item($display, 'filter', 'field_data_field_parent_zp_id', 'field_parent_zp_id_value', $options);

    // Show only products of subgroup from url params.
    if (!empty($tf)) {
      $options = array('id' => 'field_catalog_tid', 'value' => $tf, 'type' => 'select', 'vocabulary' => 'catalog', 'hierarchy' => 1, 'reduce_duplicates' => 1, 'group' => 0,);
      $view->add_item($display, 'filter', 'field_data_field_catalog', 'field_catalog_tid', $options);
    }
    /*
    elseif (!empty($subgroups_tids)) {

      foreach ($subgroups_tids as $tid) {
        $subgroups_tids_filter[$tid] = $tid;
      }

//        $handler->display->display_options['filters']['field_catalog_tid']['id'] = 'field_catalog_tid';
//        $handler->display->display_options['filters']['field_catalog_tid']['table'] = 'field_data_field_catalog';
//        $handler->display->display_options['filters']['field_catalog_tid']['field'] = 'field_catalog_tid';
//        $handler->display->display_options['filters']['field_catalog_tid']['value'] = array(
//          55 => '55',
//          54 => '54',
//        );
//        $handler->display->display_options['filters']['field_catalog_tid']['exposed'] = TRUE;
//        $handler->display->display_options['filters']['field_catalog_tid']['expose']['operator_id'] = 'field_catalog_tid_op';
//        $handler->display->display_options['filters']['field_catalog_tid']['expose']['label'] = 'Catalog (field_catalog)';
//        $handler->display->display_options['filters']['field_catalog_tid']['expose']['operator'] = 'field_catalog_tid_op';
//        $handler->display->display_options['filters']['field_catalog_tid']['expose']['identifier'] = 'field_catalog_tid';
//        $handler->display->display_options['filters']['field_catalog_tid']['expose']['multiple'] = TRUE;
//        $handler->display->display_options['filters']['field_catalog_tid']['expose']['remember_roles'] = array(
//          2 => '2',
//          1 => 0,
//          3 => 0,
//        );
//        $handler->display->display_options['filters']['field_catalog_tid']['expose']['reduce'] = TRUE;
//        
//        $handler->display->display_options['filters']['field_catalog_tid']['reduce_duplicates'] = TRUE;
//        $handler->display->display_options['filters']['field_catalog_tid']['type'] = 'select';
//        $handler->display->display_options['filters']['field_catalog_tid']['vocabulary'] = 'catalog';
//        $handler->display->display_options['filters']['field_catalog_tid']['hierarchy'] = 1;

      $options = array(
        'id' => 'field_catalog_tid', 
        'value' => $subgroups_tids_filter, 
        'type' => 'select', 
        'exposed' => TRUE,
        'vocabulary' => 'catalog', 
        ////'hierarchy' => 1, 
        'reduce_duplicates' => 1, 
        'expose' => array(
            'operator_id' => 'field_catalog_tid_op',
            'operator' => 'field_catalog_tid_op',
            'label' => 'Р СџР С•Р Т‘Р С–РЎР‚РЎС“Р С—Р С—Р В°',
            'identifier' => 'field_catalog_tid',
            'multiple' => TRUE,
            'reduce' => TRUE,
            'remember_roles' => array(2 => 2, 1 => 0, 3 => 0),
          ),

      );
      $view->add_item($display, 'filter', 'field_data_field_catalog', 'field_catalog_tid', $options);
    }
    */
  }
  else {
    // We have a dept with subdepts here.
    $views_title = 'Отделы'; 
    $display = 'bl_subdpts_of_dpt';

    $term_children = taxonomy_get_children($node->field_catalog['und'][0]['tid']);//, $node->field_category['und'][0]['taxonomy_term']->vid);
    //dpm($term_children);

    $tids = NULL;
    foreach($term_children as $term_child) {
      $tids[$term_child->tid] = $term_child->tid;
    }

    if (!$tids) {
      return;
    }

    $view = views_get_view('zp_catalog');

    $options = array('id' => 'field_catalog_tid', 'value' => $tids, 'type' => 'select', 'vocabulary' => 'catalog', 'hierarchy' => 1, 'reduce_duplicates' => 1, 'group' => 0,);
    $view->add_item($display, 'filter', 'field_data_field_catalog', 'field_catalog_tid', $options);
  }

  return array('views_title' => $views_title, 'view_display' => $view->preview($display));
}


/**
 * Implements hook_node_delete().
 *
 * @return void
 *   Return nothing.
 */
function zp_pages_node_delete($node) {
  /* 
  cache_clear_all('*', 'cache_views', TRUE);
  cache_clear_all('*', 'cache_views_data', TRUE);
  drupal_set_message(t('A cache has been flushed.'), 'warning');
  */
}


function zp_pages_menu_set_active_trail($url = NULL) {
  
    $trail = array();
    $trail[] = array(
      'title' => t('Home'),
      'href' => '<front>',
      'link_path' => '',
      'localized_options' => array(),
      'type' => 0,
    );

    // Try to retrieve a menu link corresponding to the current path. If more
    // than one exists, the link from the most preferred menu is returned.
    // a4s
//      $preferred_link = menu_link_get_preferred();
//      $current_item = menu_get_item();
    
    
    // There is a link for the current path.
//    if ($preferred_link) {
//      // Pass TRUE for $only_active_trail to make menu_tree_page_data() build
//      // a stripped down menu tree containing the active trail only, in case
//      // the given menu has not been built in this request yet.
//      $tree = menu_tree_page_data($preferred_link['menu_name'], NULL, TRUE);
//      list($key, $curr) = each($tree);
//    }
//    // There is no link for the current path.
//    else {
//      $preferred_link = $current_item;
//      $curr = FALSE;
//    }

      // a4s
      // Pass TRUE for $only_active_trail to make menu_tree_page_data() build
      // a stripped down menu tree containing the active trail only, in case
      // the given menu has not been built in this request yet.
      $tree = menu_tree_page_data('catalog', NULL, TRUE);
      list($key, $curr) = each($tree);

    
    
    while ($curr) {
      $link = $curr['link'];
      if ($link['in_active_trail']) {
        // Add the link to the trail, unless it links to its parent.
        if (!($link['type'] & MENU_LINKS_TO_PARENT)) {
          // The menu tree for the active trail may contain additional links
          // that have not been translated yet, since they contain dynamic
          // argument placeholders (%). Such links are not contained in regular
          // menu trees, and have only been loaded for the additional
          // translation that happens here, so as to be able to display them in
          // the breadcumb for the current page.
          // @see _menu_tree_check_access()
          // @see _menu_link_translate()
          if (strpos($link['href'], '%') !== FALSE) {
            _menu_link_translate($link, TRUE);
          }
          if ($link['access']) {
            $trail[] = $link;
          }
        }
        $tree = $curr['below'] ? $curr['below'] : array();
      }
      list($key, $curr) = each($tree);
    }
    // Make sure the current page is in the trail to build the page title, by
    // appending either the preferred link or the menu router item for the
    // current page. Exclude it if we are on the front page.
    $last = end($trail);
    if ($preferred_link && $last['href'] != $preferred_link['href'] && !drupal_is_front_page()) {
      $trail[] = $preferred_link;
    }

}




// -----------------------------------

// Import Conferences from a file in bulk functions.



/**
 * Import Prices from a file page.
 */
function zp_pages_importPrices_form($form, &$form_state) {
  
  
  
  if (@$_GET['action'] == 'done') {
    $form['submit_again'] = array('#type' => 'submit', '#value' => 'Import again');
  } else {
    
    // http://www.lilianagaete.com/how-to-do-a-file-upload-in-drupal-7/

    // Use the #managed_file FAPI element to upload a file.
    $form['file_fid'] = array(
      '#title' => 'Выберите файл с прайс-листом',
      '#type' => 'managed_file',
      '#description' => 'Разрешены только форматы Excel и CSV.',
      '#default_value' => variable_get('file_fid', ''),
      '#upload_validators' => array(
        'file_validate_extensions' => array('csv xls xlsx'),
        ),
      '#upload_location' => 'private://zp_prices_uploaded',  //'/home/zpshop/zp_prices_uploaded/', 
      //'#upload_location' => 'public://zp_prices_uploaded',   // DRUPAL_ROOT
       // Remove the original element "Upload" button.
      '#process' => array('zp_misc_import_my_file_element_process')
    );
    
    $form['submit'] = array('#type' => 'submit', '#value' => 'Import from file');
  }
  
  $form['#validate'][] = 'zp_pages_importPrices_formValidate';
  
  //dpm($form);
  
  return $form;
}

/**
 * 
 * @param array &$form
 *   Array with declared form.
 *
 * @param array &$form_state
 *   Array with current form state.

 * @return void
 *   Return nothing.
 */
function zp_pages_importPrices_formValidate(&$form, &$form_state) {

  //dpm($_POST);
  //dpm($form_state);
  
  $file_data = array();
  $get = $_GET;
  unset($get['q'], $get['action']);
  
  
  
  if ($form_state['values']['op'] == 'Import from file') {
    
    //dpm($form_state);
    
    $get['action'] = 'done';
    
    $file = file_load($form_state['values']['file_fid']);
    //dpm($file);

    // Change status to permanent.
    $file->status = FILE_STATUS_PERMANENT;
    // Save.
    $uploaded = file_save($file);

    drupal_set_message('Uploaded?');
    
    if ($uploaded == TRUE) {
      
      drupal_set_message('The file has been uploaded.');
      
      if (($handle = fopen(zp_misc_getPathFromStreamUri($file->uri), "r")) !== FALSE) {
        
        //dpm($file);
        
        if ($file->filemime == 'application/vnd.ms-excel' || $file->filemime == 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet') {
          
          dpm('Excel!..');
          // Close because it will  be opened by importer function
          fclose($handle);
          
          // Import the data from Excel
          // Module phpexcel module needed, and phpexcel library downloaded.
          // https://www.drupal.org/node/1351450
          module_load_include('inc', 'phpexcel');
          $excel_data = phpexcel_import(zp_misc_getPathFromStreamUri($file->uri));
//          
          dpm(zp_misc_getPathFromStreamUri($file->uri));
          //dpm($excel_data);
          dpm("Rows: " . count($excel_data[0]));
          
          dpm('Opened...');
          
          if (0) {
          //if (is_array($excel_data)) {
            // Use only the first sheet ([0])
            foreach ($excel_data[0] as $number => $row) {
              
                    if ($number > 20) {
                      break;
                    }
                    $row_data = array();
                    foreach ($row as $col_name => $col_data) {

//                        if (strpos($col_data, 'HYPERLINK(')) {
//                          $col_data = preg_replace('/.*\=HYPERLINK\(\"(.*)\"\).*    /iU', '$1', $col_data);
//                          $col_data = explode('","', $col_data);
//                        }

                        $row_data[$col_name] = $col_data;

                    }
                    $file_data[] = $row_data;
              
            } // End of foreach ($excel_data[0] as $number => $row) {
            
            dpm('Processed...');
            dpm($file_data); 
            
          } // End of if (is_array($excel_data)) {
          
        } // End of if ($file->filemime == 'application/vnd.ms-excel' || $file->filemime == 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet') {
        
        
      } // if (($handle = fopen(zp_misc_getPathFromStreamUri($file->uri), "r")) !== FALSE) {
      
    } // End of if ($uploaded == TRUE) {
    
  } // if ($form_state['values']['op'] == 'Import from file') {
  
  
  /*
  if ($form_state['values']['op'] == 'Import from file') {
    $get['action'] = 'done';
    
    // Load the file.
    $file = file_load($form_state['values']['file_fid']);
    dpm($file);
    // Change status to permanent.
    $file->status = FILE_STATUS_PERMANENT;
    // Save.
    $uploaded = file_save($file);
    
    drupal_set_message(' uploaded?');
    
    if ($uploaded == TRUE) {
      drupal_set_message('The file has been uploaded.');
      
      if (($handle = fopen(zp_misc_getPathFromStreamUri($file->uri), "r")) !== FALSE) {
        
        dpm($file);
        
        if ($file->filemime == 'application/vnd.ms-excel' || $file->filemime == 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet') {
          
          // Close because it will  be opened by importer function
          fclose($handle);
          
          // Import the data from Excel
          // Module phpexcel module needed, and phpexcel library downloaded.
          // https://www.drupal.org/node/1351450
          module_load_include('inc', 'phpexcel');
          $excel_data = phpexcel_import(zp_misc_getPathFromStreamUri($file->uri));
          
          dpm(zp_misc_getPathFromStreamUri($file->uri));
          dpm($excel_data);
          if (is_array($excel_data)) {
            // Use only the first sheet ([0])
            foreach ($excel_data[0] as $row) {
//              if (empty($row['Conference Name'])) {
//                continue;
//              }
              $row_data = array();
              foreach ($row as $col_name => $col_data) {
                if (is_numeric($col_name)) {
                  continue;
                }
                else {
                  if (strpos($col_data, 'HYPERLINK(')) {
                    $col_data = preg_replace('/.*\=HYPERLINK\(\"(.*)\"\).*    /iU', '$1', $col_data);
                    $col_data = explode('","', $col_data);
                  }
                  
                  $row_data[$col_name] = $col_data;
                }
              }
              $file_data[] = $row_data;
            }
          }
        }
        elseif ($file->filemime == 'text/csv') {
          
          if (($titles = fgetcsv($handle, 1000, ";")) !== FALSE) {
          
            if ($titles[0] == 'Conference Name' && in_array('Applicable Industry', $titles)) {
              foreach ($titles as $key => $value) {
                if (!$value) {
                  unset($titles[$key]);
                }
              }

              while (($data = fgetcsv($handle, 1000, ";")) !== FALSE) {
                  // Skip empty rows (or rows with empty Title column).
                  if (empty($data[0])) {
                    continue;
                  }
                  $row = array();
                  foreach ($titles as $key => $title) {
                    if ($data[$key] == 'TBD') {
                      $data[$key] = '';
                    }
                    $row[$title] = trim($data[$key]);
                  }
                  $file_data[] = $row;
              }
            }

          }
          fclose($handle);
          
        }
        
        
        dpm($file_data);
        if (!empty($file_data)) {
          dpm('Got the data! Ready for importing.');
          //gv_misc_addConferences_fromVar($file_data);
        }
        
      }
      
    }
    else {
      drupal_set_message('The file could not be uploaded. Please contact the site administrator.', 'error');
    }

    $file_path = $file->uri;
  }
  */
  
  drupal_goto($_GET['q'], array('query' => $get));
}

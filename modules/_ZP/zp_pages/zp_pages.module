<?php

/**
 * @file
 * Module for building and managing site's pages.
 */

/**
 * Constants for ratins titles, etc.
 */
module_load_include('inc', 'zp_misc', 'inc/constants');


/**
 * Implements hook_menu().
 */
function zp_pages_menu() {
  
  
  //return $items;
}


/**
 * Implements hook_form_alter().
 *
 * @param array &$form
 *   Array with declared form.
 *
 * @param array &$form_state
 *   Array with current form state.
 *
 * @param string $form_id
 *   Form ID.
 *
 * @return void
 *   Return nothing.
 */
function zp_pages_form_alter(&$form, &$form_state, $form_id) {
  
  //dpm($form_id);  dpm($form);
  // $conf['locale_custom_strings_en']['old string'] = 'new string'
  
  switch ($form_id) {
    /*
    case 'taxonomy_form_term':
      //dpm($form);

      // Restore the Metatag fields data.
      $query = db_select('metatag', 'm');
      $query->fields('m', array('data'))
            ->condition('entity_type', 'taxonomy_term')
            ->condition('entity_id', $form['#term']['tid']); 
      $metatags = $query->execute()->fetchField(); 
      if ($metatags) {
        $metatags = unserialize($metatags);
        foreach ($metatags as $key => $value) {
          $form['metatags'][$key]['value']['#default_value'] = $value['value'];
        }
      }
      break;
      */
    
    
    case 'user_login_block':
    case 'user_login':
      
      // Disable login for disabled users
      $form['#validate'][] = 'zp_pages_validateForm_disableUserLoginForDisabled';
                
      break;
    
    
    
    
    
    case 'news_post_node_form':
    case 'blog_post_node_form':
    case 'article_node_form':
           
      
        
        $form['#validate'][] = 'zp_pages_validateForm_article';
                
      break;
    
    
    
    
    
    
    case 'user_profile_form':
      dpm('user');
      // Disallow edit own profile for a Guest user.
      global $user;
      if($user->name == 'guest') {
        drupal_goto('');
      }
      
      $form['field_u_bio']['und'][0]['#format'] = 'full_html';
      
      break;
      
      
      
    
    
  
       
    case 'preface_node_form':
      
      // Hide some options for all.
      ////$form['comment_settings']['#access'] = FALSE;
      $form['revision_information']['#access'] = FALSE;
      
      // And leave some options for the root.
      global $user;
      if ($user->uid != 1) {
        $form['field_preface_key']['#access'] = FALSE;
      }
      if (!in_array('administrator', $user->roles)) {
        // Deny to change the status of the node (it should always be unpublished).
        $form['options']['#access'] = FALSE;
        // Hide url aliasing options.
        $form['path']['#access'] = FALSE;
      }
      
      
      // Connect Ckeditor for additional fields.
      
      //$form['body']['und'][0]['#format'] = 'zp_full_html'; // link
      //$form['body']['und'][0]['#format'] = 'filtered_html'; // unlink
      $keys = element_children($form['field_preface_bottom']['und']);
      foreach ($keys as $key) {
        $form['field_preface_bottom']['und'][$key]['field_preface_b_body']['und'][0]['#format'] = 'full_html'; // link Ckeditor
      }
      
    break; // End of case 'preface_node_form':

  
    
  } // End of switch ($form_id) {
  
  
  // Add a Save Draft button.
  switch ($form_id) {
    
    case 'news_post_node_form':
    case 'blog_post_node_form':
    case 'article_node_form':
      
        $form['actions']['save_draft'] = array(
          '#type' => 'submit',
          '#value' => 'Save Draft',
          '#submit' => array('node_form_submit'),
          '#weight' => 6,
        );
      
        $form['#submit'][] = 'zp_pages_submitForm_saveDraft';
        
        break;
      
  } // End of switch ($form_id) { // Save Draft button
  
}


/**
 * Disable user login for disabled users.
 *
 * @param array &$form
 *   Array with declared form.
 *
 * @param array &$form_state
 *   Array with current form state.

 * @return void
 *   Return nothing.
 */
function zp_pages_validateForm_disableUserLoginForDisabled(&$form, &$form_state) {
    
  if (!empty($form_state['uid']) && $u = user_load($form_state['uid'])) {
    if (in_array('disabled', $u->roles)) {
      form_set_error('name',t('Sorry, but Your account is blocked. Please contact administrator to unblock it.'));
    }
  }
}


/**
 * Custom validate of article type form.
 *
 * @param array &$form
 *   Array with declared form.
 *
 * @param array &$form_state
 *   Array with current form state.

 * @return void
 *   Return nothing.
 */
function zp_pages_validateForm_article(&$form, &$form_state) {
}


/**
 * Custom validate of article type form.
 *
 * @param array &$form
 *   Array with declared form.
 *
 * @param array &$form_state
 *   Array with current form state.

 * @return void
 *   Return nothing.
 */
function zp_pages_submitForm_saveDraft(&$form, &$form_state) {
      
  if ($form_state['values']['op'] == 'Save' && @$form_state['build_info']['args'][0]->status == 0) {
    // NOT publish ---> Publish
    //drupal_set_message('NOT publish ---> Publish', 'warning');

    $form_state['values']['status'] = 1;
    drupal_set_message(t('This article is now published!'), 'warning');
    $status_changed = TRUE;
  }
  elseif (($form_state['values']['op'] == 'Save Draft' ||  $form_state['values']['status'] == 0) && @$form_state['build_info']['args'][0]->status == 1) {
    // Publish ---> NOT publish
    //drupal_set_message('Publish ---> NOT publish', 'warning');

    $form_state['values']['status'] = 0;
    drupal_set_message(t('Attention! This article is saved as draft and is not published now!'), 'warning');
    $status_changed = TRUE;
  }
  elseif (!$form_state['values']['nid'] || @$form_state['build_info']['args'][0]->field_show_in_block['und'][0]['value'] != @$form_state['values']['field_show_in_block']['und'][0]['value'] || $form_state['values']['op'] == 'Delete') {
    $status_changed = TRUE;
  }
  else {
    $status_changed = FALSE;
  }
  
  /*
  //if ($status_changed) 
  {
    // Clear the views cache.
    //drupal_flush_all_caches(); // This would clear a Boost cache as well, but we have a Boost Expire module that do it itself.
    // So we clear here only a views caches.
    cache_clear_all('*', 'cache_views', TRUE);
    cache_clear_all('*', 'cache_views_data', TRUE);
    drupal_set_message(t('A cache has been flushed.'), 'warning');
  }
  */
}


/**
 * Implements hook_node_view().
 *
 * @return void
 *   Return nothing.
 */
function zp_pages_node_view($node, $view_mode) {

  switch ($node->type) {
    
    case 'department':
      
      global $zp_global_data;

      // We have a list of subdepts or products in this dept?
      $query = db_select('field_data_field_parent_zp_id', 'pzp');
      $query->fields('pzp', array('entity_id'));
      $query->condition('field_parent_zp_id_value', $node->field_zp_id['und'][0]['value'])
            ->condition('bundle', 'product_a'); 
      $query->range(0, 1);
      $product_nid = $query->execute()->fetchField(); 
      /*
      $query = db_select('field_data_field_catalog', 'c');
      $query->fields('c', array('entity_id'));
      $query->join('node', 'n', "n.nid = c.entity_id"); 
      $query->condition('field_catalog_tid', $node->field_catalog['und'][0]['tid'])
            ->condition('n.type', 'product_a'); 
      $query->range(0, 1);
      $product_nid = $query->execute()->fetchField(); 
      */

      if ($product_nid) {
        // We have a dept with products here.

      
      
        // Search for all terms which are children of the term with parent_zp_id
        // In this case it's term with the same zp_id as parent (for this product) dept.
        // And so we search for all subgroups terms for this dept.

        // Find current catalog term tid by zp_id
        $current_catalog_tid = zp_misc_fieldRead_idByValue_single('zp_id', $node->field_zp_id['und'][0]['value'], 'taxonomy_term', 'catalog');


        $query = db_select('taxonomy_term_hierarchy', 'th');
        $query->condition('th.parent', $current_catalog_tid);
        $query->leftJoin('taxonomy_term_data', 'td', 'td.tid = th.tid');
        $query->fields('td', array('tid', 'name'));
        $subgroups_terms = $query->execute()->fetchAll();
        
        if (!empty($subgroups_terms)) {
          dpm($subgroups_terms);
          $sidebar_filter_by_subgroups = array();
          $sidebar_filter_by_subgroups['subgroups'] = array(
            '#type' => 'container',
          );
          foreach ($subgroups_terms as $key => $subgroup_term) {
            $sidebar_filter_by_subgroups['subgroups'][$subgroup_term->tid] = array(
              '#type' => 'checkmark',
              '#title' => $subgroup_term->name,
              '#defaule_value' => !empty($_GET['tf']) && $_GET['tf'] == $subgroup_term->tid ? TRUE : FALSE,
            );
          }
         
          $zp_global_data['current_dept_subgroups'] = render($sidebar_filter_by_subgroups);
        }



        $views_title = 'Товары';
        $display = 'bl_prods_of_dpt';

        $view = views_get_view('zp_catalog');
        //dpm($view);

        // Show products with parent_zp_id equal to this dept zp_id.
        $options = array('id' => 'field_parent_zp_id_value', 'value' => $node->field_zp_id['und'][0]['value']);
        $view->add_item($display, 'filter', 'field_data_field_parent_zp_id', 'field_parent_zp_id_value', $options);

        // Show only products of subgroup from url params.
        if (!empty($_GET['tf']) && in_array($_GET['tf'], $subgroups_tids)) {
          $options = array('id' => 'field_catalog_tid', 'value' => array($_GET['tf'] => $_GET['tf']), 'type' => 'select', 'vocabulary' => 'catalog', 'hierarchy' => 1, 'reduce_duplicates' => 1, 'group' => 0,);
          $view->add_item($display, 'filter', 'field_data_field_catalog', 'field_catalog_tid', $options);
        }
        /*
        elseif (!empty($subgroups_tids)) {

          foreach ($subgroups_tids as $tid) {
            $subgroups_tids_filter[$tid] = $tid;
          }

  //        $handler->display->display_options['filters']['field_catalog_tid']['id'] = 'field_catalog_tid';
  //        $handler->display->display_options['filters']['field_catalog_tid']['table'] = 'field_data_field_catalog';
  //        $handler->display->display_options['filters']['field_catalog_tid']['field'] = 'field_catalog_tid';
  //        $handler->display->display_options['filters']['field_catalog_tid']['value'] = array(
  //          55 => '55',
  //          54 => '54',
  //        );
  //        $handler->display->display_options['filters']['field_catalog_tid']['exposed'] = TRUE;
  //        $handler->display->display_options['filters']['field_catalog_tid']['expose']['operator_id'] = 'field_catalog_tid_op';
  //        $handler->display->display_options['filters']['field_catalog_tid']['expose']['label'] = 'Catalog (field_catalog)';
  //        $handler->display->display_options['filters']['field_catalog_tid']['expose']['operator'] = 'field_catalog_tid_op';
  //        $handler->display->display_options['filters']['field_catalog_tid']['expose']['identifier'] = 'field_catalog_tid';
  //        $handler->display->display_options['filters']['field_catalog_tid']['expose']['multiple'] = TRUE;
  //        $handler->display->display_options['filters']['field_catalog_tid']['expose']['remember_roles'] = array(
  //          2 => '2',
  //          1 => 0,
  //          3 => 0,
  //        );
  //        $handler->display->display_options['filters']['field_catalog_tid']['expose']['reduce'] = TRUE;
  //        
  //        $handler->display->display_options['filters']['field_catalog_tid']['reduce_duplicates'] = TRUE;
  //        $handler->display->display_options['filters']['field_catalog_tid']['type'] = 'select';
  //        $handler->display->display_options['filters']['field_catalog_tid']['vocabulary'] = 'catalog';
  //        $handler->display->display_options['filters']['field_catalog_tid']['hierarchy'] = 1;

          $options = array(
            'id' => 'field_catalog_tid', 
            'value' => $subgroups_tids_filter, 
            'type' => 'select', 
            'exposed' => TRUE,
            'vocabulary' => 'catalog', 
            ////'hierarchy' => 1, 
            'reduce_duplicates' => 1, 
            'expose' => array(
                'operator_id' => 'field_catalog_tid_op',
                'operator' => 'field_catalog_tid_op',
                'label' => 'Подгруппа',
                'identifier' => 'field_catalog_tid',
                'multiple' => TRUE,
                'reduce' => TRUE,
                'remember_roles' => array(2 => 2, 1 => 0, 3 => 0),
              ),

          );
          $view->add_item($display, 'filter', 'field_data_field_catalog', 'field_catalog_tid', $options);
        }
        */
      }
      else {
        // We have a dept with subdepts here.
        $views_title = 'Подотделы';
        $display = 'bl_subdpts_of_dpt';

        $term_children = taxonomy_get_children($node->field_catalog['und'][0]['tid']);//, $node->field_category['und'][0]['taxonomy_term']->vid);
        //dpm($term_children);

        $tids = NULL;
        foreach($term_children as $term_child) {
          $tids[$term_child->tid] = $term_child->tid;
        }

        if (!$tids) {
          return;
        }

        $view = views_get_view('zp_catalog');

        $options = array('id' => 'field_catalog_tid', 'value' => $tids, 'type' => 'select', 'vocabulary' => 'catalog', 'hierarchy' => 1, 'reduce_duplicates' => 1, 'group' => 0,);
        $view->add_item($display, 'filter', 'field_data_field_catalog', 'field_catalog_tid', $options);
      }
      $node->zp_template_data = array('views_title' => $views_title, 'display' => $view->preview($display));
      //echo '<div class="title">' . $views_title . '</div>' . $view->preview($display);
      
      
      break;
    
    
    case 'preface':
      
      $preface_key = @$node->field_preface_key['und'][0]['value'];
      
      // Disable ?page* links for /sitemap.
      if (@$_SERVER['REDIRECT_URL'] == '/sitemap' && $_SERVER['REQUEST_URI'] != '/sitemap') {
        zp_misc_drupal_not_found();
        drupal_exit();
      }
      
      
      // Set metatags from the preface to a page where the preface is placed
      // Except of the front page, where it can be set via admin interface of the Metatags.
      // AND except of published prefaces, because thier metatags will be pulled automatically!

      if (isset($node->metatags) && count($node->metatags) && !$node->status) {
        foreach($node->metatags as $metatag_title => $metatag_data) {

          zp_misc_addMetatag($metatag_title, $metatag_data['value']);

        }
    
      }
        
      
    break; // End of Preface
    
  } // End of switch ($node->type) {
  
  if ($view_mode == 'full') {
    zp_misc_addSocialShareData_toPage($node);
  }
}


/**
 * Implements hook_node_delete().
 *
 * @return void
 *   Return nothing.
 */
function zp_pages_node_delete($node) {
  /* 
  cache_clear_all('*', 'cache_views', TRUE);
  cache_clear_all('*', 'cache_views_data', TRUE);
  drupal_set_message(t('A cache has been flushed.'), 'warning');
  */
}


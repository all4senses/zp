<?php

/**
 * @file
 * Module contained miscelanious helper functions and hooks.
 */


/**
 * Constants for ratins titles, etc.
 */

//module_load_include('inc', 'zp_misc', 'inc/constants');


/**
 * Implements hook_menu().
 */
function zp_misc_menu() {
  /*
  $items['referer'] = array(
    'title' => 'Set user external referer',
    'page callback' => 'zp_misc_setReferer_ajax',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  ); 
  */
  $items['test'] = array(
    'title' => 'Test page',
    'page callback' => 'zp_misc_testPage',
    //'access arguments' => array('administer content'),
    'access arguments' => array('administer taxonomy'), 
    'type' => MENU_CALLBACK,
  );
  
  return $items;
}


/**
 * Allows modules to perform operations after a menu link resulting from the
 * processing of a taxonomy term has been saved.
 *
 * @param $term
 *   The taxonomy term
 * @param $menu_link
 *   The menu link that has been saved.
 * @param $mlid
 *   The identifier of the newly created menu item.
 */
function zp_misc_taxonomy_menu_save($term, $menu_link, $mlid) {
  // For example, we could process all the translated taxonomy terms of this
  // term here, in order to save their respective translated menu links.
  
    //dpm($term);
    //dpm($menu_link);
    
    
    // a4s rewrite menu item path, attribute title.
    
    // Calculate it again... just testing, no need for this.
    ////$menu_link = taxonomy_menu_menu_link_prepare($term, 'menu-catalog-menu');
            
    // Original from taxonomy_menu_menu_link_prepare($term, $menu_name).
    
//    // HTML title attribute.
//    if (taxonomy_menu_variable_get('display_title_attr', $term->vid, TRUE)) {
//      $term_description = taxonomy_menu_variable_get('term_item_description', $term->vid, 0);
//    }
//    $menu_link['options']['attributes']['title'] = (isset($term_description) && $term_description == 1) ? trim($term->description) : '';
//    // Path.
//    $link_path = taxonomy_menu_path_get($term->vid, $term->tid);
//    $menu_link['link_path'] = drupal_get_normal_path($link_path, $langcode);

    
    // Allow manually change and delete the menu item by a user.
    unset($menu_link['module']);
      
    // If there is a dept connected to this term, show link to this dept instead the link to the term.
    if ($dept_nid = zp_misc_findDeptConnectedToTerm($term)) {
      //dpm($term);
      // And save the renewed item again, as in taxonomy_menu_menu_link_prepare($term, $menu_name).
      $menu_link['link_path'] = 'node/' . $dept_nid;
    }
    else {
      //dpm('not found dept');
      // Show a menu item without a link.
      // Depends on the module 'Special menu items'.
      $menu_link['link_path'] = '<nolink>';
    }
    
    $mlid = menu_link_save($menu_link);
    
    //dpm($menu_link);

}



/**
 * Find a dept connected to a catalog term.
 */
function zp_misc_findDeptConnectedToTerm($term) {
  
  //dpm($term);
  
  // If the $term->field_zp_id field is not loaded to the term object, load it now.
  if (!isset($term->field_zp_id)) {
    $term_short = $term;
    $term = taxonomy_term_load($term->tid);
    $term->parents = $term_short->parents;
    $term->depth = $term_short->depth;
  }
  $dept_nid = zp_misc_fieldRead_idByValue_single('zp_id', $term->field_zp_id['und'][0]['value'], 'node', 'department');

  if ($dept_nid) {
    // Connect or update the term to the node.
    zp_misc_fieldTermReferenceSave('catalog', $dept_nid, $term->tid, 'node', 'department');
  }
  
  //dpm('$dept_nid = ' . $dept_nid);
  return $dept_nid;
}


 /**
 * Prepares a taxonomy item to be saved as a menu link.
 * 
 * a4s altered from original function taxonomy_menu_menu_link_prepare()
 *
 * A menu item has the following properties:
 *  - link_path: (required)
 *  - link_title: (required)
 *  - router_path: (required)
 *  - menu_name: (optional)
 *  - weight: (optional)
 *  - expanded: (optional)
 *  - options: (optional)
 *  - mlid: (optional)
 *  - plid: (optional)
 *
 * @param $term
 *   A taxonomy term used to save a respective menu item.
 * @param $menu_name
 *   The machine name of the menu in which the menu link should be saved.
 *
 * @return
 *   A menu link built upon a taxonomy term, to be saved in the menu.
 */
function zp_misc_taxonomy_menu_menu_link_prepare($term, $menu_name) {
  static $weight = 0;
  $langcode = isset($term->language) ? $term->language : LANGUAGE_NONE;
  $recursive_count = FALSE;

  // Count nodes attached to a taxonomy term if the settings require it.
  // TODO Make the recursivity of node count optional.
  $display_count = taxonomy_menu_variable_get('display_num', $term->vid, FALSE);
  $hide_term = taxonomy_menu_variable_get('hide_empty_terms', $term->vid, FALSE);
  if ($hide_term || $display_count) {
    $nodes_count = taxonomy_menu_term_count_nodes($term->tid, $recursive_count);
    $is_hidden = ($nodes_count && $nodes_count > 0) ? 0 : 1;
  }

  // Load or create a menu link corresponding the taxonomy term being processed.
  $menu_link = taxonomy_menu_menu_link_load($term, $langcode);

  // Menu to be attached to.
  $menu_link['menu_name'] = $menu_name;
  // Expanded.
  $menu_link['expanded'] = taxonomy_menu_variable_get('expanded', $term->vid, 0);
  // Has children.
  $has_children = taxonomy_get_children($term->tid, $term->vid);
  $menu_link['has_children'] = empty($has_children) ? 0 : 1;
  // Flatten.
  $flatten_menu = taxonomy_menu_variable_get('flat', $term->vid, 0);
  if ($flatten_menu) {
    $menu_link['weight'] = $weight++;
    $menu_link['has_children'] = 0;
    $menu_link['plid'] = taxonomy_menu_variable_get('vocab_parent', $term->vid, NULL);
    $menu_link['expanded'] = 0;
  }
  else {
    $menu_link['plid'] = taxonomy_menu_term_get_plid($term, $langcode);
  }
  // Empty terms.
  $menu_link['hidden'] = isset($is_hidden) ? $is_hidden : 0;

  // Menu link title.
  $menu_link['link_title'] = $term->name;
  if ($display_count && $nodes_count > 0) {
    $menu_link['link_title'] .= " (" . $nodes_count . ")";
  }
  // HTML title attribute.
  if (taxonomy_menu_variable_get('display_title_attr', $term->vid, TRUE)) {
    $term_description = taxonomy_menu_variable_get('term_item_description', $term->vid, 0);
  }
  $menu_link['options']['attributes']['title'] = (isset($term_description) && $term_description == 1) ? trim($term->description) : '';
  // Path.
  $link_path = taxonomy_menu_path_get($term->vid, $term->tid);
  $menu_link['link_path'] = drupal_get_normal_path($link_path, $langcode);

  return $menu_link;
}


/**
 * Hook menu alter.
 *
 */
function zp_misc_menu_alter(&$items) {
  // Example - disable the page at node/add
  //$items['node/add']['access callback'] = FALSE;
  
  // Remove all Tagadelic urls.
  //////unset($items['tagadelic'], $items['tagadelic/list/%tagadelic_vocs'], $items['tagadelic/chunk/%tagadelic_vocs']);
  
  /*
  $keys = array_keys($items);
  foreach($keys as $key) {
    if (strpos($key, 'taxonomy/term/') !== FALSE) {
      $keys2[] = $key;
    }
  }
  dpr($keys2);
  exit();
  */
  
  //unset($items['taxonomy/term/%taxonomy_term']);
  unset($items['taxonomy/term/%taxonomy_term/view']);
  unset($items['taxonomy/term/%taxonomy_term/feed']); // If you want to hide the feed as well.
}



/**
 * Returns recommendations counts for pos and neg.
 */
function zp_misc_getVotesRecommendPosVsNeg($nid) {
  
    $query = db_select('votingapi_vote', 'v')
      ->fields('v', array('value'));
    $query->condition('entity_id', $nid);
    $query->condition('value_type', 'percent');
    $query->condition('tag', 'recommend');
    
    $results = $query->execute()->fetchCol();

    $recommend = array('positive' => 0, 'negative' => 0);
    foreach ($results as $result) {
      if ($result) {
        $recommend['positive'] += 1;
      }
      else {
        $recommend['negative'] += 1;
      }
    }
        
    return $recommend;
}


function zp_misc_securimage_show_ajax() {

  //require_once dirname(__FILE__) . '/securimage.php';
  
  require_once '/home/chadmin/public_html/sites/all/libraries/jquery.plugins/securimage/securimage.php';

  
  
  $img = new Securimage();

  $img->show();  // outputs the image and content headers to the browser
}


/**
 * Implements Hook Process Html.
 * Minify html on the fly.
 */
function zp_misc_process_html(&$vars) {
  
  global $user;
  
  if (!$user->uid) {
    
      // Minify a Html Page content.
      $vars['page'] = preg_replace(
        array(
          '/ {2,}/',
          '/<!--.*?-->|\t|(?:\r?\n[ \t]*)+/s',
        ),
        array(
          ' ',
          '',
        ),
        $vars['page']
      );

  }
  else {
    //dpm($vars);
  }
  
}


/**
 * Implementing hook_js_alter
 * @param $javascript
 */
function zp_misc_js_alter(&$javascript) {

  ////global $user;
  ////if (!$user->uid) {
    
    // Minify all js on the page.
    
    $add_to_minified = NULL;
    $from_scratch = FALSE;
    
    $zp_minified_js = variable_get('zp_minified_js');
    
    if ($zp_minified_js) {
      foreach($javascript as $filename => $attr){
        
        if (isset($zp_minified_js[$filename])) {
          $javascript[$filename]['data'] = $zp_minified_js[$filename];
        }
        elseif (strpos($filename, '.js') && !strpos($attr['data'], 'min.js') && !strpos($attr['data'], 'jsmin-zp')) {
          $add_to_minified[$filename] = $attr;
        }
      }
    }
    else {
      $add_to_minified = $javascript;
      $from_scratch = TRUE;
    }
    
    // Create minified version of js files, not yet created.
    if($add_to_minified) {

      include_once DRUPAL_ROOT . '/sites/all/libraries/minify/min/lib/JSMin.php';
    
      foreach($add_to_minified as $filename => $attr){

        if(!$from_scratch || (strpos($filename, '.js') && !strpos($attr['data'], 'min.js') && !strpos($attr['data'], 'jsmin-zp'))) {

          $source_fpath_short = $attr['data'];
          $source_fpath = DRUPAL_ROOT . '/' . $source_fpath_short;

          if ($source_content = file_get_contents($source_fpath)) {
            if ($minOutput = JSMin::minify($source_content)) {
              $target_path_short = 'f/jsmin-zp/' . str_replace('/', '-', $source_fpath_short);
              if (file_put_contents(DRUPAL_ROOT . '/' . $target_path_short, $minOutput)) {
                $zp_minified_js[$filename] = $target_path_short;
                $javascript[$filename]['data'] = $zp_minified_js[$filename];
              }
            }
          }

        } // End of if(strpos($filename, '.js') && !strpos($attr['data'], "min.js") && !strpos($attr['data'], "jsmin-zp")) {

      } // End of foreach($javascript as $filename => $attr){
      
      variable_set('zp_minified_js', $zp_minified_js);
    } // End of if($add_to_minified) {
      
    
    // Replace js with min.js
//    foreach($javascript as $filename => $attr) {
//      if (isset($zp_minified_js[$filename])) {
//        $javascript[$filename]['data'] = $zp_minified_js[$filename];
//      }
//    }
    
    
  ////} // End of if ($user->uid != 1) {

}


/**
 * Implements hook_flush_caches().
 */
function zp_misc_flush_caches() {
  
  // Remove all minified files from jsmin-zp folder.
  // Uncomment in case ov changing any js
  
//  $dir = 'f/jsmin-zp';
//  $objects = scandir($dir);
//  foreach ($objects as $object) {
//    if ($object != "." && $object != "..") {
//      unlink($dir . "/" . $object);
//    }
//  }
//  variable_del('zp_minified_js');
    
}


/**
 * 
 * User permissions access calback function for the admin.
 * 
 */
function zp_misc_userIsAdmin() {
  global $user;
  if (in_array('administrator', $user->roles)) {
    return TRUE;
  }
  else {
    return FALSE;
  }
}



/**
 * Set a current user external referer.
 */
function zp_misc_setReferer_ajax() {
  
  $status = TRUE;
  $output = '';
  
  $post = array();
  foreach ($_POST as $key => $value) {
    $post[$key] = check_plain(strip_tags($value));
  }
  
  if (!empty($post['referer']) && strpos($post['referer'], 'zapokupkami.com') === FALSE) {
    $_SESSION['zp_current_http_referer'] = $post['referer'];
  }
  
  drupal_json_output(array('status' => $status, /*'data' => $output*/));
}


/**
 * Identify the type of the node.
 * Used in theme_pager() in template.php
 */
function zp_misc_identifyNodeType($nid) {
    
  $query = db_select('node', 'n')  
        ->fields('n', array('type'));
  $query->condition('n.nid', $nid);
  $node_type = $query->execute()->fetchField();

  return $node_type;
}

    
/**
 * Custom page not found 404.
 * Fix for a standard drupal_not_found
 */
function zp_misc_drupal_not_found() {
  
  
  
  
  // Disable boost caching for custom gv page not found pages.
  // First part, initialization.
  // See the second part at gv_misc_process_html(),
  // where $_boost variable  will be corrected to prevent the current page caching.
  global $zp_page_not_found;
  $zp_page_not_found = TRUE;
  
  
  
  
  // Emit the correct charset HTTP header, but not if the page callback
  // result is NULL, since that likely indicates that it printed something
  // in which case, no further headers may be sent, and not if code running
  // for this page request has already set the content type header.

  drupal_add_http_header('Content-Type', 'text/html; charset=utf-8');

  // Send appropriate HTTP-Header for browsers and search engines.
  global $language;
  drupal_add_http_header('Content-Language', $language->language);

  drupal_add_http_header('Status', '404 Not Found');

  watchdog('page not found', check_plain($_GET['q']), NULL, WATCHDOG_WARNING);

  // Check for and return a fast 404 page if configured.
  drupal_fast_404();

  // Keep old path for reference, and to allow forms to redirect to it.
  if (!isset($_GET['destination'])) {
    $_GET['destination'] = $_GET['q'];
  }

  $path = drupal_get_normal_path(variable_get('site_404', ''));
  if ($path && $path != $_GET['q']) {
    // Custom 404 handler. Set the active item in case there are tabs to
    // display, or other dependencies on the path.
    menu_set_active_item($path);
    $return = menu_execute_active_handler($path, FALSE);
  }

  if (empty($return) || $return == MENU_NOT_FOUND || $return == MENU_ACCESS_DENIED) {
    // Standard 404 handler.
    ////drupal_set_title(t('Page not found'));
    ////$return = t('The requested page "@path" could not be found.', array('@path' => request_uri()));
    
    drupal_set_title('Page Not Found');
    
    $sitemap_body = cache_get('zp_sitemap_body');
    if (!$sitemap_body || empty($sitemap_body->data)) {
      $key = 'view-sitemap-page';
      $query = db_select('node', 'n');
      $query->join('field_data_field_preface_key', 'pk', "pk.entity_id = n.nid"); 
      $query->join('field_data_body', 'fb', "fb.entity_id = n.nid"); 
      $query->fields('fb', array('body_value'))
            ->condition('n.type', 'preface')
            ->condition('pk.field_preface_key_value', $key);
      $sitemap_body = $query->execute()->fetchField(); 

      // Remove preface text from a Sitemap body.
      if(preg_match('/.*(<table.*)/s', $sitemap_body, $matches)) {
        $sitemap_body = $matches[1];
      }
            
      cache_set('zp_sitemap_body', $sitemap_body);
    }
    else {
      $sitemap_body = $sitemap_body->data;
    }
    
    $page404_body = cache_get('zp_page404');
    if (!$page404_body || empty($page404_body->data)) {
      $key = 'page-not-found';
      $query = db_select('node', 'n');
      $query->join('field_data_field_preface_key', 'pk', "pk.entity_id = n.nid"); 
      $query->join('field_data_body', 'fb', "fb.entity_id = n.nid"); 
      $query->fields('fb', array('body_value'))
            ->condition('n.type', 'preface')
            ->condition('pk.field_preface_key_value', $key);
      $page404_body = $query->execute()->fetchField(); 

      cache_set('zp_page404', $page404_body);
    }
    else {
      $page404_body = $page404_body->data;
    }
    
    $return = '<div class="main-content page404"> 
      <div class="content page preface">' . $page404_body . '<div class="sitemap field-name-body">' . $sitemap_body . '</div>
      </div>
  </div>';

    
  }

  drupal_set_page_content($return);
  $page = element_info('page');
  print drupal_render_page($page);

  // Perform end-of-request tasks.
  drupal_page_footer();
}


/**
 * Return a breadcrumbs for a current page via main_menu.
 */
function zp_misc_getMenuTrail() {
  
  if(!$url_aliased = @$_SERVER['REDIRECT_URL']) {
    return FALSE;
  }
    
  //dpm('Target aliased url = ' . $url_aliased);
  
  $breadcrumbs = cache_get('zp_breadcrumbs_for_menu');
  //dpm($breadcrumbs);
  
  $breadcrumbs = !$breadcrumbs ? array() : $breadcrumbs->data;
  if (isset($breadcrumbs[$url_aliased])) {
    //dpm('breadcrumb is found in cache');
    return $breadcrumbs[$url_aliased];
  }
  
  // Search for the url in the menu and define a breadcrumb.
  $main_menu = NULL;
  
  // Check if the url is presented in the menu.
  if($main_menu_all_items = cache_get('zp_main_menu_all_items')) {
    $main_menu_all_items = $main_menu_all_items->data;
  }
  else {
    $main_menu = menu_build_tree('main-menu');
    foreach ($main_menu as $key_top => $value_top) {
      $main_menu_all_items[] = strpos($value_top['link']['href'], 'node/') !== FALSE ? $value_top['link']['href'] : '/' . $value_top['link']['href'];
      if (!empty($value_top['below'])) {
        foreach ($value_top['below'] as $key_below => $value_below) {
          $main_menu_all_items[] = strpos($value_below['link']['href'], 'node/') !== FALSE ? $value_below['link']['href'] : '/' . $value_below['link']['href'];
        }
      }
    }
    //dpm('Define zp_main_menu_all_items');
    cache_set('zp_main_menu_all_items', $main_menu_all_items);
  }
  
  //dpm($main_menu_all_items);
  
  $url_not_aliased = (arg(0) == 'node' ? 'node/' . arg(1) : NULL);
  if (!in_array($url_aliased, $main_menu_all_items) && !in_array($url_not_aliased, $main_menu_all_items)) {
    // Target url is not in the menu.
    //dpm('Target url is not in the menu... Exit');
    return FALSE;
  }
  
  
  //dpm('in the menu! Define breadcrumb...');
  if (!$main_menu) {
    $main_menu = menu_build_tree('main-menu');
  }
  //dpm($main_menu);
  
  
  
  $breadcrumb = '';
  
  
  
  
  //dpm($url_aliased);
  //dpm($url_not_aliased);
  
  foreach ($main_menu as $key_top => $value_top) {
    // Check top link.
    if ($value_top['link']['hidden']) {
      continue;
    }
    if ('/' . $value_top['link']['href'] == $url_aliased || $value_top['link']['href'] == $url_not_aliased) {
      //dpm('Found top url ' . $value_top['link']['link_title']);
      $breadcrumb = theme('breadcrumb', array('breadcrumb' => array(l('Home', NULL), $value_top['link']['link_title'] )));
    }
    else {
      // Check nested links.
      if (!empty($value_top['below'])) {
        foreach ($value_top['below'] as $key_below => $value_below) {
          if ($value_below['link']['hidden']) {
            continue;
          }
          if ('/' . $value_below['link']['href'] == $url_aliased || $value_below['link']['href'] == $url_not_aliased) {
            //dpm('Found below url ' . $value_below['link']['link_title'] . ' --- ' . $key_top . ' --- ' . $key_below);
            $breadcrumb = theme('breadcrumb', array('breadcrumb' => array(l('Home', NULL), l($value_top['link']['link_title'], $value_top['link']['href']), $value_below['link']['link_title'] )));
          }
        }
      }
    }
    
  }

  $breadcrumbs[$url_aliased] = $breadcrumb;
  cache_set('zp_breadcrumbs_for_menu', $breadcrumbs);
  
  return $breadcrumb;
}

/**
 * Loads an additional user_data for articles, etc.
 *
 * @param $uid
 *   A user account uid.
 * @return
 *   The user's generated object with additional data.
 */
function zp_misc_loadUserExtendedData($uid) {
  
  $cid = 'zp_userExtendedData_all';
  $cache = cache_get($cid, 'cache');
  
  if ($cache && !empty($cache->data) && !empty($cache->data[$uid]) && $cache->expire > time()) {
    $out = $cache->data[$uid];
  }
  else 
  {
    $userExtendedData_all = $cache ? $cache->data : array();
    
    $query = db_select('realname', 'rn')
      ->fields('rn', array('realname'))
      ->fields('g', array('field_u_gplus_profile_value'));
    $query->condition('uid', $uid);
    //$query->leftJoin('field_data_field_u_gplus_profile', 'g', 'g.entity_id = ' . $uid . '');
    $userExtendedData = $query->execute()->fetchObject();
    
    $userExtendedData_all[$uid] = $userExtendedData;

    cache_set($cid, $userExtendedData_all, 'cache', strtotime('+31 day'));
    $out = $userExtendedData_all[$uid];
  }
    
  return $out;
}


/**
 * Saves or updates a field.
 */
function zp_misc_fieldDelete($field_name, $entity_id, $target_field_name = NULL, $target_field_id = NULL, $entity_ids = array()) {
  
  if (!$entity_id && $target_field_id) {
    if (empty($entity_ids)) {
      // Delete all nodes fields with set value field.
      db_delete('field_data_field_' . $field_name)
        ->condition($target_field_name, $target_field_id)
        ->execute();
      db_delete('field_revision_field_' . $field_name)
        ->condition($target_field_name, $target_field_id)
        ->execute();
    }
    else {
      // Delete only specific nodes fields with set value field.
      db_delete('field_data_field_' . $field_name)
        ->condition($target_field_name, $target_field_id)
        ->condition('entity_id', $entity_ids, 'IN')
        ->execute();
      db_delete('field_revision_field_' . $field_name)
        ->condition($target_field_name, $target_field_id)
        ->condition('entity_id', $entity_ids, 'IN')
        ->execute();
    }
      
  }
  else {
    db_delete('field_data_field_' . $field_name)
      ->condition('entity_id', $entity_id)
      ->execute();
    db_delete('field_revision_field_' . $field_name)
      ->condition('entity_id', $entity_id)
      ->execute();
  }
  
  
  field_cache_clear();
}

/**
 * Read  a field value by entity_id.
 */
function zp_misc_fieldRead_valueById_single($field_name, $entity_id, $entity_type = 'node') {
  $query = db_select('field_data_field_' . $field_name, 'f');
  $query->fields('f', array('field_' . $field_name . '_value'))
        ->condition('f.entity_id', $entity_id)
        ->condition('f.entity_type', $entity_type)
        ->condition('f.bundle', $bundle);
  $result = $query->execute()->fetchField();
  return $result;
}


/**
 * Read  a field entity_id by value.
 */
function zp_misc_fieldRead_idByValue_single($field_name, $field_value, $entity_type = 'node', $bundle) {
  $query = db_select('field_data_field_' . $field_name, 'f');
  $query->fields('f', array('entity_id'))
        ->condition('field_' . $field_name . '_value', $field_value)
        ->condition('f.entity_type', $entity_type)
        ->condition('f.bundle', $bundle);
  $result = $query->execute()->fetchField();
  return $result;
}

/**
 * Read  a field term reference entity_id by value.
 */
function zp_misc_fieldTermReferenceRead_idByValue_single($field_name, $field_value, $entity_type = 'node', $bundle) {
  $query = db_select('field_data_field_' . $field_name, 'f');
  $query->fields('f', array('entity_id'))
        ->condition('field_' . $field_name . '_tid', $field_value)
        ->condition('f.entity_type', $entity_type)
        ->condition('f.bundle', $bundle);
  $result = $query->execute()->fetchField();
  return $result;
}


/**
 * Saves or updates a field.
 */
function zp_misc_fieldSave($field_name, $entity_id, $data, $entity_type = 'node', $bundle = NULL) {
  
  if(!$bundle) {
    $bundle = $entity_type;
  }
  
  $query = db_select('field_data_field_' . $field_name, 'f');
  $query->fields('f', array('field_' . $field_name . '_value'))
        ->condition('f.entity_id', $entity_id)
        ->condition('f.entity_type', $entity_type);
  $result = $query->execute(); //->fetchField();
  
  if ($result->rowCount()) {
    // Need update an existing field.
    db_update('field_data_field_' . $field_name)
      ->fields(array(
        //'entity_id' => $entity_id,
        //'delta' => 0,  
        //'revision_id'=> $entity_id,    
        'field_' . $field_name . '_value' => $data,
      ))
      ->condition('entity_id', $entity_id)
      ->condition('entity_type', $entity_type)
      ->execute();

    db_update('field_revision_field_' . $field_name)
      ->fields(array(
        //'entity_id' => $entity_id,
        //'delta' => 0,  
        //'revision_id'=> $entity_id,     
        'field_' . $field_name . '_value' => $data,
      ))
      ->condition('entity_id', $entity_id)
      ->condition('entity_type', $entity_type)
      ->execute();
  }
  else {
    // Need create a new field.
    db_insert('field_data_field_' . $field_name) 
      ->fields(array(
        'entity_type'=> $entity_type,
        'bundle'=> $bundle,
        'deleted'=> 0,                
        'entity_id' => $entity_id,
        'delta' => 0,  
        'revision_id'=> $entity_id,
        'language'=> 'und',  
        'field_' . $field_name . '_value' => $data,
      ))
      ->execute();

    db_insert('field_revision_field_' . $field_name)
      ->fields(array(
        'entity_type'=> $entity_type,
        'bundle'=> $bundle,
        'deleted'=> 0,                
        'entity_id' => $entity_id,
        'delta' => 0,  
        'revision_id'=> $entity_id,
        'language'=> 'und',  
        'field_' . $field_name . '_value' => $data,
      ))
      ->execute();
  }

  field_cache_clear();
}


/**
 * Saves or updates a Term Reference field.
 */
function zp_misc_fieldTermReferenceSave($field_name, $entity_id, $data, $entity_type = 'node', $bundle = NULL, $clear_cache = TRUE) {
  
  if(!$bundle) {
    $bundle = $entity_type;
  }
  
  $query = db_select('field_data_field_' . $field_name, 'f');
  $query->fields('f', array('field_' . $field_name . '_tid'))
        ->condition('f.entity_id', $entity_id)
        ->condition('f.entity_type', $entity_type)
        ->condition('f.bundle', $bundle);
  $result = $query->execute(); //->fetchField();
  
  if ($result->rowCount()) {
    // Need update an existing field.
    db_update('field_data_field_' . $field_name)
      ->fields(array(
        //'entity_id' => $entity_id,
        //'delta' => 0,  
        //'revision_id'=> $entity_id,    
        'field_' . $field_name . '_tid' => $data,
      ))
      ->condition('entity_id', $entity_id)
      ->condition('entity_type', $entity_type)
      ->condition('bundle', $bundle)
      ->execute();

    db_update('field_revision_field_' . $field_name)
      ->fields(array(
        //'entity_id' => $entity_id,
        //'delta' => 0,  
        //'revision_id'=> $entity_id,     
        'field_' . $field_name . '_tid' => $data,
      ))
      ->condition('entity_id', $entity_id)
      ->condition('entity_type', $entity_type)
      ->condition('bundle', $bundle)
      ->execute();
  }
  else {
    // Need create a new field.
    db_insert('field_data_field_' . $field_name) 
      ->fields(array(
        'entity_type'=> $entity_type,
        'bundle'=> $bundle,
        'deleted'=> 0,                
        'entity_id' => $entity_id,
        'delta' => 0,  
        'revision_id'=> $entity_id,
        'language'=> 'und',  
        'field_' . $field_name . '_tid' => $data,
      ))
      ->execute();

    db_insert('field_revision_field_' . $field_name)
      ->fields(array(
        'entity_type'=> $entity_type,
        'bundle'=> $bundle,
        'deleted'=> 0,                
        'entity_id' => $entity_id,
        'delta' => 0,  
        'revision_id'=> $entity_id,
        'language'=> 'und',  
        'field_' . $field_name . '_tid' => $data,
      ))
      ->execute();
  }

  if ($clear_cache) {
    field_cache_clear();
  }
  
}


/**
 * Set (if bigger then 12 hours period) and returns a last updated time stamp
 *
 */
function zp_misc_lastUpdatedStamp($min_hours = 24, $relative_path = NULL) {

  if (!$relative_path) {
    $relative_path = $_SERVER['REQUEST_URI'];
    if ($relative_path == '/home') {
      $relative_path = '/';
    }
  }
  
  $query = db_select('zp_last_updated', 'lu')
      ->fields('lu', array('timestamp'));
  $query->condition('lu.path', $relative_path);
  $last_updated = $query->execute()->fetchfield();
  
  $current_time = time();
  
  if (!$last_updated || ($current_time - $last_updated) > $min_hours * 3600 ) {
    // Update or insert new timestamp
    if ($last_updated) {
      $result = db_update('zp_last_updated')
        ->fields(array(
          'timestamp' => $current_time,
        ))
        ->condition('path', $relative_path)
        ->execute();
    }
    else {
      $result = db_insert('zp_last_updated')
        ->fields(array(
          'path' => $relative_path,
          'timestamp' => $current_time,
        ))
        ->execute();
    }
    return '<div class="ts">' . t('Last Updated: ') . date('F d, Y \a\t g:ia', $current_time) . '</div>';
  }
  else {
    return '<div class="ts">' . t('Last Updated: ') . date('F d, Y \a\t g:ia', $last_updated) . '</div>';
  }
}


/**
 * Get prefaces main section rendered.
 *
 */
function zp_misc_getPrefaceMainSection($key) {
  $node = zp_misc_getPrefaceByKey($key);
  $node->title_no_link = TRUE;
  $node_view = node_view($node, 'full');
  
  return render($node_view/*['body']*/);
}


/**
 * Get prefaces bottom section rendered.
 *
 */
function zp_misc_getPrefaceBottomSection($key, $nid = NULL) {
  if ($nid) {
    $node = node_load($nid);
  }
  else {
    $node = zp_misc_getPrefaceByKey($key);
  }
  $node_view = node_view($node, 'full');

  return render($node_view['field_preface_bottom']);
}


/**
 * Renders metatags array with a new order of tags: description, keywords, the rest...
 *
 */
function zp_misc_getUserRealName($uid) {
  
  $query = db_select('realname', 'rn')
      ->fields('rn', array('realname'));
  $query->condition('rn.uid', $uid);
  $realname = $query->execute()->fetchfield();
  
  return $realname;
}


/**
 * Process variables for search-result.tpl.php.
 *
 * The $variables array contains the following arguments:
 * - $result
 * - $module
 *
 * @see search-result.tpl.php
 */
function zp_misc_preprocess_search_result(&$variables) {
  
  // Original code.
  /*
  global $language;
  
  $result = $variables['result'];
  $variables['url'] = check_url($result['link']);
  $variables['title'] = check_plain($result['title']);
  if (isset($result['language']) && $result['language'] != $language->language && $result['language'] != LANGUAGE_NONE) {
    $variables['title_attributes_array']['xml:lang'] = $result['language'];
    $variables['content_attributes_array']['xml:lang'] = $result['language'];
  }

  $info = array();
  if (!empty($result['module'])) {
    $info['module'] = check_plain($result['module']);
  }
  if (!empty($result['user'])) {
    $info['user'] = $result['user'];
  }
  if (!empty($result['date'])) {
    //$info['date'] = format_date($result['date'], 'short');
    // a4s changes
    //$info['date'] = date('F d, Y \a\t g:ia', $result['date']);
    //$info['date'] = date('F d, Y \a\t g:ia', $result['node']->created);
  }
  if (isset($result['extra']) && is_array($result['extra'])) {
    $info = array_merge($info, $result['extra']);
  }
  // Check for existence. User search does not include snippets.
  $variables['snippet'] = isset($result['snippet']) ? $result['snippet'] : '';
  // Provide separated and grouped meta information..
  $variables['info_split'] = $info;
  $variables['info'] = implode(' - ', $info);
  $variables['theme_hook_suggestions'][] = 'searzp_result__' . $variables['module'];
  */
  
  
  // a4s changes
  $result = $variables['result'];
  if (!empty($result['date'])) {
    $info = array();
    //$info['date'] = format_date($result['date'], 'short');
    //$info['date'] = date('F d, Y \a\t g:ia', $result['date']);
    $info['date'] = date('F d, Y \a\t g:ia', $result['node']->created);
    
    if (isset($result['extra']) && is_array($result['extra'])) {
      $info = array_merge($info, $result['extra']);
    }
    $variables['info_split'] = $info;
    $variables['info'] = implode(' - ', $info);
  }
}



/**
 * Implements hook_ranking() for Search ranking.
 */
function zp_misc_ranking() {
 // Add relevance based on creation or changed date.
  if ($node_cron_last = variable_get('node_cron_last', 0)) {
    $ranking['recent_created'] = array(
      'title' => t('Recently posted (created)'),
      // Exponential decay with half-life of 6 months, starting at last indexed node
      'score' => 'POW(2.0, (n.created - :node_cron_last) * 6.43e-8)',
      'arguments' => array(':node_cron_last' => $node_cron_last),
    );
  }
  return $ranking;
}


/**
 * Push field tags (topics) to metatags in the Head.
 */
function zp_misc_pushTagsToMetatags($name, $value, $weight = 'NA') {
  switch ($name) {
    case 'keywords':
    case 'news_keywords':
      $t = '';
      $tags = element_children($value);
      foreach ($tags as $tag) {
        $t .= $t ? ', ' . $value[$tag]['#title'] : $value[$tag]['#title'];
      }
      if ($t) {
        zp_misc_addMetatag($name, $t, NULL, $weight);
      }
      break;
  }
}


/**
 * Allow modules to define namespaces for RDF mappings.
 *
 * Many common namespace prefixes are defined in rdf_rdf_namespaces(). However,
 * if a module implements hook_rdf_mapping() and uses a prefix that is not
 * defined in rdf_rdf_namespaces(), this hook should be used to define the new
 * namespace prefix.
 *
 * @return
 *   An associative array of namespaces where the key is the namespace prefix
 *   and the value is the namespace URI.
 *
 * @ingroup rdf
 */
// a4s Seems it didn't work out...
function zp_misc_rdf_namespaces() {
  return array(
    'xmlns:addthis'  => 'http://www.addthis.com/help/api-spec',
    'xmlns:g'  => 'http://base.google.com/ns/1.0',
  );
}


/**
 * Implements hook_TYPE_alter().
 * 
 * Specifically hook_html_head_alter().
 */
function zp_misc_html_head_alter(&$object) {
  //dpm($object);
  if (isset($object['rdf_node_comment_count'])) {
    unset($object['rdf_node_comment_count']['#attributes']['datatype']);
  }
}


/**
 * Implements hook_views_api().
 *
 * @return array
 *   Views api definition.
 */
function zp_misc_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'zp_misc') . '/inc',
  );
} 



/**
 * Form with a fieldset of Add content section for Admin Content page (by Views).
 */
function zp_misc_AddContentSection_form() {
  
  global $user;
  
  $types = node_type_get_types();
  
  // Hide some content tupes if not a root.
  if ($user->uid != 1) {
    unset($types['admin_page'], $types['preface'], $types['quote'], $types['webform']);
  }
  
  $options = array('' => '- Select a content type -');
  foreach ($types as $type => $value) {
    $options[str_replace('_', '-', $type)] = $value->name;
  }
  
  $form['add_content'] = array(
    '#type' => 'fieldset',
    '#title' => t('Add a new content'),
    '#collapsible' => TRUE,
  );
  $form['add_content']['select_type'] = array(
    '#type' => 'select',
    //'#title' => 'Select content type',
    '#options' => $options,
    '#attributes' => array('id' => 'select_type',  'onChange' => "top.location.href='/node/add/" . "' + document.getElementById('select_type').options[document.getElementById('select_type').selectedIndex].value"),
  );
  
  return $form;
}


/**
 * Get a picture from a remote server.
 */
function zp_misc_curl_file_from_remote_site_likeBrowser($url, $file_local_abs)
{
	
    $curl = curl_init();

    // Setup headers - I used the same headers from Firefox version 2.0.0.6
    // below was split up because php.net said the line was too long. :/
    $header[0] = "Accept: text/xml,application/xml,application/xhtml+xml,";
    $header[0] .= "text/html;q=0.9,text/plain;q=0.8,image/png,*/*;q=0.5";
    $header[] = "Cache-Control: max-age=0";
    $header[] = "Connection: keep-alive";
    $header[] = "Keep-Alive: 300";
    $header[] = "Accept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.7";
    $header[] = "Accept-Language: en-us,en;q=0.5";
    $header[] = "Pragma: ";
    // browsers keep this blank.

    $referers = array("google.com", "yahoo.com", "msn.com", "ask.com", "live.com");
    $choice = array_rand($referers);
  	//if ($referer == "") 
    $referer = "http://www." . $referers[$choice] . "/";

    //$browsers = array("Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.0.3) Gecko/2008092510 Ubuntu/8.04 (hardy) Firefox/3.0.3", "Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.8.1) Gecko/20060918 Firefox/2.0", "Mozilla/5.0 (Windows; U; Windows NT 6.0; en-US; rv:1.9.0.3) Gecko/2008092417 Firefox/3.0.3", "Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0; SLCC1; .NET CLR 2.0.50727; Media Center PC 5.0; .NET CLR 3.0.04506)");
    //$choice2 = array_rand($browsers);
    //$lines = file('/home/xxx/public_html/sites/all/modules/xxx/ua.txt');
    //$browser = trim($lines[$agentid]);

    curl_setopt($curl, CURLOPT_URL, $url);
    //curl_setopt($curl, CURLOPT_USERAGENT, $browser);
    curl_setopt($curl, CURLOPT_HTTPHEADER, $header);
    curl_setopt($curl, CURLOPT_REFERER, $referer);
    //curl_setopt($curl, CURLOPT_AUTOREFERER, true);
    curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($curl, CURLOPT_TIMEOUT, 300);
    curl_setopt($curl, CURLOPT_MAXREDIRS, 7);
    curl_setopt($curl, CURLOPT_FOLLOWLOCATION, true);

    $data = curl_exec($curl);

    if ($data === false) {
      $data = curl_error($curl);
      // close the connection
      curl_close($curl);
      return $data;
    }

    // close the connection
    curl_close($curl);

    // write content to a file
    file_put_contents($file_local_abs, $data);

    return null; //OK
}


/**
 * Rewrite links like /sites/default/files/pdfs/ to alias /pdfs/ (forward) and vise versa and others.
 */
function zp_misc_rewriteLinks($type, $data, $direction = 'forward') {
  switch ($type) {
    case 'pdfs':
      if ($direction == 'forward') {
        // Converts from /sites/default/files/pdfs/ to /pdfs/
        // the real path will be accessible with .htaccess mod_rewrite settings in the root of the site.

        // $body = $form_state['values']['body'];
        $body = $data['values']['body'];
        $count1 = $count2 = 0;
        if ($body['und'][0]['value']) {
          $body['und'][0]['value'] = preg_replace('|"/f/pdfs|', '"/pdfs', $body['und'][0]['value'], -1, $count1);
        }
        if ($body['und'][0]['summary']) {
          $body['und'][0]['summary'] = preg_replace('|/f/pdfs|', '"/pdfs', $body['und'][0]['summary'], -1, $count2);
        }
        if ($count1 + $count2 > 0) {
          return $body;
        }
      }
      else {
        // Converts from /pdfs/ to /sites/default/files/pdfs/

        // $body = $form['body']
        $body = $data['body'];
        if ($body['und'][0]['#default_value']) {
          $body['und'][0]['#default_value'] = preg_replace('|"/pdfs|', '"/f/pdfs', $body['und'][0]['#default_value'], -1);
        }
        if ($body['und'][0]['summary']['#default_value']) {
          $body['und'][0]['summary']['#default_value'] = preg_replace('|"/pdfs|', '"/f/pdfs', $body['und'][0]['summary']['#default_value'], -1);
        }
        return $body;
      }
      break;
  }
  return NULL;
}


/**
 * Convert path from Drupal stream uri.
 */
function zp_misc_getPathFromStreamUri($uri) {
  $file_default_scheme = file_default_scheme();
  $default_file_path = variable_get('file_' . $file_default_scheme . '_path', conf_path() . '/f');
  
  return $default_file_path . str_replace($file_default_scheme . ':/', '', $uri);
}


/**
 * Convert a relative or absolute path to Drupal stream uri.
 */
function zp_misc_getStreamUriFromRelativePath($path) {
  $file_default_scheme = file_default_scheme();
  $default_file_path = variable_get('file_' . $file_default_scheme . '_path', conf_path() . '/f');

  $stream_path = str_replace('http://zapokupkami.com', '', $path);
  $stream_path = str_replace('http://www.zapokupkami.com', '', $stream_path);
  $stream_path = ltrim($stream_path, '/');
  return $file_default_scheme . '://' . str_replace($default_file_path . '/', '', $stream_path);
}


/**
 * Adds js to a page for making all images zoomable.
 */
function zp_misc_addZoomableImagesJs() {
  //1, 3, 4, 
  drupal_add_js('sites/all/libraries/jquery.plugins/colorbox/colorbox/jquery.colorbox.js');
  drupal_add_css('sites/all/libraries/jquery.plugins/colorbox/example1/colorbox.css', array('preprocess' => FALSE)); // array('group' => CSS_THEME, 'preprocess' => FALSE)

  $path_to_module = drupal_get_path('module', 'zp_misc');
  drupal_add_js($path_to_module . '/js/zp_makeImagesZoomable.js');
}


/**
 * Helper function to add metatag to a current page.
 */
function zp_misc_addMetatag($name, $content, $href = NULL, $weight = 'NA') {
  if ($content) {
    if ($name == 'title') {
      drupal_set_title($content);
    }
    else {
      $meta = array(
        '#type' => 'html_tag',
        '#tag' => 'meta',
        '#attributes' => array(
            'name' => $name,
            'content' => $content,
        )
      );
      if ($weight != 'NA') {
        $meta['#weight'] = $weight;
      }
      drupal_add_html_head($meta, $name);
    }
  } // End of if ($content) {
  elseif($href) {
    $meta = array(
      '#tag' => 'link',
      '#attributes' => array(
          'rel' => $name,
          'href' => $href,
      )
    );
    if ($weight != 'NA') {
      $meta['#weight'] = $weight;
    }
    drupal_add_html_head($meta, $name);
  } // End of elseif($href) {
}


/**
 * Get the title metatag for the front page from the Metatag module's settings.
 */
function zp_misc_metatag_getFrontTitle() {
  $metatags = metatag_metatags_view('global:frontpage', array());
  return $metatags['title']['#attached']['metatag_set_preprocess_variable'][0][2];
}


/**
 * Helper function to add sharing data (metatags and links) to a current page.
 */
function zp_misc_addSocialShareData_toPage($node) {
  
  global $schema_org_type;
  $image = NULL;
  $og_type = NULL;
  $title = NULL;
  $description = NULL;
  $tags = array();
  
  //$title = $node->title;
  if (@$node->field_preface_key['und'][0]['value'] == 'front') {
    
    $title = zp_misc_metatag_getFrontTitle();
    
    $tags = array(
      
      // Add all rss feeds to the home page (exceot the main rss, which will be added to all pages).
      'articles_rss' => array(
        '#tag' => 'link', 
        '#attributes' => array( 
            'rel' => 'alternate',
            'type' => 'application/rss+xml',
            'title' => 'Articles from www.zapokupkami.com',
            'href' => 'http://www.zapokupkami.com/rss.xml',
        ),
      ),
      'blog_rss' => array(
        '#tag' => 'link', 
        '#attributes' => array( 
            'rel' => 'alternate',
            'type' => 'application/rss+xml',
            'title' => 'www.zapokupkami.com Blog',
            'href' => 'http://www.zapokupkami.com/blog/rss.xml',
        ),
      ),
        
    );
    
  }
  if (!$title) {
    if (isset($node->metatags['title']['value']) && $node->metatags['title']['value']) {
      $title = $node->metatags['title']['value'];
    }
    else {
      $title = $node->title;
    }
  }
  
  
  
  switch ($node->type) {
    case 'blog_post':
    case 'news_post':
    case 'article':
      if (isset($node->field_main_image['und'][0]['value']) && $node->field_main_image['und'][0]['value']) {
        $image = unserialize($node->field_main_image['und'][0]['value']);
        if (isset($image['src_themed']) && $image['src_themed']) {
          $image = $image['src_themed'];
        }
        elseif (isset($image['src']) && $image['src']) {
          $image = $image['src'];
        }
        else {
          $image = NULL;
        }
      }
    
      /*
      if (!@$node->metatags['description']['value']) {
        $description = $title . '...';
      }
      */
      
      $og_type = 'article';
      $schema_org_type = 'Article';
      
      break;
    
      
      
    case 'provider':
      
      $p_data = unserialize($node->field_p_data['und'][0]['value']);
      if (isset($p_data['share_src_themed']) && $p_data['share_src_themed']) {
        $image = $p_data['share_src_themed'];
      }
      elseif(isset($node->field_p_logo['und'][0]['uri']) && $node->field_p_logo['und'][0]['uri']) {
        $image = zp_misc_getPathFromStreamUri($node->field_p_logo['und'][0]['uri']);
      }
      
      $og_type = 'company';
      $schema_org_type = 'LocalBusiness';
      break;
      
      
      /*
    case 'review':
      global $review_share_src_themed;
      if ($review_share_src_themed) {
        $image = $review_share_src_themed;
      }
      $og_type = 'company';
      $schema_org_type = 'Review';
      // Refresh a title a bit.
      $title = $node->field_r_provider_name['und'][0]['value'] . ' Review - ' . $node->title;
      break;
      */
      
    
  }
  
  //$title = str_replace('[site:name]', 'www.cloudhostinghq.com', $title);
  $title = token_replace($title);
  
  
  if (!$image){
    // Show default image - the logo.
    $image = '/sites/all/themes/zp/css/images/zp-logo-t.png';
  }

  if (!strpos($image, 'zapokupkami.com')) {
    $image = 'http://www.zapokupkami.com/' . ltrim($image, '/');
  }

  $tags += array(
       /*
      'title' => array(
          '#tag' => 'meta',
          '#attributes' => array(
              'name' => 'title',
              'content' => "Video '" . $node->title . "' by " . $publisher_title,
          ),
      ),
      'DC.title' => array(
          '#tag' => 'meta',
          '#attributes' => array(
              'name' => 'DC.title',
              'content' => $node->title,
          ),
      ),
      'description' => array(
          '#tag' => 'meta',
          '#attributes' => array(
              'name' => 'description',
              'content' => (isset($node->body['und'][0]['summary']) AND $node->body['und'][0]['summary'])?$node->body['und'][0]['summary']:drupal_substr(strip_tags($node->body['und'][0]['value']), 0, 200) . '...',
          ),
      ),
      'author' => array(
          '#tag' => 'meta',
          '#attributes' => array(
              'name' => 'author',
              'content' => $publisher_title,
          ),
      ),



      'medium' => array(
          '#tag' => 'meta',
          '#attributes' => array(
              'name' => 'medium',
              'content' => 'video',
          ),
      ),

      'video_type' => array(
          '#tag' => 'meta',
          '#attributes' => array(
              'name' => 'video_type',
              'content' => 'application/x-shockwave-flash',
          ),
      ),

      'video_height' => array(
          '#tag' => 'meta',
          '#attributes' => array(
              'name' => 'video_height',
              'content' => '300',
          ),
      ),

      'video_width' => array(
          '#tag' => 'meta',
          '#attributes' => array(
              'name' => 'video_height',
              'content' => '500',
          ),
      ),


      'video_src' => array(
          '#tag' => 'link', // The #tag is the html tag - <link />
          '#attributes' => array( 
              'href' => 'http://ripplin.com/sites/all/libraries/flowplayer/flowplayer-3.2.8.swf?config=' . urlencode('http://ripplin.com/video-src?v=' . $node->nid),
              'rel' => 'video_src',
          ),
      ),
      */
  
      /*
    'fb:admins' => array(
      '#type' => 'html_tag',
      '#tag' => 'meta',
      '#attributes' => array(
          'property' => 'fb:admins',
          'content' => 'http://www.facebook.com/zapokupkami',
      ),
    ),
      */
      
    // Title for Facebook.
    'og:title' => array(
      '#type' => 'html_tag',
      '#tag' => 'meta',
      '#attributes' => array(
          'property' => 'og:title',
          'content' => $title,
      ),
    ),
      
    // Title for G+.
    'name' => array(
      '#type' => 'html_tag',
      '#tag' => 'meta',
      '#attributes' => array(
          'itemprop' => 'name',
          'content' => $title,
      ),
    ),
      
    'image_src' => array(
      '#tag' => 'link', // The #tag is the html tag - <link />
      '#attributes' => array( 
          'href' => $image,
          'rel' => 'image_src',
          //'type' => 'text/css',
      ),
    ),
  
    // For Facebook.
    'og:image' => array(
      '#type' => 'html_tag',
      '#tag' => 'meta',
      '#attributes' => array(
          'property' => 'og:image',
          'content' => $image,
      ),
    ),
      
    // For G+.  
    'image' => array(
      '#type' => 'html_tag',
      '#tag' => 'meta',
      '#attributes' => array(
          'itemprop' => 'image',
          'content' => $image,
      ),
    ),
      
      
      
    // Add main rss feed to every page.
    'main_rss' => array(
      '#tag' => 'link', 
      '#attributes' => array( 
          'rel' => 'alternate',
          'type' => 'application/rss+xml',
          'title' => 'Latest Articles from www.zapokupkami.com',
          'href' => 'http://www.zapokupkami.com/rss.xml',
      ),
    ),
      
  );

  /*  
  if ($description) {
    
    $tags['description'] = array(
          '#tag' => 'meta',
          '#attributes' => array(
              'name' => 'description',
              'content' => $description,
          ),
      );
  }
  */
  
  if ($og_type) {
   
    $tags['og:type'] = array(
        '#type' => 'html_tag',
        '#tag' => 'meta',
        '#attributes' => array(
            'property' => 'og:type',
            'content' => $og_type,
        ),
    );
  }
  
  
        
  foreach ($tags as $key => $val)
      drupal_add_html_head($val, $key);
        
}


/**
 * Get img src for Share from Uri.
 */
function zp_misc_getShareSrcThemed_fromUri($uri) {
  
  // Define share pic.
  $image_size = getimagesize(ltrim(zp_misc_getPathFromStreamUri($uri), '/'));
  // Image for sharing.
  if ($image_size[0] / $image_size[1] > 1) {
    // Too wide. will not be cutted.
    $out = image_style_url('share_wide', $uri);
  }
  elseif ($image_size[1] / $image_size[0] < 1) {
    // Too tall. will not be cutted.
    $out = image_style_url('share_tall', $uri);
  }
  else {
    //Normal image, will not be cutted.
    $out = image_style_url('share', $uri);
  }
  
  return $out;
}



/**
 * Implements hook_url_inbound_alter().
 */
function zp_misc_url_inbound_alter(&$path, $original_path, $path_language) {
//Create the path /contact-us from /contact
//if (preg_match('|^contact-us$|', $path, $matches)) {
//  $path = 'contact';
//}
//else
  if ($path == 'provider-submit-user-review') {
    $path = 'node/add/review';
  }

//  elseif (preg_match('|^pdfs\/(.*)|', $path, $matches)) {
//    //$path = 'pdfs/voipe911-advisory.pdf';
//    $path = 'sites/default/files/pdfs/' . $matches[1];
//    //$path = '';
//  }
}


/**
 * Implements hook_url_outbound_alter().
 */
function zp_misc_url_outbound_alter(&$path, &$options, $original_path) {
  // Create the path /contact-us from /contact
//  if (preg_match('|^contact$|', $path, $matches)) {
//    $path = 'contact-us';
//  }
//  else

  
  //if (!empty($options['attributes']['rel'])) 
//  global $user;
//  if ($path == 'http://click.websitegear.com/track/1883449')
//  {
//    //$options['attributes']['rel'] = 'nofollow';
//    //dpm($path);
//    //dpm($options);
//    //unset($options['attributes']['rel']);
//    $options['attributes']['rel'] = 'yyy';
//    //$options['attributes']['target'] = '_parent';
//    $options['fragment'] = 'zzz';
//    //dpm($options);
//  }
  
  if ($path == 'node/add/review') {
    $path = 'provider-submit-user-review';
  }
  elseif (preg_match('|^f\/pdfs\/(.*)|', $path, $matches)) {
    //$path = 'sites/default/files/pdfs/voipe911-advisory.pdf';
    $path = 'pdfs/' . $matches[1];
  }
}


/**
 * Loads jquery plugin Colorbox to open videos in popup windows
 */
function zp_misc_loadColorboxForVideoLinks($type = 'YouTube Direct Link') {
  switch ($type) {
    case 'YouTube Direct Link':
        // for links with a class "yt-direct" like <a class="yt-direct" href="http://www.youtube.com/embed/9fWAFw4iSrg?rel=0&amp;wmode=transparent" title="Fonality HUD - Full Demo">Fonality HUD - Full Demo</a>
        drupal_add_js('sites/all/libraries/jquery.plugins/colorbox/colorbox/jquery.colorbox-min.js');
        drupal_add_css('sites/all/libraries/jquery.plugins/colorbox/example1/colorbox.css');
        $path_to_custom_js = drupal_get_path('module', 'zp_misc') . '/js/';
        drupal_add_js($path_to_custom_js . 'zp_colorbox_p_video.js');
        break;
  }
}


/**
 * Test page function for url /test.
 */
function zp_misc_getYoutubeVideoThumb($video_id) {
  
  $file_default_scheme = file_default_scheme();
  $default_file_path = variable_get('file_' . $file_default_scheme . '_path', conf_path() . '/f');
  
  $url = 'http://img.youtube.com/vi/' . $video_id . '/0.jpg'; //'/maxresdefault.jpg';
  $file_local = $default_file_path . '/vthumbs/' . $video_id . '.jpg';
  $file_local_abs = DRUPAL_ROOT . '/' . $file_local;
  if (!zp_misc_curl_file_from_remote_site_likeBrowser($url, $file_local_abs)) {
    return $file_local;
  }
  else {
    return NULL; // Failed.
  }
}


/**
 * Test page function for url /test.
 */
function zp_misc_addNewDeptAndMenuItem($dept) {
 
  // Creat a node for the department.
  // ---------------------------------------------------------------------------------------------------
  
  global $user;
  global $language;
  
  $node = new stdClass();
  $node->type = 'department';
  node_object_prepare($node);
  
  $current_time = time();
  $node->date = $current_time;
  $node->created = $current_time;
  $node->changed = $current_time;
  
  $node->title = $dept['title'];
  $node->language = LANGUAGE_NONE; //$language->language; 
  $node->uid = $user->uid;
  $node->status = 1;
  $node->promote = 0;
  $node->sticky = 0;
  $node->comment = 0;
  
  $node->body[$node->language][0]['format'] = 'full_html';
  $node->body[$node->language][0]['value'] = $dept['description'];
  $node->body[$node->language][0]['summary'] = $dept['summary'];
  $node->body[$node->language][0]['safe_value'] = check_plain($dept['description']);
  $node->body[$node->language][0]['safe_summary'] = check_plain($dept['summary']);
  
  $node->field_zp_id[$node->language][0]['value'] = $dept['zp_id'];

  /*
  $node->field_zp_id[$node->language][0] = array(
    'value' => $dept['zp_id'],
    'safe_value' => check_plain($dept['zp_id']),
    'format' => 'full_html',
  );
  */
  
  /*
  $node->path = array(
    'alias' => $dept['url_alias'],
    'language' => $node->language,
    'pathauto' => 0,
  );
  */
  
  if (!$node = node_submit($node)) {
    drupal_set_message('1.Error has occured while saving a Department ' . $dept['title'], 'error');
    return FALSE;
  }

  node_save($node);
  if (empty($node->nid)) {
    drupal_set_message('2.Error has occured while saving a Department ' . $dept['title'], 'error');
    return FALSE;
  }
  
  drupal_set_message('A new department was created, Success!', 'warning');

  
  
  
  // Create a term in the menu Catalog and connect it to the just created department node.
  // ---------------------------------------------------------------------------------------------------
  
  static $catalog_voc;
  if (!$catalog_voc) {
    $catalog_voc = taxonomy_vocabulary_machine_name_load('catalog');
  }
  
  // Find parent term tid by zp_id.
  $parent_tid = zp_misc_fieldRead_idByValue_single('zp_id', $dept['parent_zp_id'], 'taxonomy_term', 'catalog');
  
  $menu_item_term = (object) array(
    'name' => !empty($dept['menu_item_title']) ? $dept['menu_item_title'] : $dept['title'],
    'vid' => $catalog_voc->vid,
    'parent' => array($parent_tid),
    'weight' => $dept['weight'],
    'field_zp_id' => array('und' => array(0 => array('value' => $dept['zp_id']))),
  );
  
  taxonomy_term_save($menu_item_term);
  //dpm($menu_item_term);
  
  // Taxonomy term itself will be assigned to this node automatically on taxonomy_menu item creation via hook zp_misc_taxonomy_menu_save.
  
  
}


/**
 * Implements hook_node_delete().
 *
 * @TODO Update the menu items count, empty terms.
 */
function zp_misc_node_delete($node) {
  
  //if ($term_tid = zp_misc_fieldRead_idByValue_single('zp_id', $node->field_zp_id['und'][0]['value'], 'taxonomy_term', 'catalog')) 
  {
    //$term = taxonomy_term_load($term_tid);
    //taxonomy_term_save($term);
    
    //dpm($term);
    
    $result = db_query("SELECT mlid FROM {menu_links} WHERE link_path = :path AND module = 'menu'", array(':path' => 'node/' . $node->nid), array('fetch' => PDO::FETCH_ASSOC));
    foreach ($result as $m) {
      $menu_link = menu_link_load($m['mlid']);
      //dpm('xxx');
      // Show a menu item without a link.
      // Depends on the module 'Special menu items'.
      $menu_link['link_path'] = '<nolink>';
      $mlid = menu_link_save($menu_link);
      //dpm($menu_link);
    }
  
  
    //drupal_set_message('ZP. Taxonomy menu "' .  $term->name . '" has been updated to set empty item after the node ' . $node->nid . ' deletion!', 'warning');
  }
}


/**
 * Test page function for url /test.
 */
function zp_misc_testPage() {
  
  $out = '<div>Start test...</div><br/>';

  $dept = array(
    'title' => 'Тест 3',
    'description' => 'Описание отдела 3', 
    'summary' => 'Краткое описание отдела 3',
    'zp_id' => 'z003',
    'parent_zp_id' => 'z001',
    'weight' => 5,
  );
  
  zp_misc_addNewDeptAndMenuItem($dept);
  
  
  return $out . '<br>End of Test';
}


/**
 * Return a time in the format like x min ago, etc...
 */
function zp_misc_elapsed_time($timestamp, $precision = 2) { 
  $time = time() - $timestamp; 
  $a = array('decade' => 315576000, 'year' => 31557600, 'month' => 2629800, 'week' => 604800, 'day' => 86400, 'hour' => 3600, 'min' => 60, 'sec' => 1); 
  $i = 0; 
    foreach($a as $k => $v) { 
      $$k = floor($time/$v); 
      if ($$k) $i++; 
      $time = $i >= $precision ? 0 : $time - $$k * $v; 
      $s = $$k > 1 ? 's' : ''; 
      $$k = $$k ? $$k.' '.$k.$s.' ' : ''; 
      @$result .= $$k; 
    } 
  return $result ? $result.'ago' : '1 sec to go'; 
} 


/**
 * Curl - GET.
 */
function zp_misc_curlGET($url) {
  
  // GET.
  $curl = curl_init();
  curl_setopt($curl, CURLOPT_URL, $url);
  curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);
  curl_setopt($curl, CURLOPT_TIMEOUT, 300);
  
  // If POST.
  //  curl_setopt($curl, CURLOPT_POST, TRUE);
  //  curl_setopt($curl, CURLOPT_POSTFIELDS, $params);
  
  $data_from = curl_exec($curl);
  curl_close($curl);
  
  return $data_from;
}




/**
 * Implements hook_mail().
 */
function zp_misc_mail($key, &$message, $params) {
  switch ($key) {
    
    /*
    case 'email_verification':
      $message['subject'] = 'Submitted Review Requires One-Click Email Verification';
      $message['body'][] = t('Dear User,

Thank you for taking your time to share your experience by submitting a review.

To faster verify and publish your review, please click on the email verification link below:

!url

Best Wishes,
CloudHostingHQ Team
', array('!url' => 'http://www.zapokupkami.com/approve/email/' . $params['verification_code']));
      
      break;
    
    
    
    
    
    case 'user_message':
      $message['subject'] = 'New User message from zp block';
      $message['body'][] = 
'First name: ' . $params['fname'] . '

Last name: ' . $params['lname'] . '

Email: ' . $params['email'] . '

Subscribed: ' . $params['subscribed'] . '  


Message: ' . $params['message'] . '


Best Wishes,
CloudHostingHQ Team
';
      
      break;
    */
    
  }
}  


/**
* Implementation of hook_mail_alter().
* Here we allow the site name to be used as the senders name for outgoing email.
* see http://drupal.org/node/209672
* 
* No need for this hook if the smtp module is used.
*/
/*
function zp_misc_mail_alter(&$message){
  $default_from = variable_get('site_mail', ini_get('sendmail_from'));
  
  if($message['from'] == $default_from){
    $message['from'] = '"'. variable_get('site_name', 'www.zapokupkami.com') .'" <'. $default_from .'>';
    $message['headers']['From'] = $message['headers']['Sender'] = $message['headers']['Return-Path'] = $message['headers']['Errors-To'] = $message['headers']['Reply-To'] = $message['from'];
  }
}
*/


/**
 * Helper function to send preset messages.
 */
function zp_misc_sendMessage($tag, $data = NULL) {
  
  switch ($tag) {
  /*    
    case 'email_verification':
      
      global $language;
      $params['verification_code'] = $data['verification_code'];
      drupal_mail('zp_misc', 'email_verification', $data['email'], $language, $params, 'www.cloudhostinghq.com <contact@cloudhostinghq.com>');
      
      break;
    
    case 'user_message':
      
      global $language;
      $params['message'] = $data['message'];
      $params['fname'] = $data['fname'];
      $params['lname'] = $data['lname'];
      $params['email'] = $data['email'];
      $params['subscribed'] = $data['subscribed'];
      drupal_mail('zp_misc', 'user_message', 'all4senses@gmail.com', $language, $params, 'www.zapokupkami.com <info@zapokupkami.com>');
      
      break;
    */
    
  }
}


/**
 * Get site's admins objects.
 */
function zp_misc_getAdmins() {
  $query = db_select('users', 'u')
        ->fields('u');
  $query->leftJoin('users_roles', 'ur', 'ur.uid = u.uid');
  $query->leftJoin('role', 'r', 'r.rid = ur.rid');
  $query->condition('r.name', 'administrator');
  $admins = $query->execute()->fetchAllAssoc('uid');

  return $admins;
}


/**
 * Implements hook_form_alter().
 *
 * @param array &$form
 *   Array with declared form.
 *
 * @param array &$form_state
 *   Array with current form state.
 *
 * @param string $form_id
 *   Form ID.
 *
 * @return void
 *   Return nothing.
 */
function zp_misc_form_alter(&$form, &$form_state, $form_id) {
  
  //dpm($form_id);dpm($form);
  
  // Unlink Ckeditor from the comment input form.
  /*
  if($form['#id'] == 'comment-form') {
    $form['comment_body']['und'][0]['#type'] = 'textarea';
  }
  */
  if (isset($form['#node']) && $form_id == $form['#node']->type .'_node_form') {
    $form['body']['und']['0']['#format'] = "full_html";
    //$form['field_custom_php_code']['und']['0']['#format'] = "php_code";
  }
}


/**
 * Implements hook_theme().
 */
function zp_misc_theme($existing, $type, $theme, $path) {
  return array(
    'zp_misc_submenuSimple' => array(
      'variables' => array('vars' => null),
    ),
    'zp_misc_submenuSimple_twoColumns' => array(
      'variables' => array('vars' => null),
    ),
    'zp_misc_submenuSimple_byColumns' => array(
      'variables' => array('vars' => null),
    ),
    'zp_misc_socialLinks' => array(
      'variables' => array('vars' => null),
    ),
    'zp_misc_socialLinks_twoColumns' => array(
      'variables' => array('vars' => null),
    ),
    // Fivestar REPLACING theme functions.
    'zp_misc_fivestar_static' => array(
      'variables' => array('rating' => NULL, 'stars' => 5, 'tag' => 'vote', 'widget' => array('name' => 'default', 'css' => '')),
    ),
      
    // Altered Tagadelic weighted tag cloud.
    'zp_misc_tagadelicWeighted_acceptPredefinedTermsPaths' => array(
      'variables' => array('terms' => array())
    ),
      
    // A bit altered original Theme functions theme_image
    // Here we add an image dimensions if they are not set.
    'zp_misc_image' => array(
      'variables' => array(
        'path' => NULL,
        'width' => NULL,
        'height' => NULL,
        'alt' => '',
        'title' => NULL,
        'attributes' => array(),
      ),
    ),  
      
    // A bit altered original Theme functions theme_image_style
    // Here we add an image dimensions if they are not set.
    'zp_misc_image_style' => array(
      'variables' => array(
        'style_name' => NULL,
        'path' => NULL,
        'width' => NULL,
        'height' => NULL,
        'alt' => '',
        'title' => NULL,
        'attributes' => array(),
      ),
    ),
      
  );
}


function theme_zp_misc_image_style(array $variables) {
  
  
  // Check if a file exists only for anonymous.
//  global $user;
//  if (!$user->uid && !file_exists($variables['path'])) {
//    return NULL;
//  }
  
  
  if (!empty($variables['src']) && !file_exists(ltrim($variables['src'], '/'))) {
    return NULL;
  }
  
  
  $image_src = image_style_url($variables['style_name'], $variables['path']);
  $image = theme('zp_misc_image', array('path' => $image_src, 'source_path' => $variables['path'], 'alt' =>  $variables['alt'], 'title' => $variables['title'] ));
        
  return $image;
}


function theme_zp_misc_image(array $variables) {
  
//  if (!file_exists(str_replace(array('http://www.cloudhostinghq.com/', '%20'), array('', ' '), $variables['path']))) {
//    return NULL;
//  }
  
  // Add dimensions only for anonymous.
  //global $user;
  if (/*!$user->uid &&*/ !$variables['width']) {
    
    
    if(!$size = getimagesize($variables['path'])) {
      // Refresh Session providers data, In case the error is caused by obsolete data for providers which has not been refreshed in SESSION
      zp_misc_getProvidersDataQuick('all', TRUE, TRUE);
      return NULL;
    }
    
    $image = theme('image', array('width' => $size[0], 'height' => $size[1], 'path' => $variables['path'], 'alt' =>  $variables['alt'], 'title' => $variables['title'] ));  
  }
  else {
    $image = theme('image', array('width' => $variables['width'], 'height' => $variables['height'], 'path' => $variables['path'], 'alt' =>  $variables['alt'], 'title' => $variables['title'] ));
  }

  return $image;
}


/**
 * Theme function that renders the HTML for the tags.
 *
 * @ingroup themable
 */
function theme_zp_misc_tagadelicWeighted_acceptPredefinedTermsPaths(array $vars) {
  $terms = $vars['terms'];
  $output = '';

  foreach ($terms as $term) {
    $output .= l($term->name, isset($term->link['href']) ? $term->link['href'] : 'taxonomy/term/' . $term->tid, array(
      'attributes' => array(
        'class' => array("tagadelic", "level" . $term->weight),
        'rel' => 'tag',
        'title'  => $term->description,
        )
      )
    ) . " \n";
  }
  
  
  if(isset($vars['voc'])){
    if (count($terms) >= variable_get('tagadelic_block_tags_' . $vars['voc']->vid, 12)) {
      $output .= theme('more_link', array('title' => t('more tags'), 'url' => "tagadelic/chunk/{$vars['voc']->vid}"));
    }
  }

  return $output;
}
  

/**
 * Simple theming of nested submenu.
 */
function theme_zp_misc_socialLinks($vars) {
  if(empty($vars['submenu']['below'])) {
    return NULL;
  }

  $class = isset($vars['class']) ? $vars['class'] : 'social-links';
  $delimiter = isset($vars['delimiter']) ? $vars['delimiter'] : '';
  $out = '<div class="' . $class . '">';
  $count = 0;
  foreach ($vars['submenu']['below'] as $submenu) {
    if (isset($submenu['link']['hidden']) && $submenu['link']['hidden']) {
      continue;
    }
    
    //$out .= ($count ? $delimiter : '') . '<div>' . l(t($submenu['link']['link_title']), $submenu['link']['href'], array('attributes' => array('class' => array($submenu['link']['link_title']), 'title' => $submenu['link']['options']['attributes']['title'], 'target' => '_blank' ))) . '</div>';
    
    if ($submenu['link']['link_title'] == 'GooglePlus') {
      $out .= ($count ? $delimiter : '') . '<div>' . l($submenu['link']['link_title'], $submenu['link']['href'], array('attributes' => array('class' => array($submenu['link']['link_title']), 'title' => $submenu['link']['options']['attributes']['title'], 'target' => '_blank', 'rel' => 'publisher' ))) . '</div>';
    }
    else {
      $out .= ($count ? $delimiter : '') . '<div>' . l($submenu['link']['link_title'], $submenu['link']['href'], array('attributes' => array('class' => array($submenu['link']['link_title']), 'title' => $submenu['link']['options']['attributes']['title'], 'target' => '_blank' ))) . '</div>';
    }
    
    $count++;
  }
  $out .= '</div>';
  return $out;
}


/**
 * Simple theming of nested submenu twoColumns.
 */
function theme_zp_misc_socialLinks_twoColumns($vars) {
  if(empty($vars['submenu']['below'])) {
    return NULL;
  }

  $class = isset($vars['class']) ? $vars['class'] : 'social-links';
  $delimiter = isset($vars['delimiter']) ? $vars['delimiter'] : '';
  $out = '<div class="' . $class . '"><div class="col-1">';
  $count = 0;
  $amount = count($vars['submenu']['below']);
  $second = FALSE;
  foreach ($vars['submenu']['below'] as $submenu) {
    if (isset($submenu['link']['hidden']) && $submenu['link']['hidden']) {
      continue;
    }
    
    if (!$second && $count > ($amount - 1)/2) {
      $out .= '</div><div class="col-2">';
      $second = TRUE;
    }
    
    $out .= ($count ? $delimiter : '') . '<div>' . l(t($submenu['link']['link_title']), $submenu['link']['href'], array('attributes' => array('class' => array($submenu['link']['link_title']), 'title' => $submenu['link']['options']['attributes']['title'], 'target' => '_blank' ))) . '</div>';
    $count++;
  }
  $out .= '</div></div>';
  return $out;
}


/**
 * Simple theming of nested submenu.
 */
function theme_zp_misc_submenuSimple($vars) {
  if(empty($vars['submenu']['below'])) {
    return NULL;
  }
  $level = isset($vars['level']) ? $vars['level'] : 0;
  $class = isset($vars['class']) ? $vars['class'] : 'om-links';
  $delimiter = isset($vars['delimiter']) ? $vars['delimiter'] : '';
  $out = '<ul class="zp ' . $class . ' lvl-' . $level . '">';
  $count = 0;
  foreach ($vars['submenu']['below'] as $submenu) {
    if (is_object($submenu)) {
      $submenu = (array) $submenu;
    }
    if (isset($submenu['link']['hidden']) && $submenu['link']['hidden']) {
      continue;
    }
    $out .= ($count ? $delimiter : '') . '<li>';
    if($level) {
      for ($i = 0; $i < $level; $i++ ) {
        $out .= '--';
      }
    }
    $title = t($submenu['link']['link_title']);
    if(isset($submenu['count']) && $submenu['count']) {
      $title .= ' (' . $submenu['count'] . ')';
    }
    // If the field Description has '<nolink>' don't show link for this item
    if(isset($submenu['link']['localized_options']['attributes']['title']) && strtolower($submenu['link']['localized_options']['attributes']['title']) == '<nolink>') {
      $out .= $title;
    }
    else {
      $out .= l($title, $submenu['link']['href']);
    }
    $out .= '</li>';
    if (!empty($submenu['below'])) {
      // Recursion call.
      $out .= '<li>' . theme('zp_misc_submenuSimple', array('submenu' => $submenu, 'level' => ($level + 1), 'class' => $class, 'delimiter' => $delimiter )) . '</li>';
    }
    $count++;
  }
  $out .= '</ul>';
  return $out;
}


/**
 * Simple theming of nested submenu, two columns.
 */
function theme_zp_misc_submenuSimple_twoColumns($vars) {
  if(empty($vars['submenu']['below'])) {
    return NULL;
  }
  $level = isset($vars['level']) ? $vars['level'] : 0;
  $class = isset($vars['class']) ? $vars['class'] : 'om-links';
  $delimiter = isset($vars['delimiter']) ? $vars['delimiter'] : '';
  //$out = '<ul class="zp ' . $class . ' lvl-' . $level . '"><div class="col-1">';
  $out = '<div class="zp ' . $class . ' lvl-' . $level . '"><div class="col-1">';
  $count = 0;
  $amount = count($vars['submenu']['below']);
  $second = FALSE;
  foreach ($vars['submenu']['below'] as $submenu) {
    if (is_object($submenu)) {
      $submenu = (array) $submenu;
    }
    if (isset($submenu['link']['hidden']) && $submenu['link']['hidden']) {
      continue;
    }
    
    if (!$second && $count > ($amount - 1)/2) {
      $out .= '</div><div class="col-2">';
      $second = TRUE;
    }
    
    //$out .= ($count ? $delimiter : '') . '<li>';
    $out .= ($count ? $delimiter : '') . '<div>';
    if($level) {
      for ($i = 0; $i < $level; $i++ ) {
        $out .= '--';
      }
    }
    $title = t($submenu['link']['link_title']);
    if(isset($submenu['count']) && $submenu['count']) {
      $title .= ' (' . $submenu['count'] . ')';
    }
    // If the field Description has '<nolink>' don't show link for this item
    if(isset($submenu['link']['localized_options']['attributes']['title']) && strtolower($submenu['link']['localized_options']['attributes']['title']) == '<nolink>') {
      $out .= $title;
    }
    else {
      $out .= l($title, $submenu['link']['href']);
    }
    //$out .= '</li>';
    $out .= '</div>';
    if (!empty($submenu['below'])) {
      // Recursion call.
      //$out .= '<li>' . theme('zp_misc_submenuSimple', array('submenu' => $submenu, 'level' => ($level + 1), 'class' => $class, 'delimiter' => $delimiter )) . '</li>';
      $out .= '<div>' . theme('zp_misc_submenuSimple', array('submenu' => $submenu, 'level' => ($level + 1), 'class' => $class, 'delimiter' => $delimiter )) . '</div>';
    }
    $count++;
  }
  //$out .= '</div></ul>';
  $out .= '</div></div>';
  return $out;
}


/**
 * Simple theming of nested submenu, by columns.
 */
function theme_zp_misc_submenuSimple_byColumns($vars) {
  if(empty($vars['submenu']['below'])) {
    return NULL;
  }
  
  $out = '';
  foreach ($vars['submenu']['below'] as $m) {
    if ($m['link']['hidden']) {
      continue;
    }
    $sub = '';
    //dpm($m['below']);
    foreach ($m['below'] as $sub_m) {
      if (!$sub_m['link']['hidden']) {
        $sub .= '<li>' . l($sub_m['link']['link_title'], $sub_m['link']['link_path']) . '</li>';
      }
    }
    $out .= '<div class="col"><div class="title">' . $m['link']['link_title']. '</div><ul>' . $sub . '</ul></div>';
  }
  
  return $out;
}


/**
 * REPLACE FOR ORIGINAL fivestar module theming function. Just to use only its theming functionality.
 * 
 * Display a plain HTML view-only version of the widget with a specified rating.
 *
 * @param $rating
 *   The desired rating to display out of 100 (i.e. 80 is 4 out of 5 stars).
 * @param $stars
 *   The total number of stars this rating is out of.
 * @param $tag
 *   Allows multiple ratings per node.
 * @return
 *   A themed HTML string representing the star widget.
 */
function theme_zp_misc_fivestar_static($variables) {
  $rating  = $variables['rating'];
  $stars = $variables['stars'];
  $tag = $variables['tag'];
  $widget = $variables['widget'];

  // zp Intrusion!!!!
  $path = drupal_get_path('module', 'zp_misc') . '/css/fivestar';
  drupal_add_css($path . '/css/fivestar.css');
  // END of intrusion.
  
  if($widget['name'] != 'default') {
    // zp changes.
    //drupal_add_css($widget['css']);
    drupal_add_css($path . '/widgets/' . $widget['name'] . '/' . $widget['css']);
  }
  
  $output = '<div class="fivestar fivestar-' . $widget['name'] . '">';
  $output .= '<div class="fivestar-widget-static fivestar-widget-static-'. $tag .' fivestar-widget-static-'. $stars . ' clearfix">';
  if (empty($stars)) {
    $stars = 5;
  }
  $numeric_rating = $rating/(100/$stars);
  for ($n=1; $n <= $stars; $n++) {
    $star_value = ceil((100/$stars) * $n);
    $prev_star_value = ceil((100/$stars) * ($n-1));
    $zebra = ($n % 2 == 0) ? 'even' : 'odd';
    $first = $n == 1 ? ' star-first' : '';
    $last = $n == $stars ? ' star-last' : '';
    $output .= '<div class="star star-'. $n .' star-'. $zebra . $first . $last .'">';
    if ($rating < $star_value && $rating > $prev_star_value) {
      $percent = (($rating - $prev_star_value) / ($star_value - $prev_star_value)) * 100;
      $output .= '<span class="on" style="width: '. $percent .'%">';
    }
    elseif ($rating >= $star_value) {
      $output .= '<span class="on">';
    }
    else {
      $output .= '<span class="off">';
    }
    if ($n == 1)$output .= $numeric_rating;
    $output .= '</span></div>';
  }
  $output .= '</div></div>';
  return $output;
}


/**
 * Checks if the email is already taken by one of the site's registered user.
 */
function zp_misc_emailIsRegistered($email) {
  $data = db_select('users', 'u')
          ->fields('u', array('uid'))
          ->condition('mail', $email)
          ->execute();
  if ($email = $data->fetchField()) {
    return TRUE;
  }
  else {
    return FALSE;
  }
}



/**
 * Implements hook_token_info().
 */
function zp_misc_token_info() {
  // Defines new token 'Provider name' in the node torens group.
//  $info['tokens']['node']['provider-name-for-current-review'] = array(
//    'name' => t('Provider name for a current review'),
//    'description' => t('Name of the provider chosen from a select list or from a custom field if its provided...'),
//  );
//
//  return $info;
}


/**
 * Implements hook_tokens().
 * 
 * Provides token for a current review's provider name. It set to selected from a list or from a manually filled field (if not selected from a list).
 */
function zp_misc_tokens($type, $tokens, array $data = array(), array $options = array()) {
  /*
  $replacements = array();
  $sanitize = !empty($options['sanitize']);

  // Add new token 'provider-name-for-current-review' to a 'node' tokens group.
  if ($type == 'node' && !empty($data['node'])) {
    $node = $data['node'];

    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'provider-name-for-current-review':
          if ($node->type == 'review') {
            if (isset($node->field_ref_provider['und'][0]['target_id']) && $node->field_ref_provider['und'][0]['target_id']) {
              
//              $provider_title = db_select('node', 'n')
//                ->fields('n', array('title'))
//                ->condition('nid', $node->field_ref_provider['und'][0]['target_id'])
//                ->execute()->fetchField();
              
              
              $query = db_select('node', 'n');
              $query->join('field_data_field_p_name', 'pn', "pn.entity_id = n.nid"); // inner_join file_usage table against file_managed
              //$query->fields('n', array('nid', 'title'))  // specifying fields from file_usage table
              $query->fields('pn', array('field_p_name_value')) // specifying fields from file_managed table
                    ->condition('nid', $node->field_ref_provider['und'][0]['target_id']);
              
              $provider_title = $query->execute()->fetchField();
              
              
              
              
              
              $replacements[$original] = $provider_title;
            }
            else {
              $replacements[$original] = check_plain($node->field_r_oprovider['und'][0]['value']);
            }

          }
          
          break;
      }
    }
  }
  
  return $replacements;
  */
}



/**
 * Implements hook_TYPE_alter().
 * 
 * Provides custom tags for the Votes API via votingapi_metadata alter (defined in ).
 */
function zp_misc_votingapi_metadata_alter(&$data) {
  /*
  $data['tags'] += array(
  
    'money' => array(
      'name' => PRICE,
      'description' => 'Price Value Rating for a provider.',
    ),
    'recommend' => array(
      'name' => RECOMMEND,
      'description' => 'Value for Would you recommend this provider. Yes or No.',
    ),
    'overall' => array(
      'name' => OVERALL,
      'description' => 'Average overall value for all providers rates.',
    ),
  );
  */
}


//function zp_misc_views_post_render(&$view, &$output, &$cache) {
//  dpm($view);
//  dpm($output);
//  $view->result[0]->link = 'xxx';
//  //$view->render();
//}

/**
 * Implements hook_views_pre_render().
 */
function zp_misc_views_pre_render(&$view) {
  
  //dpm($view);
  
  //dpm($view->name); dpm($view->current_display);

  // Add a prefaces for the some views pages.
  $key = 'view-' . $view->name . '-' . $view->current_display;
  
  //dpm($key);
  
  $do_attach_preface = FALSE;
  
  switch($key) {

      
    case 'view-taxonomy_term-page':
      $args = arg();
      //dpm($args);
      $term = taxonomy_term_load($args[2]);
      //dpm($term);
      if (isset($args[3]) || $term->vocabulary_machine_name == 'catalog') {
        zp_misc_drupal_not_found();
        drupal_exit();
      }
      
      break;
      
      
      
      
  }
  
  
  if ($do_attach_preface && $preface_node = zp_misc_getPrefaceByKey($key)) {
   
     if ($key == 'view-taxonomy_term-page_equipment' || $key == 'view-taxonomy_term-page_protocols') {
      
      
      
    } 
    else {
      // Change the title of the view (main page title actually)
      if (isset($preface_node->metatags['title']['value'])) {
        $view->build_info['title'] = $preface_node->metatags['title']['value'];
      }
      else{
        $view->build_info['title'] = $preface_node->title;
      }
    }
    
    
    // Show plain caption, not a link for a full node as a full node itself will be unpublished and unreachable.
    $preface_node->title_no_link = TRUE;
    // Hide the title of the preface.
    // $preface_node->title = '';
    // Works, but it's shown after exposed filters.
    $view->attachment_before = render(node_view($preface_node, 'full'));
    
//    global $user;
//    if ($user->uid == 1) {
//      $view->attachment_after = "test";
//    }
    
    // DOesn't work.
    /*
    $view->header = array(
        '#type' => 'item',
        '#markup' => '<div class="preface">' . render(node_view($preface_node)) . '</div>',
    );
    */

    
  }
   
} 


/**
 * Returns preface node by key.
 */
function zp_misc_getPrefaceByKey($key) {
    
    $preface_node = NULL;
    
    $query = db_select('node', 'n');
    $query->join('field_data_field_preface_key', 'pk', "pk.entity_id = n.nid"); 
    $query->fields('n', array('nid'))  
          //->fields('pn', array('field_preface_key_value')) 
          ->condition('n.type', 'preface')
          ->condition('pk.field_preface_key_value', $key); 
    $preface_nid = $query->execute()->fetchField(); 
    if ($preface_nid) {
      $preface_node = node_load($preface_nid);
    }
    return $preface_node;
  }


/**
 * Return themed field content for a view.
 */
function  zp_misc_getFieldThemed_forView($target, $data) {
  
  $out = '';
  
  switch($target) {
    
    case 'blog_post_thumb':
      
      //echo '<div class="logo"><a href="' . $node->p_data['info']['i_web'] . '" target="_blank">' . theme('image_style', array( 'path' =>  $content['field_p_logo'][0]['#item']['uri'], 'style_name' => 'logo_provider_page', 'alt' => $content['field_p_logo'][0]['#item']['alt'], 'title' => $content['field_p_logo'][0]['#item']['title'], 'attributes' => array('rel' => 'v:photo'))) . '</a></div>'; 
      
      //$out = '<a href="#">Test-' . $data['data']->nid . '</a>';
      
      $query = db_select('field_data_field_main_image', 'mi')
        ->fields('mi', array('field_main_image_value'));
      $query->condition('entity_id', $data['data']->nid);
      $main_image = unserialize($query->execute()->fetchField());
      
      if (@$main_image['uri']) {
        //$out = '<div class="block-thumb">' . theme('image_style', array( 'path' =>  $main_image['uri'], 'style_name' => 'block_thumb', 'alt' => @$main_image['alt'], 'title' => $data['data']->node_title)) . '</div>';
        $out = '<span class="block-thumb">' . theme('zp_misc_image_style', array('style_name' => 'block_thumb', 'src' => $main_image['src'], 'path' => $main_image['uri'], 'alt' =>  (@$main_image['alt'] ? $main_image['alt'] : $data['data']->node_title), 'title' => $data['data']->node_title )) . '</span>';
      }
      
      //dpm($main_image);
      //dpm($out);

      return $out;
  }
  
}


/**
 * Forms API validation function for email.
 */
function zp_misc_elementValidate_email($element, &$form_state) {
  if (!valid_email_address($element['#value'])) {
    form_error($element, t('Please enter a valid email address.'));
  }
//  if (empty($element['#value'])) {
//    form_error($element, t('This field is required.'));
//  }
}  


/**
 * Forms API validation function for url.
 */
function zp_misc_elementValidate_url($element, &$form_state) {
  if (!empty($element['#value']) && !valid_url($element['#value'])) {
    form_error($element, t('Please enter a valid url address.'));
  }
//  if (empty($element['#value'])) {
//    form_error($element, t('This field is required.'));
//  }
}


/**
 * Helper function for sorting by weight with uasort function.
 * 
 * Example of using:
 * 
 * uasort($array_with_elements_contained_key_weight, 'zp_misc_sortArrayByWeight');
 */
function zp_misc_sortArrayByWeight($a, $b) 
{
    if ($a['weight'] == $b['weight']) {
        return 0;
    }
    return ($a['weight'] < $b['weight']) ? -1 : 1;
}


/**
 * Socialite social buttons.
 */
function zp_blocks_getSocialiteButtons($url = NULL, $title = NULL) {

  if (!$url) {
    $url = 'http://www.zapokupkami.com' . ($_GET['q'] == 'home' ? '' : $_SERVER['REQUEST_URI']);
  }
  
  drupal_add_js('sites/all/libraries/jquery.plugins/socialite/socialite.min.js');
  //drupal_add_js('sites/all/libraries/jquery.plugins/socialite/socialite.js');
  
  $path_to_custom_js = drupal_get_path('module', 'zp_misc') . '/js/';
  drupal_add_js($path_to_custom_js . 'addSocialite.js');
  /*
  $out = '
  <ul class="social-buttons cf">
			<li><a href="http://twitter.com/share" class="socialite twitter-share" data-text="' . $title . '" data-url="' . $url . '" data-count="horizontal" rel="nofollow" target="_blank"><span class="vhidden">Share on Twitter</span></a></li>
			<li><a href="https://plus.google.com/share?' . 'url=' . $url . '" class="socialite googleplus-one" data-size="medium" data-href="' . $url . '" rel="nofollow" target="_blank"><span class="vhidden">Share on Google+</span></a></li>
			<li><a href="http://www.facebook.com/sharer.php?' . 'u=' . $url . '&amp;t=' . $title . '" class="socialite facebook-like" data-href="' . $url . '" data-send="false" data-layout="button_count" data-width="60" data-show-faces="false" rel="nofollow" target="_blank"><span class="vhidden">Share on Facebook</span></a></li>
			<li><a href="http://www.linkedin.com/shareArticle?' . 'mini=true&amp;url=' . $url . '&amp;title=' . $title . '" class="socialite linkedin-share" data-url="' . $url . '" data-counter="right" rel="nofollow" target="_blank"><span class="vhidden">Share on LinkedIn</span></a></li>
		</ul>
  ';
  */
  
  
  /*
  $out = '
  <ul class="social-buttons cf">
			<li><a href="http://twitter.com/share" class="socialite twitter-share" data-text="' . $title . '" data-url="' . $url . '" data-count="horizontal" rel="nofollow" target="_blank"><span class="vhidden">Share on Twitter</span></a></li>
			<li><a href="https://plus.google.com/share?' . 'url=' . urlencode($url) . '" class="socialite googleplus-one" data-size="medium" data-href="' . $url . '" rel="nofollow" target="_blank"><span class="vhidden">Share on Google+</span></a></li>
			<li><a href="http://www.facebook.com/sharer.php?' . 'u=' . urlencode($url . '&t=' . $title) . '" class="socialite facebook-like" data-href="' . $url . '" data-send="false" data-layout="button_count" data-width="60" data-show-faces="false" rel="nofollow" target="_blank"><span class="vhidden">Share on Facebook</span></a></li>
			<li><a href="http://www.linkedin.com/shareArticle?' . 'mini=true&amp;url=' . urlencode($url . '&title=' . $title) . '" class="socialite linkedin-share" data-url="' . $url . '" data-counter="right" rel="nofollow" target="_blank"><span class="vhidden">Share on LinkedIn</span></a></li>
		</ul>
  ';
  */
  
    
  $out = '
  <ul class="social-buttons cf">
			<li><a href="http://twitter.com/share" class="socialite twitter-share" data-text="' . $title . '" data-url="' . $url . '" data-count="vertical" rel="nofollow" target="_blank"><span class="vhidden">Share on Twitter</span></a></li>
			<li><a href="https://plus.google.com/share?' . 'url=' . urlencode($url) . '" class="socialite googleplus-one" data-size="tall" data-href="' . $url . '" rel="nofollow" target="_blank"><span class="vhidden">Share on Google+</span></a></li>
			<li><a href="http://www.facebook.com/sharer.php?' . 'u=' . urlencode($url . '&t=' . $title) . '" class="socialite facebook-like" data-href="' . $url . '" data-send="false" data-layout="box_count" data-width="70" data-show-faces="false" rel="nofollow" target="_blank"><span class="vhidden">Share on Facebook</span></a></li>
			<li><a href="http://www.linkedin.com/shareArticle?' . 'mini=true&amp;url=' . urlencode($url . '&title=' . $title) . '" class="socialite linkedin-share" data-url="' . $url . '" data-counter="top" rel="nofollow" target="_blank"><span class="vhidden">Share on LinkedIn</span></a></li>
		</ul>
  ';
  
  

  
  
  return $out;
}


/**
 * AddThis social Like buttons set.
 */
function zp_blocks_getAddThisButtonsLike() {

  $out = '
    <!-- AddThis Button BEGIN -->
  <div class="addthis_toolbox addthis_default_style ">
  <a class="addthis_button_linkedin_counter"></a>
  <a class="addthis_button_google_plusone" g:plusone:size="medium"></a>
  <a class="addthis_button_facebook_like" fb:like:layout="button_count" fb:like:locale="en_US"></a>
  <a class="addthis_button_tweet"></a>
  </div>
  <script type="text/javascript">var addthis_config = {"data_track_addressbar":true, ui_language:"en", locale:"en_US"};</script>
  <script type="text/javascript" src="http://s7.addthis.com/js/250/addthis_widget.js#pubid=ra-50253baf64925d35"></script>
  <!-- AddThis Button END -->
  ';
  
  return $out;
}


/**
 * Element Validate for email.
 */
function zp_misc_validate_email($element, &$form_state) {
   if (!preg_match('/^[_a-z0-9-]+(\.[_a-z0-9-]+)*@[a-z0-9-]+(\.[a-z0-9-]+)*(\.[a-z]{2,3})$/', $element['#value'])) {
     form_error($element, 'Wrong email format!');
   }
}


/**
 * Set breadcrumbs for the page, used in the template.php
 */
function zp_misc_setBreadcrumbs(&$variables) {
  
  
  // If we are on the Page Not Found, hide breadcumbs.
  // node/2 - custom ZP Page Not Found.
  if ($_GET['q'] == 'node/2') {
    $variables['breadcrumb'] = NULL;
  }
  
  
  /*
  $tags_cloud_pages = array('/articles/tags', '/blog/tags', '/news/tags');
  $not_teasers_types = array('preface', 'admin_page', 'page', 'quote', 'webform');
  
  global $current_tag_title;
  
  //dpm($_SERVER);
  //dpm($_SERVER['REQUEST_URI']);
  
  //dpm($current_tag_title);
  //dpm(arg());
  
  
  
  if(@$_SERVER['REQUEST_URI'] == '/') {
    $variables['breadcrumb'] = ''; // Home page has no bredcrumb.
  }
  elseif(isset($variables['node']) && !in_array($variables['node']->type, $not_teasers_types) ) {
    //dpm($variables['node']);
    //dpm('not-teasers node------------');
    switch ($variables['node']->type) {
      case 'provider':
        $variables['breadcrumb'] = theme('breadcrumb', array('breadcrumb' => array(l('Home', NULL), l('Providers', 'providers'), $variables['node']->field_p_name['und'][0]['value'] . ' Review')));
        break;
//      case 'review':
//        if (!empty($variables['node']->field_ref_provider['und'][0]['target_id'])) {
//          $variables['breadcrumb'] = theme('breadcrumb', array('breadcrumb' => array(l('Home', NULL), l('Providers', 'providers'), l($variables['node']->field_r_provider_name['und'][0]['value'] . ' Review', 'node/' . $variables['node']->field_ref_provider['und'][0]['target_id']), $variables['node']->title )));
//        }
//        else {
//          $variables['breadcrumb'] = theme('breadcrumb', array('breadcrumb' => array(l('Home', NULL), l('Providers', 'providers'), $variables['node']->title )));
//        }
//        break;
      
//      case 'article':
//        $variables['breadcrumb'] = theme('breadcrumb', array('breadcrumb' => array(l('Home', NULL), l('Articles', 'articles'), l('Library', 'about-voip-services'), $variables['node']->title )));
//        break;
      case 'blog_post':
        $variables['breadcrumb'] = theme('breadcrumb', array('breadcrumb' => array(l('Home', NULL), l('Blog', 'blog'), $variables['node']->title )));
        break;
//      case 'news_post':
//        $variables['breadcrumb'] = theme('breadcrumb', array('breadcrumb' => array(l('Home', NULL), l('Articles', 'articles'), l('News', 'news'), $variables['node']->title )));
//        break;
    }
  }
  
//  elseif(in_array($_SERVER['REQUEST_URI'], $tags_cloud_pages)) {
//    //dpm('Tags cloud page ------------');
//    switch ($_SERVER['REQUEST_URI']) {
//      case '/articles/tags':
//        $variables['breadcrumb'] = theme('breadcrumb', array('breadcrumb' => array(l('Home', NULL), l('Library articles', 'about-voip-services'), 'Library tags' )));
//        break;
//      case '/blog/tags':
//        $variables['breadcrumb'] = theme('breadcrumb', array('breadcrumb' => array(l('Home', NULL), l('Blog', 'blog'), 'Blog tags' )));
//        break;
//      case '/news/tags':
//        $variables['breadcrumb'] = theme('breadcrumb', array('breadcrumb' => array(l('Home', NULL), l('News', 'news'), 'News tags' )));
//        break;
//    }
//  }
  
//  elseif($current_tag_title) {
//    if (strpos($_SERVER['REQUEST_URI'], 'features/') != FALSE) {
//      $variables['breadcrumb'] = theme('breadcrumb', array('breadcrumb' => array(l('Home', NULL), l('Types Of VoIP', 'types'), l('VoIP Features', 'features'), $current_tag_title )));
//    }
//    elseif(strpos($_SERVER['REQUEST_URI'], 'equipment/') != FALSE) {
//      $variables['breadcrumb'] = theme('breadcrumb', array('breadcrumb' => array(l('Home', NULL), l('Types Of VoIP', 'types'), l('VoIP Equipment', 'equipment'), $current_tag_title )));
//    }
//    elseif (strpos($_SERVER['REQUEST_URI'], 'protocols/') != FALSE) {
//      $variables['breadcrumb'] = theme('breadcrumb', array('breadcrumb' => array(l('Home', NULL), l('Types Of VoIP', 'types'), l('VoIP Protocols', 'protocols'), $current_tag_title )));
//    }
//  }
  
//  elseif(strpos($_SERVER['REQUEST_URI'], '/tags/') != FALSE) {
//    //dpm('Tag page ------------');
//    
//    // Don't show anything yet.
//    //$variables['breadcrumb'] = '';
//    
//    // Defined in
//    global $current_tag_title;
//  
//    if(strpos($_SERVER['REQUEST_URI'], 'articles/tags/') != FALSE) {
//      $variables['breadcrumb'] = theme('breadcrumb', array('breadcrumb' => array(l('Home', NULL), l('Library articles', 'about-voip-services'), l('Articles tags', 'articles/tags'), $current_tag_title )));
//    }
//    elseif (strpos($_SERVER['REQUEST_URI'], 'blog/tags/') != FALSE) {
//      $variables['breadcrumb'] = theme('breadcrumb', array('breadcrumb' => array(l('Home', NULL), l('Blog', 'blog'), l('Blog tags', 'blog/tags'), $current_tag_title )));
//    }
//    else {
//      $variables['breadcrumb'] = theme('breadcrumb', array('breadcrumb' => array(l('Home', NULL), l('News', 'news'), l('News tags', 'news/tags'), $current_tag_title )));
//    }
//
//  }
  
  elseif ($breadcrumb = zp_misc_getMenuTrail()) {
    //dpm('Page VIA MENU------------');
    $variables['breadcrumb'] = $breadcrumb;
  }
  elseif (isset($variables['node'])) {
    //dpm('Any other NODE page------------');
    $variables['breadcrumb'] = theme('breadcrumb', array('breadcrumb' => array(l('Home', NULL), $variables['node']->title )));
  }
  elseif (@$_SERVER['REDIRECT_URL'] == '/voip-provider-submit-user-review') {
    //dpm('Any other NODE page------------');
    $variables['breadcrumb'] = theme('breadcrumb', array('breadcrumb' => array(l('Home', NULL), 'Submit Provider Review' )));
  }
  elseif (@$_SERVER['REDIRECT_URL'] == '/voip-phone-submit-user-review') {
    //dpm('Any other NODE page------------');
    $variables['breadcrumb'] = theme('breadcrumb', array('breadcrumb' => array(l('Home', NULL), 'Submit Phone Review' )));
  }
  elseif (arg(0) == 'user' && is_int($arg_uid = arg(1))) {
    //dpm('User profile page------------');
    $userExtendedData = zp_misc_loadUserExtendedData($arg_uid);
    $variables['breadcrumb'] = theme('breadcrumb', array('breadcrumb' => array(l('Home', NULL), l('About Us', 'about-us'), l('Our Team', 'our-team'), $userExtendedData->realname )));
  }
  else {
    //dpm('Any other NOT node page------------');
    $variables['breadcrumb'] = '';
  }
  */
} 